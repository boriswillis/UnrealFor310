// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/performer.proto
#include "EnableGrpcIncludes.h"
#include "v1/performer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
#include "DisableGrpcIncludes.h"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace handEngine {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CaptureSmartPoseRequest::CaptureSmartPoseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_.handedness_)*/ 0

  , /*decltype(_impl_.pose_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptureSmartPoseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureSmartPoseRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureSmartPoseRequestDefaultTypeInternal() {}
  union {
    CaptureSmartPoseRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureSmartPoseRequestDefaultTypeInternal _CaptureSmartPoseRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AddPerformerRequest::AddPerformerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPerformerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPerformerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPerformerRequestDefaultTypeInternal() {}
  union {
    AddPerformerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPerformerRequestDefaultTypeInternal _AddPerformerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AddPerformerResponse::AddPerformerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPerformerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPerformerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPerformerResponseDefaultTypeInternal() {}
  union {
    AddPerformerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPerformerResponseDefaultTypeInternal _AddPerformerResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StagePerformerRequest::StagePerformerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_.isstaged_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StagePerformerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StagePerformerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StagePerformerRequestDefaultTypeInternal() {}
  union {
    StagePerformerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StagePerformerRequestDefaultTypeInternal _StagePerformerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RemovePerformerRequest::RemovePerformerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemovePerformerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovePerformerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovePerformerRequestDefaultTypeInternal() {}
  union {
    RemovePerformerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovePerformerRequestDefaultTypeInternal _RemovePerformerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AssignGloveToPerformerRequest::AssignGloveToPerformerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sourceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gloveid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.profilemeta_)*/nullptr} {}
struct AssignGloveToPerformerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignGloveToPerformerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignGloveToPerformerRequestDefaultTypeInternal() {}
  union {
    AssignGloveToPerformerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignGloveToPerformerRequestDefaultTypeInternal _AssignGloveToPerformerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExpressCaptureRequest::ExpressCaptureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.profilemeta_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct ExpressCaptureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpressCaptureRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpressCaptureRequestDefaultTypeInternal() {}
  union {
    ExpressCaptureRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpressCaptureRequestDefaultTypeInternal _ExpressCaptureRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerformerNameListResponse::PerformerNameListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformerNameListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformerNameListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformerNameListResponseDefaultTypeInternal() {}
  union {
    PerformerNameListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformerNameListResponseDefaultTypeInternal _PerformerNameListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerformerData::PerformerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_.isstaged_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformerDataDefaultTypeInternal() {}
  union {
    PerformerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformerDataDefaultTypeInternal _PerformerData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DeviceData::DeviceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.performername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deviceinformation_)*/nullptr
  , /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_.handedness_)*/ 0
} {}
struct DeviceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDataDefaultTypeInternal() {}
  union {
    DeviceData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDataDefaultTypeInternal _DeviceData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DeviceDataResponse::DeviceDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDataResponseDefaultTypeInternal() {}
  union {
    DeviceDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDataResponseDefaultTypeInternal _DeviceDataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmartPoseCapture::SmartPoseCapture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slidervalues_)*/ {}

  , /*decltype(_impl_.pose_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmartPoseCaptureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartPoseCaptureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartPoseCaptureDefaultTypeInternal() {}
  union {
    SmartPoseCapture _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartPoseCaptureDefaultTypeInternal _SmartPoseCapture_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmartCalibrationResponse::SmartCalibrationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.poses_)*/{}
  , /*decltype(_impl_.poseprogress_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmartCalibrationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartCalibrationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartCalibrationResponseDefaultTypeInternal() {}
  union {
    SmartCalibrationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartCalibrationResponseDefaultTypeInternal _SmartCalibrationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HapticsInputRequest::HapticsInputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.performerid_)*/ 0

  , /*decltype(_impl_.handedness_)*/ 0

  , /*decltype(_impl_.pattern_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HapticsInputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HapticsInputRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HapticsInputRequestDefaultTypeInternal() {}
  union {
    HapticsInputRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HapticsInputRequestDefaultTypeInternal _HapticsInputRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HapticsStatusResponse::HapticsStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HapticsStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HapticsStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HapticsStatusResponseDefaultTypeInternal() {}
  union {
    HapticsStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HapticsStatusResponseDefaultTypeInternal _HapticsStatusResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
namespace handEngine {
namespace v1 {
bool ExpressCaptureRequest_CalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    ExpressCaptureRequest_CalibrationStatus_strings[2] = {};

static const char ExpressCaptureRequest_CalibrationStatus_names[] = {
    "START"
    "STOP"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExpressCaptureRequest_CalibrationStatus_entries[] =
    {
        {{&ExpressCaptureRequest_CalibrationStatus_names[0], 5}, 0},
        {{&ExpressCaptureRequest_CalibrationStatus_names[5], 4}, 1},
};

static const int ExpressCaptureRequest_CalibrationStatus_entries_by_number[] = {
    0,  // 0 -> START
    1,  // 1 -> STOP
};

const std::string& ExpressCaptureRequest_CalibrationStatus_Name(ExpressCaptureRequest_CalibrationStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExpressCaptureRequest_CalibrationStatus_entries, ExpressCaptureRequest_CalibrationStatus_entries_by_number,
          2, ExpressCaptureRequest_CalibrationStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExpressCaptureRequest_CalibrationStatus_entries, ExpressCaptureRequest_CalibrationStatus_entries_by_number, 2,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : ExpressCaptureRequest_CalibrationStatus_strings[idx].get();
}

bool ExpressCaptureRequest_CalibrationStatus_Parse(absl::string_view name, ExpressCaptureRequest_CalibrationStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExpressCaptureRequest_CalibrationStatus_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ExpressCaptureRequest_CalibrationStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ExpressCaptureRequest_CalibrationStatus ExpressCaptureRequest::START;
constexpr ExpressCaptureRequest_CalibrationStatus ExpressCaptureRequest::STOP;
constexpr ExpressCaptureRequest_CalibrationStatus ExpressCaptureRequest::CalibrationStatus_MIN;
constexpr ExpressCaptureRequest_CalibrationStatus ExpressCaptureRequest::CalibrationStatus_MAX;
constexpr int ExpressCaptureRequest::CalibrationStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SmartPoseCaptureStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    SmartPoseCaptureStatus_strings[3] = {};

static const char SmartPoseCaptureStatus_names[] = {
    "POSE_CAPTURED"
    "POSE_CAPTURING"
    "POSE_UNCAPTURED"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SmartPoseCaptureStatus_entries[] =
    {
        {{&SmartPoseCaptureStatus_names[0], 13}, 2},
        {{&SmartPoseCaptureStatus_names[13], 14}, 1},
        {{&SmartPoseCaptureStatus_names[27], 15}, 0},
};

static const int SmartPoseCaptureStatus_entries_by_number[] = {
    2,  // 0 -> POSE_UNCAPTURED
    1,  // 1 -> POSE_CAPTURING
    0,  // 2 -> POSE_CAPTURED
};

const std::string& SmartPoseCaptureStatus_Name(SmartPoseCaptureStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SmartPoseCaptureStatus_entries, SmartPoseCaptureStatus_entries_by_number,
          3, SmartPoseCaptureStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SmartPoseCaptureStatus_entries, SmartPoseCaptureStatus_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : SmartPoseCaptureStatus_strings[idx].get();
}

bool SmartPoseCaptureStatus_Parse(absl::string_view name, SmartPoseCaptureStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SmartPoseCaptureStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SmartPoseCaptureStatus>(int_value);
  }
  return success;
}
bool HapticsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 99:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    HapticsStatus_strings[9] = {};

static const char HapticsStatus_names[] = {
    "BUSY"
    "ERROR"
    "FAILED_PRECONDITION"
    "OK"
    "OVER"
    "PERMANENT_FAILURE"
    "SHORT"
    "TEMP"
    "VIN_FAIL"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HapticsStatus_entries[] =
    {
        {{&HapticsStatus_names[0], 4}, 2},
        {{&HapticsStatus_names[4], 5}, 0},
        {{&HapticsStatus_names[9], 19}, 64},
        {{&HapticsStatus_names[28], 2}, 1},
        {{&HapticsStatus_names[30], 4}, 4},
        {{&HapticsStatus_names[34], 17}, 99},
        {{&HapticsStatus_names[51], 5}, 8},
        {{&HapticsStatus_names[56], 4}, 16},
        {{&HapticsStatus_names[60], 8}, 32},
};

static const int HapticsStatus_entries_by_number[] = {
    1,  // 0 -> ERROR
    3,  // 1 -> OK
    0,  // 2 -> BUSY
    4,  // 4 -> OVER
    6,  // 8 -> SHORT
    7,  // 16 -> TEMP
    8,  // 32 -> VIN_FAIL
    2,  // 64 -> FAILED_PRECONDITION
    5,  // 99 -> PERMANENT_FAILURE
};

const std::string& HapticsStatus_Name(HapticsStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HapticsStatus_entries, HapticsStatus_entries_by_number,
          9, HapticsStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HapticsStatus_entries, HapticsStatus_entries_by_number, 9,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : HapticsStatus_strings[idx].get();
}

bool HapticsStatus_Parse(absl::string_view name, HapticsStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HapticsStatus_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<HapticsStatus>(int_value);
  }
  return success;
}
// ===================================================================

class CaptureSmartPoseRequest::_Internal {
 public:
};

CaptureSmartPoseRequest::CaptureSmartPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.CaptureSmartPoseRequest)
}
CaptureSmartPoseRequest::CaptureSmartPoseRequest(const CaptureSmartPoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.CaptureSmartPoseRequest)
}

inline void CaptureSmartPoseRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performerid_) { 0 }

    , decltype(_impl_.handedness_) { 0 }

    , decltype(_impl_.pose_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CaptureSmartPoseRequest::~CaptureSmartPoseRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.CaptureSmartPoseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureSmartPoseRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CaptureSmartPoseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptureSmartPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.CaptureSmartPoseRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.performerid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pose_) -
      reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.pose_));
  _internal_metadata_.Clear<std::string>();
}

const char* CaptureSmartPoseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 performerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.Handedness handedness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_handedness(static_cast<::handEngine::v1::Handedness>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.SmartPose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_pose(static_cast<::handEngine::v1::SmartPose>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CaptureSmartPoseRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.CaptureSmartPoseRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_performerid(), target);
  }

  // .handEngine.v1.Handedness handedness = 2;
  if (this->_internal_handedness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_handedness(), target);
  }

  // .handEngine.v1.SmartPose pose = 3;
  if (this->_internal_pose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.CaptureSmartPoseRequest)
  return target;
}

::size_t CaptureSmartPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.CaptureSmartPoseRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  // .handEngine.v1.Handedness handedness = 2;
  if (this->_internal_handedness() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_handedness());
  }

  // .handEngine.v1.SmartPose pose = 3;
  if (this->_internal_pose() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pose());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptureSmartPoseRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CaptureSmartPoseRequest*>(
      &from));
}

void CaptureSmartPoseRequest::MergeFrom(const CaptureSmartPoseRequest& from) {
  CaptureSmartPoseRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.CaptureSmartPoseRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  if (from._internal_handedness() != 0) {
    _this->_internal_set_handedness(from._internal_handedness());
  }
  if (from._internal_pose() != 0) {
    _this->_internal_set_pose(from._internal_pose());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptureSmartPoseRequest::CopyFrom(const CaptureSmartPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.CaptureSmartPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureSmartPoseRequest::IsInitialized() const {
  return true;
}

void CaptureSmartPoseRequest::InternalSwap(CaptureSmartPoseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureSmartPoseRequest, _impl_.pose_)
      + sizeof(CaptureSmartPoseRequest::_impl_.pose_)
      - PROTOBUF_FIELD_OFFSET(CaptureSmartPoseRequest, _impl_.performerid_)>(
          reinterpret_cast<char*>(&_impl_.performerid_),
          reinterpret_cast<char*>(&other->_impl_.performerid_));
}

std::string CaptureSmartPoseRequest::GetTypeName() const {
  return "handEngine.v1.CaptureSmartPoseRequest";
}

// ===================================================================

class AddPerformerRequest::_Internal {
 public:
};

AddPerformerRequest::AddPerformerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.AddPerformerRequest)
}
AddPerformerRequest::AddPerformerRequest(const AddPerformerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AddPerformerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.performername_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_performername().empty()) {
    _this->_impl_.performername_.Set(from._internal_performername(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.AddPerformerRequest)
}

inline void AddPerformerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performername_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddPerformerRequest::~AddPerformerRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.AddPerformerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPerformerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.performername_.Destroy();
}

void AddPerformerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPerformerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.AddPerformerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.performername_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* AddPerformerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string performerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_performername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddPerformerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.AddPerformerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    const std::string& _s = this->_internal_performername();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.AddPerformerRequest.performerName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.AddPerformerRequest)
  return target;
}

::size_t AddPerformerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.AddPerformerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_performername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPerformerRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddPerformerRequest*>(
      &from));
}

void AddPerformerRequest::MergeFrom(const AddPerformerRequest& from) {
  AddPerformerRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.AddPerformerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_performername().empty()) {
    _this->_internal_set_performername(from._internal_performername());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddPerformerRequest::CopyFrom(const AddPerformerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.AddPerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPerformerRequest::IsInitialized() const {
  return true;
}

void AddPerformerRequest::InternalSwap(AddPerformerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.performername_, lhs_arena,
                                       &other->_impl_.performername_, rhs_arena);
}

std::string AddPerformerRequest::GetTypeName() const {
  return "handEngine.v1.AddPerformerRequest";
}

// ===================================================================

class AddPerformerResponse::_Internal {
 public:
};

AddPerformerResponse::AddPerformerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.AddPerformerResponse)
}
AddPerformerResponse::AddPerformerResponse(const AddPerformerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.AddPerformerResponse)
}

inline void AddPerformerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performerid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddPerformerResponse::~AddPerformerResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.AddPerformerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPerformerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddPerformerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPerformerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.AddPerformerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.performerid_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* AddPerformerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 performerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddPerformerResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.AddPerformerResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_performerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.AddPerformerResponse)
  return target;
}

::size_t AddPerformerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.AddPerformerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPerformerResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddPerformerResponse*>(
      &from));
}

void AddPerformerResponse::MergeFrom(const AddPerformerResponse& from) {
  AddPerformerResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.AddPerformerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddPerformerResponse::CopyFrom(const AddPerformerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.AddPerformerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPerformerResponse::IsInitialized() const {
  return true;
}

void AddPerformerResponse::InternalSwap(AddPerformerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.performerid_, other->_impl_.performerid_);
}

std::string AddPerformerResponse::GetTypeName() const {
  return "handEngine.v1.AddPerformerResponse";
}

// ===================================================================

class StagePerformerRequest::_Internal {
 public:
};

StagePerformerRequest::StagePerformerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.StagePerformerRequest)
}
StagePerformerRequest::StagePerformerRequest(const StagePerformerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.StagePerformerRequest)
}

inline void StagePerformerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performerid_) { 0 }

    , decltype(_impl_.isstaged_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StagePerformerRequest::~StagePerformerRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.StagePerformerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StagePerformerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StagePerformerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StagePerformerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.StagePerformerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.performerid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isstaged_) -
      reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.isstaged_));
  _internal_metadata_.Clear<std::string>();
}

const char* StagePerformerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 performerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isStaged = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.isstaged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StagePerformerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.StagePerformerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_performerid(), target);
  }

  // bool isStaged = 2;
  if (this->_internal_isstaged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_isstaged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.StagePerformerRequest)
  return target;
}

::size_t StagePerformerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.StagePerformerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  // bool isStaged = 2;
  if (this->_internal_isstaged() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StagePerformerRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StagePerformerRequest*>(
      &from));
}

void StagePerformerRequest::MergeFrom(const StagePerformerRequest& from) {
  StagePerformerRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.StagePerformerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  if (from._internal_isstaged() != 0) {
    _this->_internal_set_isstaged(from._internal_isstaged());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StagePerformerRequest::CopyFrom(const StagePerformerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.StagePerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StagePerformerRequest::IsInitialized() const {
  return true;
}

void StagePerformerRequest::InternalSwap(StagePerformerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StagePerformerRequest, _impl_.isstaged_)
      + sizeof(StagePerformerRequest::_impl_.isstaged_)
      - PROTOBUF_FIELD_OFFSET(StagePerformerRequest, _impl_.performerid_)>(
          reinterpret_cast<char*>(&_impl_.performerid_),
          reinterpret_cast<char*>(&other->_impl_.performerid_));
}

std::string StagePerformerRequest::GetTypeName() const {
  return "handEngine.v1.StagePerformerRequest";
}

// ===================================================================

class RemovePerformerRequest::_Internal {
 public:
};

RemovePerformerRequest::RemovePerformerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.RemovePerformerRequest)
}
RemovePerformerRequest::RemovePerformerRequest(const RemovePerformerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.RemovePerformerRequest)
}

inline void RemovePerformerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performerid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemovePerformerRequest::~RemovePerformerRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.RemovePerformerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemovePerformerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemovePerformerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemovePerformerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.RemovePerformerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.performerid_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* RemovePerformerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 performerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemovePerformerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.RemovePerformerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_performerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.RemovePerformerRequest)
  return target;
}

::size_t RemovePerformerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.RemovePerformerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePerformerRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemovePerformerRequest*>(
      &from));
}

void RemovePerformerRequest::MergeFrom(const RemovePerformerRequest& from) {
  RemovePerformerRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.RemovePerformerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemovePerformerRequest::CopyFrom(const RemovePerformerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.RemovePerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePerformerRequest::IsInitialized() const {
  return true;
}

void RemovePerformerRequest::InternalSwap(RemovePerformerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.performerid_, other->_impl_.performerid_);
}

std::string RemovePerformerRequest::GetTypeName() const {
  return "handEngine.v1.RemovePerformerRequest";
}

// ===================================================================

class AssignGloveToPerformerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AssignGloveToPerformerRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AssignGloveToPerformerRequest, _impl_._has_bits_);
  static const ::handEngine::v1::ProfileMeta& profilemeta(const AssignGloveToPerformerRequest* msg);
  static void set_has_profilemeta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::handEngine::v1::ProfileMeta&
AssignGloveToPerformerRequest::_Internal::profilemeta(const AssignGloveToPerformerRequest* msg) {
  return *msg->_impl_.profilemeta_;
}
void AssignGloveToPerformerRequest::clear_profilemeta() {
  if (_impl_.profilemeta_ != nullptr) _impl_.profilemeta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AssignGloveToPerformerRequest::AssignGloveToPerformerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.AssignGloveToPerformerRequest)
}
AssignGloveToPerformerRequest::AssignGloveToPerformerRequest(const AssignGloveToPerformerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AssignGloveToPerformerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sourceid_) {}

    , decltype(_impl_.gloveid_) {}

    , decltype(_impl_.profilemeta_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceid().empty()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), _this->GetArenaForAllocation());
  }
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gloveid().empty()) {
    _this->_impl_.gloveid_.Set(from._internal_gloveid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.profilemeta_ = new ::handEngine::v1::ProfileMeta(*from._impl_.profilemeta_);
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.AssignGloveToPerformerRequest)
}

inline void AssignGloveToPerformerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sourceid_) {}

    , decltype(_impl_.gloveid_) {}

    , decltype(_impl_.profilemeta_){nullptr}
  };
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssignGloveToPerformerRequest::~AssignGloveToPerformerRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.AssignGloveToPerformerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignGloveToPerformerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourceid_.Destroy();
  _impl_.gloveid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.profilemeta_;
}

void AssignGloveToPerformerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignGloveToPerformerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.AssignGloveToPerformerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourceid_.ClearToEmpty();
  _impl_.gloveid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.profilemeta_ != nullptr);
    _impl_.profilemeta_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AssignGloveToPerformerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gloveId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gloveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.ProfileMeta profileMeta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilemeta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AssignGloveToPerformerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.AssignGloveToPerformerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    const std::string& _s = this->_internal_sourceid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.AssignGloveToPerformerRequest.sourceId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string gloveId = 2;
  if (!this->_internal_gloveid().empty()) {
    const std::string& _s = this->_internal_gloveid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.AssignGloveToPerformerRequest.gloveId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .handEngine.v1.ProfileMeta profileMeta = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::profilemeta(this),
        _Internal::profilemeta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.AssignGloveToPerformerRequest)
  return target;
}

::size_t AssignGloveToPerformerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.AssignGloveToPerformerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sourceid());
  }

  // string gloveId = 2;
  if (!this->_internal_gloveid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gloveid());
  }

  // .handEngine.v1.ProfileMeta profileMeta = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profilemeta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignGloveToPerformerRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AssignGloveToPerformerRequest*>(
      &from));
}

void AssignGloveToPerformerRequest::MergeFrom(const AssignGloveToPerformerRequest& from) {
  AssignGloveToPerformerRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.AssignGloveToPerformerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourceid().empty()) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  if (!from._internal_gloveid().empty()) {
    _this->_internal_set_gloveid(from._internal_gloveid());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_profilemeta()->::handEngine::v1::ProfileMeta::MergeFrom(
        from._internal_profilemeta());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AssignGloveToPerformerRequest::CopyFrom(const AssignGloveToPerformerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.AssignGloveToPerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignGloveToPerformerRequest::IsInitialized() const {
  return true;
}

void AssignGloveToPerformerRequest::InternalSwap(AssignGloveToPerformerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sourceid_, lhs_arena,
                                       &other->_impl_.sourceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gloveid_, lhs_arena,
                                       &other->_impl_.gloveid_, rhs_arena);
  swap(_impl_.profilemeta_, other->_impl_.profilemeta_);
}

std::string AssignGloveToPerformerRequest::GetTypeName() const {
  return "handEngine.v1.AssignGloveToPerformerRequest";
}

// ===================================================================

class ExpressCaptureRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpressCaptureRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExpressCaptureRequest, _impl_._has_bits_);
  static const ::handEngine::v1::ProfileMeta& profilemeta(const ExpressCaptureRequest* msg);
  static void set_has_profilemeta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::handEngine::v1::ProfileMeta&
ExpressCaptureRequest::_Internal::profilemeta(const ExpressCaptureRequest* msg) {
  return *msg->_impl_.profilemeta_;
}
void ExpressCaptureRequest::clear_profilemeta() {
  if (_impl_.profilemeta_ != nullptr) _impl_.profilemeta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExpressCaptureRequest::ExpressCaptureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.ExpressCaptureRequest)
}
ExpressCaptureRequest::ExpressCaptureRequest(const ExpressCaptureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ExpressCaptureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.profilemeta_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.profilemeta_ = new ::handEngine::v1::ProfileMeta(*from._impl_.profilemeta_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.ExpressCaptureRequest)
}

inline void ExpressCaptureRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.profilemeta_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
}

ExpressCaptureRequest::~ExpressCaptureRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.ExpressCaptureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpressCaptureRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.profilemeta_;
}

void ExpressCaptureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpressCaptureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.ExpressCaptureRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.profilemeta_ != nullptr);
    _impl_.profilemeta_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExpressCaptureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.ProfileMeta profileMeta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilemeta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.ExpressCaptureRequest.CalibrationStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::handEngine::v1::ExpressCaptureRequest_CalibrationStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExpressCaptureRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.ExpressCaptureRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .handEngine.v1.ProfileMeta profileMeta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::profilemeta(this),
        _Internal::profilemeta(this).GetCachedSize(), target, stream);
  }

  // .handEngine.v1.ExpressCaptureRequest.CalibrationStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.ExpressCaptureRequest)
  return target;
}

::size_t ExpressCaptureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.ExpressCaptureRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .handEngine.v1.ProfileMeta profileMeta = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profilemeta_);
  }

  // .handEngine.v1.ExpressCaptureRequest.CalibrationStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpressCaptureRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExpressCaptureRequest*>(
      &from));
}

void ExpressCaptureRequest::MergeFrom(const ExpressCaptureRequest& from) {
  ExpressCaptureRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.ExpressCaptureRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_profilemeta()->::handEngine::v1::ProfileMeta::MergeFrom(
        from._internal_profilemeta());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExpressCaptureRequest::CopyFrom(const ExpressCaptureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.ExpressCaptureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressCaptureRequest::IsInitialized() const {
  return true;
}

void ExpressCaptureRequest::InternalSwap(ExpressCaptureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpressCaptureRequest, _impl_.status_)
      + sizeof(ExpressCaptureRequest::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ExpressCaptureRequest, _impl_.profilemeta_)>(
          reinterpret_cast<char*>(&_impl_.profilemeta_),
          reinterpret_cast<char*>(&other->_impl_.profilemeta_));
}

std::string ExpressCaptureRequest::GetTypeName() const {
  return "handEngine.v1.ExpressCaptureRequest";
}

// ===================================================================

class PerformerNameListResponse::_Internal {
 public:
};

PerformerNameListResponse::PerformerNameListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.PerformerNameListResponse)
}
PerformerNameListResponse::PerformerNameListResponse(const PerformerNameListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerformerNameListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.performers_){from._impl_.performers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.PerformerNameListResponse)
}

inline void PerformerNameListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PerformerNameListResponse::~PerformerNameListResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.PerformerNameListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformerNameListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_performers()->~RepeatedPtrField();
}

void PerformerNameListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformerNameListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.PerformerNameListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_performers()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerformerNameListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .handEngine.v1.PerformerData performers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_performers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerformerNameListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.PerformerNameListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handEngine.v1.PerformerData performers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_performers_size()); i < n; i++) {
    const auto& repfield = this->_internal_performers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.PerformerNameListResponse)
  return target;
}

::size_t PerformerNameListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.PerformerNameListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handEngine.v1.PerformerData performers = 1;
  total_size += 1UL * this->_internal_performers_size();
  for (const auto& msg : this->_internal_performers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerNameListResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerformerNameListResponse*>(
      &from));
}

void PerformerNameListResponse::MergeFrom(const PerformerNameListResponse& from) {
  PerformerNameListResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.PerformerNameListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_performers()->MergeFrom(from._internal_performers());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerformerNameListResponse::CopyFrom(const PerformerNameListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.PerformerNameListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerNameListResponse::IsInitialized() const {
  return true;
}

void PerformerNameListResponse::InternalSwap(PerformerNameListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_performers()->InternalSwap(other->_internal_mutable_performers());
}

std::string PerformerNameListResponse::GetTypeName() const {
  return "handEngine.v1.PerformerNameListResponse";
}

// ===================================================================

class PerformerData::_Internal {
 public:
};

PerformerData::PerformerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.PerformerData)
}
PerformerData::PerformerData(const PerformerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerformerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.performername_) {}

    , decltype(_impl_.performerid_) {}

    , decltype(_impl_.isstaged_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_performername().empty()) {
    _this->_impl_.performername_.Set(from._internal_performername(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.performerid_, &from._impl_.performerid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isstaged_) -
    reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.isstaged_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.PerformerData)
}

inline void PerformerData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performername_) {}

    , decltype(_impl_.performerid_) { 0 }

    , decltype(_impl_.isstaged_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerformerData::~PerformerData() {
  // @@protoc_insertion_point(destructor:handEngine.v1.PerformerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformerData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.performername_.Destroy();
}

void PerformerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformerData::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.PerformerData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.performername_.ClearToEmpty();
  ::memset(&_impl_.performerid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isstaged_) -
      reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.isstaged_));
  _internal_metadata_.Clear<std::string>();
}

const char* PerformerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string performerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_performername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 performerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isStaged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.isstaged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerformerData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.PerformerData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    const std::string& _s = this->_internal_performername();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.PerformerData.performerName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 performerId = 2;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_performerid(), target);
  }

  // bool isStaged = 3;
  if (this->_internal_isstaged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isstaged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.PerformerData)
  return target;
}

::size_t PerformerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.PerformerData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_performername());
  }

  // int32 performerId = 2;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  // bool isStaged = 3;
  if (this->_internal_isstaged() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerformerData*>(
      &from));
}

void PerformerData::MergeFrom(const PerformerData& from) {
  PerformerData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.PerformerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_performername().empty()) {
    _this->_internal_set_performername(from._internal_performername());
  }
  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  if (from._internal_isstaged() != 0) {
    _this->_internal_set_isstaged(from._internal_isstaged());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerformerData::CopyFrom(const PerformerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.PerformerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerData::IsInitialized() const {
  return true;
}

void PerformerData::InternalSwap(PerformerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.performername_, lhs_arena,
                                       &other->_impl_.performername_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformerData, _impl_.isstaged_)
      + sizeof(PerformerData::_impl_.isstaged_)
      - PROTOBUF_FIELD_OFFSET(PerformerData, _impl_.performerid_)>(
          reinterpret_cast<char*>(&_impl_.performerid_),
          reinterpret_cast<char*>(&other->_impl_.performerid_));
}

std::string PerformerData::GetTypeName() const {
  return "handEngine.v1.PerformerData";
}

// ===================================================================

class DeviceData::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceData, _impl_._has_bits_);
  static const ::handEngine::v1::GloveInformationResponse& deviceinformation(const DeviceData* msg);
  static void set_has_deviceinformation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::handEngine::v1::GloveInformationResponse&
DeviceData::_Internal::deviceinformation(const DeviceData* msg) {
  return *msg->_impl_.deviceinformation_;
}
void DeviceData::clear_deviceinformation() {
  if (_impl_.deviceinformation_ != nullptr) _impl_.deviceinformation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeviceData::DeviceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.DeviceData)
}
DeviceData::DeviceData(const DeviceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeviceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performername_) {}

    , decltype(_impl_.deviceinformation_){nullptr}
    , decltype(_impl_.performerid_) {}

    , decltype(_impl_.handedness_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_performername().empty()) {
    _this->_impl_.performername_.Set(from._internal_performername(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceinformation_ = new ::handEngine::v1::GloveInformationResponse(*from._impl_.deviceinformation_);
  }
  ::memcpy(&_impl_.performerid_, &from._impl_.performerid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.handedness_) -
    reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.handedness_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.DeviceData)
}

inline void DeviceData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performername_) {}

    , decltype(_impl_.deviceinformation_){nullptr}
    , decltype(_impl_.performerid_) { 0 }

    , decltype(_impl_.handedness_) { 0 }

  };
  _impl_.performername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.performername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceData::~DeviceData() {
  // @@protoc_insertion_point(destructor:handEngine.v1.DeviceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.performername_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deviceinformation_;
}

void DeviceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceData::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.DeviceData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.performername_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deviceinformation_ != nullptr);
    _impl_.deviceinformation_->Clear();
  }
  ::memset(&_impl_.performerid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.handedness_) -
      reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.handedness_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string performerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_performername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 performerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.Handedness handedness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_handedness(static_cast<::handEngine::v1::Handedness>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.GloveInformationResponse deviceInformation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceinformation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.DeviceData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    const std::string& _s = this->_internal_performername();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.DeviceData.performerName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 performerId = 2;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_performerid(), target);
  }

  // .handEngine.v1.Handedness handedness = 3;
  if (this->_internal_handedness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_handedness(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .handEngine.v1.GloveInformationResponse deviceInformation = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::deviceinformation(this),
        _Internal::deviceinformation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.DeviceData)
  return target;
}

::size_t DeviceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.DeviceData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string performerName = 1;
  if (!this->_internal_performername().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_performername());
  }

  // .handEngine.v1.GloveInformationResponse deviceInformation = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deviceinformation_);
  }

  // int32 performerId = 2;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  // .handEngine.v1.Handedness handedness = 3;
  if (this->_internal_handedness() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_handedness());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceData*>(
      &from));
}

void DeviceData::MergeFrom(const DeviceData& from) {
  DeviceData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.DeviceData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_performername().empty()) {
    _this->_internal_set_performername(from._internal_performername());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deviceinformation()->::handEngine::v1::GloveInformationResponse::MergeFrom(
        from._internal_deviceinformation());
  }
  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  if (from._internal_handedness() != 0) {
    _this->_internal_set_handedness(from._internal_handedness());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceData::CopyFrom(const DeviceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.DeviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceData::IsInitialized() const {
  return true;
}

void DeviceData::InternalSwap(DeviceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.performername_, lhs_arena,
                                       &other->_impl_.performername_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceData, _impl_.handedness_)
      + sizeof(DeviceData::_impl_.handedness_)
      - PROTOBUF_FIELD_OFFSET(DeviceData, _impl_.deviceinformation_)>(
          reinterpret_cast<char*>(&_impl_.deviceinformation_),
          reinterpret_cast<char*>(&other->_impl_.deviceinformation_));
}

std::string DeviceData::GetTypeName() const {
  return "handEngine.v1.DeviceData";
}

// ===================================================================

class DeviceDataResponse::_Internal {
 public:
};

DeviceDataResponse::DeviceDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.DeviceDataResponse)
}
DeviceDataResponse::DeviceDataResponse(const DeviceDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeviceDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.DeviceDataResponse)
}

inline void DeviceDataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceDataResponse::~DeviceDataResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.DeviceDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_devices()->~RepeatedPtrField();
}

void DeviceDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.DeviceDataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_devices()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .handEngine.v1.DeviceData devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceDataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.DeviceDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handEngine.v1.DeviceData devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.DeviceDataResponse)
  return target;
}

::size_t DeviceDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.DeviceDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handEngine.v1.DeviceData devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_internal_devices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDataResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceDataResponse*>(
      &from));
}

void DeviceDataResponse::MergeFrom(const DeviceDataResponse& from) {
  DeviceDataResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.DeviceDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_devices()->MergeFrom(from._internal_devices());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceDataResponse::CopyFrom(const DeviceDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.DeviceDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDataResponse::IsInitialized() const {
  return true;
}

void DeviceDataResponse::InternalSwap(DeviceDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_devices()->InternalSwap(other->_internal_mutable_devices());
}

std::string DeviceDataResponse::GetTypeName() const {
  return "handEngine.v1.DeviceDataResponse";
}

// ===================================================================

class SmartPoseCapture::_Internal {
 public:
};

SmartPoseCapture::SmartPoseCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.SmartPoseCapture)
}
SmartPoseCapture::SmartPoseCapture(const SmartPoseCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SmartPoseCapture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slidervalues_) { from._impl_.slidervalues_ }

    , decltype(_impl_.pose_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.pose_, &from._impl_.pose_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.pose_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.SmartPoseCapture)
}

inline void SmartPoseCapture::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.slidervalues_) { arena }

    , decltype(_impl_.pose_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SmartPoseCapture::~SmartPoseCapture() {
  // @@protoc_insertion_point(destructor:handEngine.v1.SmartPoseCapture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartPoseCapture::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slidervalues_.~RepeatedField();
}

void SmartPoseCapture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartPoseCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.SmartPoseCapture)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_slidervalues()->Clear();
  ::memset(&_impl_.pose_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.pose_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<std::string>();
}

const char* SmartPoseCapture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.SmartPose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_pose(static_cast<::handEngine::v1::SmartPose>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.SmartPoseCaptureStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::handEngine::v1::SmartPoseCaptureStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated double sliderValues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_slidervalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 25) {
          _internal_add_slidervalues(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmartPoseCapture::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.SmartPoseCapture)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .handEngine.v1.SmartPose pose = 1;
  if (this->_internal_pose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_pose(), target);
  }

  // .handEngine.v1.SmartPoseCaptureStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  // repeated double sliderValues = 3;
  if (this->_internal_slidervalues_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_slidervalues(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.SmartPoseCapture)
  return target;
}

::size_t SmartPoseCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.SmartPoseCapture)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sliderValues = 3;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_slidervalues_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .handEngine.v1.SmartPose pose = 1;
  if (this->_internal_pose() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pose());
  }

  // .handEngine.v1.SmartPoseCaptureStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartPoseCapture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SmartPoseCapture*>(
      &from));
}

void SmartPoseCapture::MergeFrom(const SmartPoseCapture& from) {
  SmartPoseCapture* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.SmartPoseCapture)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slidervalues_.MergeFrom(from._impl_.slidervalues_);
  if (from._internal_pose() != 0) {
    _this->_internal_set_pose(from._internal_pose());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SmartPoseCapture::CopyFrom(const SmartPoseCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.SmartPoseCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartPoseCapture::IsInitialized() const {
  return true;
}

void SmartPoseCapture::InternalSwap(SmartPoseCapture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.slidervalues_.InternalSwap(&other->_impl_.slidervalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartPoseCapture, _impl_.status_)
      + sizeof(SmartPoseCapture::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SmartPoseCapture, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

std::string SmartPoseCapture::GetTypeName() const {
  return "handEngine.v1.SmartPoseCapture";
}

// ===================================================================

class SmartCalibrationResponse::_Internal {
 public:
};

SmartCalibrationResponse::SmartCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.SmartCalibrationResponse)
}
SmartCalibrationResponse::SmartCalibrationResponse(const SmartCalibrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SmartCalibrationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.poses_){from._impl_.poses_}
    , decltype(_impl_.poseprogress_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.poseprogress_ = from._impl_.poseprogress_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.SmartCalibrationResponse)
}

inline void SmartCalibrationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.poses_){arena}
    , decltype(_impl_.poseprogress_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SmartCalibrationResponse::~SmartCalibrationResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.SmartCalibrationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartCalibrationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_poses()->~RepeatedPtrField();
}

void SmartCalibrationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartCalibrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.SmartCalibrationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_poses()->Clear();
  _impl_.poseprogress_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* SmartCalibrationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .handEngine.v1.SmartPoseCapture poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 poseProgress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.poseprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmartCalibrationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.SmartCalibrationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handEngine.v1.SmartPoseCapture poses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 poseProgress = 3;
  if (this->_internal_poseprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_poseprogress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.SmartCalibrationResponse)
  return target;
}

::size_t SmartCalibrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.SmartCalibrationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handEngine.v1.SmartPoseCapture poses = 1;
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->_internal_poses()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 poseProgress = 3;
  if (this->_internal_poseprogress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_poseprogress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartCalibrationResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SmartCalibrationResponse*>(
      &from));
}

void SmartCalibrationResponse::MergeFrom(const SmartCalibrationResponse& from) {
  SmartCalibrationResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.SmartCalibrationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_poses()->MergeFrom(from._internal_poses());
  if (from._internal_poseprogress() != 0) {
    _this->_internal_set_poseprogress(from._internal_poseprogress());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SmartCalibrationResponse::CopyFrom(const SmartCalibrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.SmartCalibrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartCalibrationResponse::IsInitialized() const {
  return true;
}

void SmartCalibrationResponse::InternalSwap(SmartCalibrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_poses()->InternalSwap(other->_internal_mutable_poses());

  swap(_impl_.poseprogress_, other->_impl_.poseprogress_);
}

std::string SmartCalibrationResponse::GetTypeName() const {
  return "handEngine.v1.SmartCalibrationResponse";
}

// ===================================================================

class HapticsInputRequest::_Internal {
 public:
};

HapticsInputRequest::HapticsInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.HapticsInputRequest)
}
HapticsInputRequest::HapticsInputRequest(const HapticsInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.HapticsInputRequest)
}

inline void HapticsInputRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.performerid_) { 0 }

    , decltype(_impl_.handedness_) { 0 }

    , decltype(_impl_.pattern_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HapticsInputRequest::~HapticsInputRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.HapticsInputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HapticsInputRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HapticsInputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HapticsInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.HapticsInputRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.performerid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pattern_) -
      reinterpret_cast<char*>(&_impl_.performerid_)) + sizeof(_impl_.pattern_));
  _internal_metadata_.Clear<std::string>();
}

const char* HapticsInputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 performerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.performerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.Handedness handedness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_handedness(static_cast<::handEngine::v1::Handedness>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.HapticPattern pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_pattern(static_cast<::handEngine::v1::HapticPattern>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HapticsInputRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.HapticsInputRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_performerid(), target);
  }

  // .handEngine.v1.Handedness handedness = 2;
  if (this->_internal_handedness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_handedness(), target);
  }

  // .handEngine.v1.HapticPattern pattern = 3;
  if (this->_internal_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.HapticsInputRequest)
  return target;
}

::size_t HapticsInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.HapticsInputRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 performerId = 1;
  if (this->_internal_performerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_performerid());
  }

  // .handEngine.v1.Handedness handedness = 2;
  if (this->_internal_handedness() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_handedness());
  }

  // .handEngine.v1.HapticPattern pattern = 3;
  if (this->_internal_pattern() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HapticsInputRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HapticsInputRequest*>(
      &from));
}

void HapticsInputRequest::MergeFrom(const HapticsInputRequest& from) {
  HapticsInputRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.HapticsInputRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_performerid() != 0) {
    _this->_internal_set_performerid(from._internal_performerid());
  }
  if (from._internal_handedness() != 0) {
    _this->_internal_set_handedness(from._internal_handedness());
  }
  if (from._internal_pattern() != 0) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HapticsInputRequest::CopyFrom(const HapticsInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.HapticsInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HapticsInputRequest::IsInitialized() const {
  return true;
}

void HapticsInputRequest::InternalSwap(HapticsInputRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HapticsInputRequest, _impl_.pattern_)
      + sizeof(HapticsInputRequest::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(HapticsInputRequest, _impl_.performerid_)>(
          reinterpret_cast<char*>(&_impl_.performerid_),
          reinterpret_cast<char*>(&other->_impl_.performerid_));
}

std::string HapticsInputRequest::GetTypeName() const {
  return "handEngine.v1.HapticsInputRequest";
}

// ===================================================================

class HapticsStatusResponse::_Internal {
 public:
};

HapticsStatusResponse::HapticsStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.HapticsStatusResponse)
}
HapticsStatusResponse::HapticsStatusResponse(const HapticsStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HapticsStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.HapticsStatusResponse)
}

inline void HapticsStatusResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HapticsStatusResponse::~HapticsStatusResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.HapticsStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HapticsStatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HapticsStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HapticsStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.HapticsStatusResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* HapticsStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.HapticsStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::handEngine::v1::HapticsStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HapticsStatusResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.HapticsStatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.HapticsStatusResponse.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .handEngine.v1.HapticsStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.HapticsStatusResponse)
  return target;
}

::size_t HapticsStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.HapticsStatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .handEngine.v1.HapticsStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HapticsStatusResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HapticsStatusResponse*>(
      &from));
}

void HapticsStatusResponse::MergeFrom(const HapticsStatusResponse& from) {
  HapticsStatusResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.HapticsStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HapticsStatusResponse::CopyFrom(const HapticsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.HapticsStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HapticsStatusResponse::IsInitialized() const {
  return true;
}

void HapticsStatusResponse::InternalSwap(HapticsStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

std::string HapticsStatusResponse::GetTypeName() const {
  return "handEngine.v1.HapticsStatusResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handEngine::v1::CaptureSmartPoseRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::CaptureSmartPoseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::CaptureSmartPoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::AddPerformerRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::AddPerformerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::AddPerformerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::AddPerformerResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::AddPerformerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::AddPerformerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::StagePerformerRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::StagePerformerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::StagePerformerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::RemovePerformerRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::RemovePerformerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::RemovePerformerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::AssignGloveToPerformerRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::AssignGloveToPerformerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::AssignGloveToPerformerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::ExpressCaptureRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::ExpressCaptureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::ExpressCaptureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::PerformerNameListResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::PerformerNameListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::PerformerNameListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::PerformerData*
Arena::CreateMaybeMessage< ::handEngine::v1::PerformerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::PerformerData >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::DeviceData*
Arena::CreateMaybeMessage< ::handEngine::v1::DeviceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::DeviceData >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::DeviceDataResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::DeviceDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::DeviceDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::SmartPoseCapture*
Arena::CreateMaybeMessage< ::handEngine::v1::SmartPoseCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::SmartPoseCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::SmartCalibrationResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::SmartCalibrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::SmartCalibrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::HapticsInputRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::HapticsInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::HapticsInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::HapticsStatusResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::HapticsStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::HapticsStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
