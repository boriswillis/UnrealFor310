// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/stage.proto
#include "EnableGrpcIncludes.h"
#include "v1/stage.pb.h"
#include "v1/stage.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "DisableGrpcIncludes.h"
namespace handEngine {
namespace v1 {

static const char* StageService_method_names[] = {
  "/handEngine.v1.StageService/GetStageStateStream",
  "/handEngine.v1.StageService/SetRecordingState",
  "/handEngine.v1.StageService/SetRecordingDirectory",
  "/handEngine.v1.StageService/SetTimecodeSource",
};

std::unique_ptr< StageService::Stub> StageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StageService::Stub> stub(new StageService::Stub(channel, options));
  return stub;
}

StageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStageStateStream_(StageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetRecordingState_(StageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRecordingDirectory_(StageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTimecodeSource_(StageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::handEngine::v1::StageStateResponse>* StageService::Stub::GetStageStateStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::StageStateResponse>::Create(channel_.get(), rpcmethod_GetStageStateStream_, context, request);
}

void StageService::Stub::async::GetStageStateStream(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::StageStateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::StageStateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStageStateStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::StageStateResponse>* StageService::Stub::AsyncGetStageStateStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::StageStateResponse>::Create(channel_.get(), cq, rpcmethod_GetStageStateStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::StageStateResponse>* StageService::Stub::PrepareAsyncGetStageStateStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::StageStateResponse>::Create(channel_.get(), cq, rpcmethod_GetStageStateStream_, context, request, false, nullptr);
}

::grpc::Status StageService::Stub::SetRecordingState(::grpc::ClientContext* context, const ::handEngine::v1::RecordingStateRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::RecordingStateRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRecordingState_, context, request, response);
}

void StageService::Stub::async::SetRecordingState(::grpc::ClientContext* context, const ::handEngine::v1::RecordingStateRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::RecordingStateRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRecordingState_, context, request, response, std::move(f));
}

void StageService::Stub::async::SetRecordingState(::grpc::ClientContext* context, const ::handEngine::v1::RecordingStateRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRecordingState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::PrepareAsyncSetRecordingStateRaw(::grpc::ClientContext* context, const ::handEngine::v1::RecordingStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::RecordingStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRecordingState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::AsyncSetRecordingStateRaw(::grpc::ClientContext* context, const ::handEngine::v1::RecordingStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRecordingStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StageService::Stub::SetRecordingDirectory(::grpc::ClientContext* context, const ::handEngine::v1::RecordingDirectoryRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::RecordingDirectoryRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRecordingDirectory_, context, request, response);
}

void StageService::Stub::async::SetRecordingDirectory(::grpc::ClientContext* context, const ::handEngine::v1::RecordingDirectoryRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::RecordingDirectoryRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRecordingDirectory_, context, request, response, std::move(f));
}

void StageService::Stub::async::SetRecordingDirectory(::grpc::ClientContext* context, const ::handEngine::v1::RecordingDirectoryRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRecordingDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::PrepareAsyncSetRecordingDirectoryRaw(::grpc::ClientContext* context, const ::handEngine::v1::RecordingDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::RecordingDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRecordingDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::AsyncSetRecordingDirectoryRaw(::grpc::ClientContext* context, const ::handEngine::v1::RecordingDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRecordingDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StageService::Stub::SetTimecodeSource(::grpc::ClientContext* context, const ::handEngine::v1::TimeCodeRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::TimeCodeRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTimecodeSource_, context, request, response);
}

void StageService::Stub::async::SetTimecodeSource(::grpc::ClientContext* context, const ::handEngine::v1::TimeCodeRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::TimeCodeRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimecodeSource_, context, request, response, std::move(f));
}

void StageService::Stub::async::SetTimecodeSource(::grpc::ClientContext* context, const ::handEngine::v1::TimeCodeRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTimecodeSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::PrepareAsyncSetTimecodeSourceRaw(::grpc::ClientContext* context, const ::handEngine::v1::TimeCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::TimeCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTimecodeSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* StageService::Stub::AsyncSetTimecodeSourceRaw(::grpc::ClientContext* context, const ::handEngine::v1::TimeCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTimecodeSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

StageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StageService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StageService::Service, ::handEngine::v1::BlankRequest, ::handEngine::v1::StageStateResponse>(
          [](StageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::BlankRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::StageStateResponse>* writer) {
               return service->GetStageStateStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StageService::Service, ::handEngine::v1::RecordingStateRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::RecordingStateRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetRecordingState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StageService::Service, ::handEngine::v1::RecordingDirectoryRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::RecordingDirectoryRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetRecordingDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StageService::Service, ::handEngine::v1::TimeCodeRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::TimeCodeRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetTimecodeSource(ctx, req, resp);
             }, this)));
}

StageService::Service::~Service() {
}

::grpc::Status StageService::Service::GetStageStateStream(::grpc::ServerContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ServerWriter< ::handEngine::v1::StageStateResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StageService::Service::SetRecordingState(::grpc::ServerContext* context, const ::handEngine::v1::RecordingStateRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StageService::Service::SetRecordingDirectory(::grpc::ServerContext* context, const ::handEngine::v1::RecordingDirectoryRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StageService::Service::SetTimecodeSource(::grpc::ServerContext* context, const ::handEngine::v1::TimeCodeRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handEngine
}  // namespace v1

