// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/update-firmware.proto
#include "EnableGrpcIncludes.h"
#include "v1/update-firmware.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
#include "DisableGrpcIncludes.h"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace handEngine {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GlobalFirmwarePathRequest::GlobalFirmwarePathRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalFirmwarePathRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalFirmwarePathRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalFirmwarePathRequestDefaultTypeInternal() {}
  union {
    GlobalFirmwarePathRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalFirmwarePathRequestDefaultTypeInternal _GlobalFirmwarePathRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SourceId::SourceId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sourceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceIdDefaultTypeInternal() {}
  union {
    SourceId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceIdDefaultTypeInternal _SourceId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GlobalFirmwarePathResponse::GlobalFirmwarePathResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.result_)*/ 0
} {}
struct GlobalFirmwarePathResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalFirmwarePathResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalFirmwarePathResponseDefaultTypeInternal() {}
  union {
    GlobalFirmwarePathResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalFirmwarePathResponseDefaultTypeInternal _GlobalFirmwarePathResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Source::Source(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gloveids_)*/{}
  , /*decltype(_impl_.sourceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceDefaultTypeInternal() {}
  union {
    Source _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceDefaultTypeInternal _Source_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateState::UpdateState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.jobactions_)*/ {}
  , /*decltype(_impl_._jobactions_cached_byte_size_)*/ { 0 }

  , /*decltype(_impl_.firmwarepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.progress_)*/ 0
} {}
struct UpdateStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateStateDefaultTypeInternal() {}
  union {
    UpdateState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateStateDefaultTypeInternal _UpdateState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateResponse::UpdateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr} {}
struct UpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateResponseDefaultTypeInternal() {}
  union {
    UpdateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
namespace handEngine {
namespace v1 {
bool ParsedPathResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    ParsedPathResult_strings[2] = {};

static const char ParsedPathResult_names[] = {
    "PARSE_FAILURE"
    "PARSE_SUCCESS"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ParsedPathResult_entries[] =
    {
        {{&ParsedPathResult_names[0], 13}, 1},
        {{&ParsedPathResult_names[13], 13}, 0},
};

static const int ParsedPathResult_entries_by_number[] = {
    1,  // 0 -> PARSE_SUCCESS
    0,  // 1 -> PARSE_FAILURE
};

const std::string& ParsedPathResult_Name(ParsedPathResult value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ParsedPathResult_entries, ParsedPathResult_entries_by_number,
          2, ParsedPathResult_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ParsedPathResult_entries, ParsedPathResult_entries_by_number, 2,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : ParsedPathResult_strings[idx].get();
}

bool ParsedPathResult_Parse(absl::string_view name, ParsedPathResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ParsedPathResult_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ParsedPathResult>(int_value);
  }
  return success;
}
bool UpdateAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    UpdateAction_strings[2] = {};

static const char UpdateAction_names[] = {
    "UPDATE_ACTION_DONGLE"
    "UPDATE_ACTION_GLOVE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UpdateAction_entries[] =
    {
        {{&UpdateAction_names[0], 20}, 0},
        {{&UpdateAction_names[20], 19}, 1},
};

static const int UpdateAction_entries_by_number[] = {
    0,  // 0 -> UPDATE_ACTION_DONGLE
    1,  // 1 -> UPDATE_ACTION_GLOVE
};

const std::string& UpdateAction_Name(UpdateAction value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UpdateAction_entries, UpdateAction_entries_by_number,
          2, UpdateAction_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UpdateAction_entries, UpdateAction_entries_by_number, 2,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : UpdateAction_strings[idx].get();
}

bool UpdateAction_Parse(absl::string_view name, UpdateAction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UpdateAction_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<UpdateAction>(int_value);
  }
  return success;
}
bool UpdateStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    UpdateStatus_strings[5] = {};

static const char UpdateStatus_names[] = {
    "UPDATE_STATUS_ERROR"
    "UPDATE_STATUS_SUCCESS"
    "UPDATE_STATUS_UNKNOWN"
    "UPDATE_STATUS_UPDATING"
    "UPDATE_STATUS_WAITING"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UpdateStatus_entries[] =
    {
        {{&UpdateStatus_names[0], 19}, 4},
        {{&UpdateStatus_names[19], 21}, 3},
        {{&UpdateStatus_names[40], 21}, 0},
        {{&UpdateStatus_names[61], 22}, 2},
        {{&UpdateStatus_names[83], 21}, 1},
};

static const int UpdateStatus_entries_by_number[] = {
    2,  // 0 -> UPDATE_STATUS_UNKNOWN
    4,  // 1 -> UPDATE_STATUS_WAITING
    3,  // 2 -> UPDATE_STATUS_UPDATING
    1,  // 3 -> UPDATE_STATUS_SUCCESS
    0,  // 4 -> UPDATE_STATUS_ERROR
};

const std::string& UpdateStatus_Name(UpdateStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UpdateStatus_entries, UpdateStatus_entries_by_number,
          5, UpdateStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UpdateStatus_entries, UpdateStatus_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : UpdateStatus_strings[idx].get();
}

bool UpdateStatus_Parse(absl::string_view name, UpdateStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UpdateStatus_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<UpdateStatus>(int_value);
  }
  return success;
}
// ===================================================================

class GlobalFirmwarePathRequest::_Internal {
 public:
};

GlobalFirmwarePathRequest::GlobalFirmwarePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.GlobalFirmwarePathRequest)
}
GlobalFirmwarePathRequest::GlobalFirmwarePathRequest(const GlobalFirmwarePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GlobalFirmwarePathRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.GlobalFirmwarePathRequest)
}

inline void GlobalFirmwarePathRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GlobalFirmwarePathRequest::~GlobalFirmwarePathRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.GlobalFirmwarePathRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalFirmwarePathRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void GlobalFirmwarePathRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalFirmwarePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.GlobalFirmwarePathRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GlobalFirmwarePathRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GlobalFirmwarePathRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.GlobalFirmwarePathRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GlobalFirmwarePathRequest.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.GlobalFirmwarePathRequest)
  return target;
}

::size_t GlobalFirmwarePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.GlobalFirmwarePathRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalFirmwarePathRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GlobalFirmwarePathRequest*>(
      &from));
}

void GlobalFirmwarePathRequest::MergeFrom(const GlobalFirmwarePathRequest& from) {
  GlobalFirmwarePathRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.GlobalFirmwarePathRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GlobalFirmwarePathRequest::CopyFrom(const GlobalFirmwarePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.GlobalFirmwarePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalFirmwarePathRequest::IsInitialized() const {
  return true;
}

void GlobalFirmwarePathRequest::InternalSwap(GlobalFirmwarePathRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
}

std::string GlobalFirmwarePathRequest::GetTypeName() const {
  return "handEngine.v1.GlobalFirmwarePathRequest";
}

// ===================================================================

class SourceId::_Internal {
 public:
};

SourceId::SourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.SourceId)
}
SourceId::SourceId(const SourceId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SourceId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceid().empty()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.SourceId)
}

inline void SourceId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SourceId::~SourceId() {
  // @@protoc_insertion_point(destructor:handEngine.v1.SourceId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourceid_.Destroy();
}

void SourceId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.SourceId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourceid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* SourceId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SourceId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.SourceId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    const std::string& _s = this->_internal_sourceid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.SourceId.sourceId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.SourceId)
  return target;
}

::size_t SourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.SourceId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sourceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SourceId*>(
      &from));
}

void SourceId::MergeFrom(const SourceId& from) {
  SourceId* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.SourceId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourceid().empty()) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SourceId::CopyFrom(const SourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.SourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceId::IsInitialized() const {
  return true;
}

void SourceId::InternalSwap(SourceId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sourceid_, lhs_arena,
                                       &other->_impl_.sourceid_, rhs_arena);
}

std::string SourceId::GetTypeName() const {
  return "handEngine.v1.SourceId";
}

// ===================================================================

class GlobalFirmwarePathResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalFirmwarePathResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GlobalFirmwarePathResponse, _impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GlobalFirmwarePathResponse::GlobalFirmwarePathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.GlobalFirmwarePathResponse)
}
GlobalFirmwarePathResponse::GlobalFirmwarePathResponse(const GlobalFirmwarePathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GlobalFirmwarePathResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filepath_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.result_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.GlobalFirmwarePathResponse)
}

inline void GlobalFirmwarePathResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filepath_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.result_) { 0 }

  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GlobalFirmwarePathResponse::~GlobalFirmwarePathResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.GlobalFirmwarePathResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalFirmwarePathResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  _impl_.message_.Destroy();
}

void GlobalFirmwarePathResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalFirmwarePathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.GlobalFirmwarePathResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GlobalFirmwarePathResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.ParsedPathResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::handEngine::v1::ParsedPathResult>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GlobalFirmwarePathResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.GlobalFirmwarePathResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .handEngine.v1.ParsedPathResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string filePath = 2;
  if (!this->_internal_filepath().empty()) {
    const std::string& _s = this->_internal_filepath();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GlobalFirmwarePathResponse.filePath");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GlobalFirmwarePathResponse.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.GlobalFirmwarePathResponse)
  return target;
}

::size_t GlobalFirmwarePathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.GlobalFirmwarePathResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 2;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filepath());
  }

  // optional string message = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .handEngine.v1.ParsedPathResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalFirmwarePathResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GlobalFirmwarePathResponse*>(
      &from));
}

void GlobalFirmwarePathResponse::MergeFrom(const GlobalFirmwarePathResponse& from) {
  GlobalFirmwarePathResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.GlobalFirmwarePathResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GlobalFirmwarePathResponse::CopyFrom(const GlobalFirmwarePathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.GlobalFirmwarePathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalFirmwarePathResponse::IsInitialized() const {
  return true;
}

void GlobalFirmwarePathResponse::InternalSwap(GlobalFirmwarePathResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, lhs_arena,
                                       &other->_impl_.filepath_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.result_, other->_impl_.result_);
}

std::string GlobalFirmwarePathResponse::GetTypeName() const {
  return "handEngine.v1.GlobalFirmwarePathResponse";
}

// ===================================================================

class Source::_Internal {
 public:
};

Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Source* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveids_){from._impl_.gloveids_}
    , decltype(_impl_.sourceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceid().empty()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.Source)
}

inline void Source::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveids_){arena}
    , decltype(_impl_.sourceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:handEngine.v1.Source)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Source::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_gloveids()->~RepeatedPtrField();
  _impl_.sourceid_.Destroy();
}

void Source::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.Source)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_gloveids()->Clear();
  _impl_.sourceid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Source::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string gloveIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_gloveids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Source::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.Source)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    const std::string& _s = this->_internal_sourceid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.Source.sourceId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string gloveIds = 2;
  for (int i = 0, n = this->_internal_gloveids_size(); i < n; ++i) {
    const auto& s = this->_internal_gloveids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.Source.gloveIds");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.Source)
  return target;
}

::size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.Source)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string gloveIds = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_gloveids().size());
  for (int i = 0, n = _internal_gloveids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_gloveids().Get(i));
  }

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sourceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Source*>(
      &from));
}

void Source::MergeFrom(const Source& from) {
  Source* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.Source)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gloveids()->MergeFrom(from._internal_gloveids());
  if (!from._internal_sourceid().empty()) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_gloveids()->InternalSwap(
      other->_internal_mutable_gloveids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sourceid_, lhs_arena,
                                       &other->_impl_.sourceid_, rhs_arena);
}

std::string Source::GetTypeName() const {
  return "handEngine.v1.Source";
}

// ===================================================================

class UpdateState::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateState, _impl_._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateState::UpdateState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.UpdateState)
}
UpdateState::UpdateState(const UpdateState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UpdateState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jobactions_) { from._internal_jobactions() }
    , /*decltype(_impl_._jobactions_cached_byte_size_)*/ { 0 }

    , decltype(_impl_.firmwarepath_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.progress_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.firmwarepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firmwarepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firmwarepath().empty()) {
    _this->_impl_.firmwarepath_.Set(from._internal_firmwarepath(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.UpdateState)
}

inline void UpdateState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.jobactions_) { arena }
    , /*decltype(_impl_._jobactions_cached_byte_size_)*/ { 0 }

    , decltype(_impl_.firmwarepath_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.progress_) { 0 }

  };
  _impl_.firmwarepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firmwarepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateState::~UpdateState() {
  // @@protoc_insertion_point(destructor:handEngine.v1.UpdateState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_jobactions()->~RepeatedField();
  _impl_.firmwarepath_.Destroy();
  _impl_.message_.Destroy();
}

void UpdateState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateState::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.UpdateState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jobactions()->Clear();
  _impl_.firmwarepath_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_.progress_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string firmwarePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_firmwarepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .handEngine.v1.UpdateAction jobActions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_jobactions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_add_jobactions(static_cast<::handEngine::v1::UpdateAction>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.UpdateStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::handEngine::v1::UpdateStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.UpdateState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwarePath = 1;
  if (!this->_internal_firmwarepath().empty()) {
    const std::string& _s = this->_internal_firmwarepath();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.UpdateState.firmwarePath");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .handEngine.v1.UpdateAction jobActions = 2;
  {
    int byte_size = _impl_._jobactions_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_jobactions(),
                                       byte_size, target);
    }
  }

  // .handEngine.v1.UpdateStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 progress = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_progress(), target);
  }

  // optional string message = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.UpdateState.message");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.UpdateState)
  return target;
}

::size_t UpdateState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.UpdateState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handEngine.v1.UpdateAction jobActions = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_jobactions_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_jobactions(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._jobactions_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }

  // string firmwarePath = 1;
  if (!this->_internal_firmwarepath().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_firmwarepath());
  }

  // optional string message = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .handEngine.v1.UpdateStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // optional int32 progress = 4;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UpdateState*>(
      &from));
}

void UpdateState::MergeFrom(const UpdateState& from) {
  UpdateState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.UpdateState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jobactions()->MergeFrom(from._internal_jobactions());
  if (!from._internal_firmwarepath().empty()) {
    _this->_internal_set_firmwarepath(from._internal_firmwarepath());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UpdateState::CopyFrom(const UpdateState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.UpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateState::IsInitialized() const {
  return true;
}

void UpdateState::InternalSwap(UpdateState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_jobactions()->InternalSwap(
      other->_internal_mutable_jobactions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firmwarepath_, lhs_arena,
                                       &other->_impl_.firmwarepath_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateState, _impl_.progress_)
      + sizeof(UpdateState::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(UpdateState, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

std::string UpdateState::GetTypeName() const {
  return "handEngine.v1.UpdateState";
}

// ===================================================================

class UpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateResponse, _impl_._has_bits_);
  static const ::handEngine::v1::Source& source(const UpdateResponse* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::handEngine::v1::UpdateState& state(const UpdateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::handEngine::v1::Source&
UpdateResponse::_Internal::source(const UpdateResponse* msg) {
  return *msg->_impl_.source_;
}
const ::handEngine::v1::UpdateState&
UpdateResponse::_Internal::state(const UpdateResponse* msg) {
  return *msg->_impl_.state_;
}
UpdateResponse::UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UpdateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.source_ = new ::handEngine::v1::Source(*from._impl_.source_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.state_ = new ::handEngine::v1::UpdateState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.UpdateResponse)
}

inline void UpdateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.state_){nullptr}
  };
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.UpdateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void UpdateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.UpdateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.source_ != nullptr);
      _impl_.source_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.UpdateState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.UpdateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .handEngine.v1.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // .handEngine.v1.UpdateState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.UpdateResponse)
  return target;
}

::size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.UpdateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .handEngine.v1.Source source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_);
    }

    // .handEngine.v1.UpdateState state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UpdateResponse*>(
      &from));
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
  UpdateResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.UpdateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_source()->::handEngine::v1::Source::MergeFrom(
          from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::handEngine::v1::UpdateState::MergeFrom(
          from._internal_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateResponse, _impl_.state_)
      + sizeof(UpdateResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(UpdateResponse, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

std::string UpdateResponse::GetTypeName() const {
  return "handEngine.v1.UpdateResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handEngine::v1::GlobalFirmwarePathRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::GlobalFirmwarePathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::GlobalFirmwarePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::SourceId*
Arena::CreateMaybeMessage< ::handEngine::v1::SourceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::SourceId >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::GlobalFirmwarePathResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::GlobalFirmwarePathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::GlobalFirmwarePathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::Source*
Arena::CreateMaybeMessage< ::handEngine::v1::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::UpdateState*
Arena::CreateMaybeMessage< ::handEngine::v1::UpdateState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::UpdateState >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::UpdateResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::UpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::UpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
