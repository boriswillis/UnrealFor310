
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/license.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2flicense_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2flicense_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2flicense_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2flicense_2eproto {
  static const ::uint32_t offsets[];
};
namespace handEngine {
namespace v1 {
class ActivateDeviceRequest;
struct ActivateDeviceRequestDefaultTypeInternal;
extern ActivateDeviceRequestDefaultTypeInternal _ActivateDeviceRequest_default_instance_;
class ActivateDeviceResponse;
struct ActivateDeviceResponseDefaultTypeInternal;
extern ActivateDeviceResponseDefaultTypeInternal _ActivateDeviceResponse_default_instance_;
class LicenseKeyRequest;
struct LicenseKeyRequestDefaultTypeInternal;
extern LicenseKeyRequestDefaultTypeInternal _LicenseKeyRequest_default_instance_;
class LicenseKeyResponse;
struct LicenseKeyResponseDefaultTypeInternal;
extern LicenseKeyResponseDefaultTypeInternal _LicenseKeyResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template <>
::handEngine::v1::ActivateDeviceRequest* Arena::CreateMaybeMessage<::handEngine::v1::ActivateDeviceRequest>(Arena*);
template <>
::handEngine::v1::ActivateDeviceResponse* Arena::CreateMaybeMessage<::handEngine::v1::ActivateDeviceResponse>(Arena*);
template <>
::handEngine::v1::LicenseKeyRequest* Arena::CreateMaybeMessage<::handEngine::v1::LicenseKeyRequest>(Arena*);
template <>
::handEngine::v1::LicenseKeyResponse* Arena::CreateMaybeMessage<::handEngine::v1::LicenseKeyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace handEngine {
namespace v1 {
enum ActivateDeviceResult : int {
  ACTIVATION_SUCCESS = 0,
  INVALID_TOKEN = 1,
  CONNECTION_INTERRUPTED = 2,
  ActivateDeviceResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ActivateDeviceResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ActivateDeviceResult_IsValid(int value);
constexpr ActivateDeviceResult ActivateDeviceResult_MIN = static_cast<ActivateDeviceResult>(0);
constexpr ActivateDeviceResult ActivateDeviceResult_MAX = static_cast<ActivateDeviceResult>(2);
constexpr int ActivateDeviceResult_ARRAYSIZE = 2 + 1;
const std::string& ActivateDeviceResult_Name(ActivateDeviceResult value);
template <typename T>
const std::string& ActivateDeviceResult_Name(T value) {
  static_assert(std::is_same<T, ActivateDeviceResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ActivateDeviceResult_Name().");
  return ActivateDeviceResult_Name(static_cast<ActivateDeviceResult>(value));
}
const std::string& ActivateDeviceResult_Name(ActivateDeviceResult value);
bool ActivateDeviceResult_Parse(absl::string_view name, ActivateDeviceResult* value);

// ===================================================================


// -------------------------------------------------------------------

class LicenseKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.LicenseKeyRequest) */ {
 public:
  inline LicenseKeyRequest() : LicenseKeyRequest(nullptr) {}
  ~LicenseKeyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LicenseKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LicenseKeyRequest(const LicenseKeyRequest& from);
  LicenseKeyRequest(LicenseKeyRequest&& from) noexcept
    : LicenseKeyRequest() {
    *this = ::std::move(from);
  }

  inline LicenseKeyRequest& operator=(const LicenseKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LicenseKeyRequest& operator=(LicenseKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LicenseKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LicenseKeyRequest* internal_default_instance() {
    return reinterpret_cast<const LicenseKeyRequest*>(
               &_LicenseKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LicenseKeyRequest& a, LicenseKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LicenseKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LicenseKeyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LicenseKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LicenseKeyRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LicenseKeyRequest& from);
  void MergeFrom(const LicenseKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LicenseKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.LicenseKeyRequest";
  }
  protected:
  explicit LicenseKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGloveIdFieldNumber = 1,
  };
  // string gloveId = 1;
  void clear_gloveid() ;
  const std::string& gloveid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gloveid(Arg_&& arg, Args_... args);
  std::string* mutable_gloveid();
  PROTOBUF_NODISCARD std::string* release_gloveid();
  void set_allocated_gloveid(std::string* ptr);

  private:
  const std::string& _internal_gloveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gloveid(
      const std::string& value);
  std::string* _internal_mutable_gloveid();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.LicenseKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gloveid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2flicense_2eproto;
};// -------------------------------------------------------------------

class LicenseKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.LicenseKeyResponse) */ {
 public:
  inline LicenseKeyResponse() : LicenseKeyResponse(nullptr) {}
  ~LicenseKeyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LicenseKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LicenseKeyResponse(const LicenseKeyResponse& from);
  LicenseKeyResponse(LicenseKeyResponse&& from) noexcept
    : LicenseKeyResponse() {
    *this = ::std::move(from);
  }

  inline LicenseKeyResponse& operator=(const LicenseKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LicenseKeyResponse& operator=(LicenseKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LicenseKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LicenseKeyResponse* internal_default_instance() {
    return reinterpret_cast<const LicenseKeyResponse*>(
               &_LicenseKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LicenseKeyResponse& a, LicenseKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LicenseKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LicenseKeyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LicenseKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LicenseKeyResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LicenseKeyResponse& from);
  void MergeFrom(const LicenseKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LicenseKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.LicenseKeyResponse";
  }
  protected:
  explicit LicenseKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.LicenseKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2flicense_2eproto;
};// -------------------------------------------------------------------

class ActivateDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.ActivateDeviceRequest) */ {
 public:
  inline ActivateDeviceRequest() : ActivateDeviceRequest(nullptr) {}
  ~ActivateDeviceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateDeviceRequest(const ActivateDeviceRequest& from);
  ActivateDeviceRequest(ActivateDeviceRequest&& from) noexcept
    : ActivateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ActivateDeviceRequest& operator=(const ActivateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateDeviceRequest& operator=(ActivateDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ActivateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateDeviceRequest*>(
               &_ActivateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActivateDeviceRequest& a, ActivateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateDeviceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateDeviceRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ActivateDeviceRequest& from);
  void MergeFrom(const ActivateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivateDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.ActivateDeviceRequest";
  }
  protected:
  explicit ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGloveIdFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string gloveId = 1;
  void clear_gloveid() ;
  const std::string& gloveid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gloveid(Arg_&& arg, Args_... args);
  std::string* mutable_gloveid();
  PROTOBUF_NODISCARD std::string* release_gloveid();
  void set_allocated_gloveid(std::string* ptr);

  private:
  const std::string& _internal_gloveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gloveid(
      const std::string& value);
  std::string* _internal_mutable_gloveid();

  public:
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.ActivateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gloveid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2flicense_2eproto;
};// -------------------------------------------------------------------

class ActivateDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.ActivateDeviceResponse) */ {
 public:
  inline ActivateDeviceResponse() : ActivateDeviceResponse(nullptr) {}
  ~ActivateDeviceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActivateDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateDeviceResponse(const ActivateDeviceResponse& from);
  ActivateDeviceResponse(ActivateDeviceResponse&& from) noexcept
    : ActivateDeviceResponse() {
    *this = ::std::move(from);
  }

  inline ActivateDeviceResponse& operator=(const ActivateDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateDeviceResponse& operator=(ActivateDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ActivateDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const ActivateDeviceResponse*>(
               &_ActivateDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActivateDeviceResponse& a, ActivateDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateDeviceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateDeviceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateDeviceResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ActivateDeviceResponse& from);
  void MergeFrom(const ActivateDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivateDeviceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.ActivateDeviceResponse";
  }
  protected:
  explicit ActivateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .handEngine.v1.ActivateDeviceResult response = 1;
  void clear_response() ;
  ::handEngine::v1::ActivateDeviceResult response() const;
  void set_response(::handEngine::v1::ActivateDeviceResult value);

  private:
  ::handEngine::v1::ActivateDeviceResult _internal_response() const;
  void _internal_set_response(::handEngine::v1::ActivateDeviceResult value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.ActivateDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2flicense_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LicenseKeyRequest

// string gloveId = 1;
inline void LicenseKeyRequest::clear_gloveid() {
  _impl_.gloveid_.ClearToEmpty();
}
inline const std::string& LicenseKeyRequest::gloveid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.LicenseKeyRequest.gloveId)
  return _internal_gloveid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LicenseKeyRequest::set_gloveid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gloveid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.LicenseKeyRequest.gloveId)
}
inline std::string* LicenseKeyRequest::mutable_gloveid() {
  std::string* _s = _internal_mutable_gloveid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.LicenseKeyRequest.gloveId)
  return _s;
}
inline const std::string& LicenseKeyRequest::_internal_gloveid() const {
  return _impl_.gloveid_.Get();
}
inline void LicenseKeyRequest::_internal_set_gloveid(const std::string& value) {
  ;


  _impl_.gloveid_.Set(value, GetArenaForAllocation());
}
inline std::string* LicenseKeyRequest::_internal_mutable_gloveid() {
  ;
  return _impl_.gloveid_.Mutable( GetArenaForAllocation());
}
inline std::string* LicenseKeyRequest::release_gloveid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.LicenseKeyRequest.gloveId)
  return _impl_.gloveid_.Release();
}
inline void LicenseKeyRequest::set_allocated_gloveid(std::string* value) {
  _impl_.gloveid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gloveid_.IsDefault()) {
          _impl_.gloveid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.LicenseKeyRequest.gloveId)
}

// -------------------------------------------------------------------

// LicenseKeyResponse

// string key = 1;
inline void LicenseKeyResponse::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LicenseKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.LicenseKeyResponse.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LicenseKeyResponse::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.LicenseKeyResponse.key)
}
inline std::string* LicenseKeyResponse::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.LicenseKeyResponse.key)
  return _s;
}
inline const std::string& LicenseKeyResponse::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LicenseKeyResponse::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LicenseKeyResponse::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* LicenseKeyResponse::release_key() {
  // @@protoc_insertion_point(field_release:handEngine.v1.LicenseKeyResponse.key)
  return _impl_.key_.Release();
}
inline void LicenseKeyResponse::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.LicenseKeyResponse.key)
}

// -------------------------------------------------------------------

// ActivateDeviceRequest

// string gloveId = 1;
inline void ActivateDeviceRequest::clear_gloveid() {
  _impl_.gloveid_.ClearToEmpty();
}
inline const std::string& ActivateDeviceRequest::gloveid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.ActivateDeviceRequest.gloveId)
  return _internal_gloveid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateDeviceRequest::set_gloveid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gloveid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.ActivateDeviceRequest.gloveId)
}
inline std::string* ActivateDeviceRequest::mutable_gloveid() {
  std::string* _s = _internal_mutable_gloveid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.ActivateDeviceRequest.gloveId)
  return _s;
}
inline const std::string& ActivateDeviceRequest::_internal_gloveid() const {
  return _impl_.gloveid_.Get();
}
inline void ActivateDeviceRequest::_internal_set_gloveid(const std::string& value) {
  ;


  _impl_.gloveid_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivateDeviceRequest::_internal_mutable_gloveid() {
  ;
  return _impl_.gloveid_.Mutable( GetArenaForAllocation());
}
inline std::string* ActivateDeviceRequest::release_gloveid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.ActivateDeviceRequest.gloveId)
  return _impl_.gloveid_.Release();
}
inline void ActivateDeviceRequest::set_allocated_gloveid(std::string* value) {
  _impl_.gloveid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gloveid_.IsDefault()) {
          _impl_.gloveid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.ActivateDeviceRequest.gloveId)
}

// string token = 2;
inline void ActivateDeviceRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ActivateDeviceRequest::token() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.ActivateDeviceRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateDeviceRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.ActivateDeviceRequest.token)
}
inline std::string* ActivateDeviceRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.ActivateDeviceRequest.token)
  return _s;
}
inline const std::string& ActivateDeviceRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ActivateDeviceRequest::_internal_set_token(const std::string& value) {
  ;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivateDeviceRequest::_internal_mutable_token() {
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* ActivateDeviceRequest::release_token() {
  // @@protoc_insertion_point(field_release:handEngine.v1.ActivateDeviceRequest.token)
  return _impl_.token_.Release();
}
inline void ActivateDeviceRequest::set_allocated_token(std::string* value) {
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.ActivateDeviceRequest.token)
}

// -------------------------------------------------------------------

// ActivateDeviceResponse

// .handEngine.v1.ActivateDeviceResult response = 1;
inline void ActivateDeviceResponse::clear_response() {
  _impl_.response_ = 0;
}
inline ::handEngine::v1::ActivateDeviceResult ActivateDeviceResponse::response() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.ActivateDeviceResponse.response)
  return _internal_response();
}
inline void ActivateDeviceResponse::set_response(::handEngine::v1::ActivateDeviceResult value) {
   _internal_set_response(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.ActivateDeviceResponse.response)
}
inline ::handEngine::v1::ActivateDeviceResult ActivateDeviceResponse::_internal_response() const {
  return static_cast<::handEngine::v1::ActivateDeviceResult>(_impl_.response_);
}
inline void ActivateDeviceResponse::_internal_set_response(::handEngine::v1::ActivateDeviceResult value) {
  ;
  _impl_.response_ = value;
}

// string message = 2;
inline void ActivateDeviceResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ActivateDeviceResponse::message() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.ActivateDeviceResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActivateDeviceResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.ActivateDeviceResponse.message)
}
inline std::string* ActivateDeviceResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.ActivateDeviceResponse.message)
  return _s;
}
inline const std::string& ActivateDeviceResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ActivateDeviceResponse::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivateDeviceResponse::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* ActivateDeviceResponse::release_message() {
  // @@protoc_insertion_point(field_release:handEngine.v1.ActivateDeviceResponse.message)
  return _impl_.message_.Release();
}
inline void ActivateDeviceResponse::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.ActivateDeviceResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::handEngine::v1::ActivateDeviceResult> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2flicense_2eproto_2epb_2eh


