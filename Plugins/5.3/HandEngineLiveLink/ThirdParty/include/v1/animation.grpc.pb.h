// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/animation.proto
// Original file comments:
// *
// Animation RPCs
//
// Remote control Hand Engine's animation features.
#ifndef GRPC_v1_2fanimation_2eproto__INCLUDED
#define GRPC_v1_2fanimation_2eproto__INCLUDED

#include "v1/animation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace handEngine {
namespace v1 {

// *
// Service for interacting with hand animation data.
class AnimationService final {
 public:
  static constexpr char const* service_full_name() {
    return "handEngine.v1.AnimationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Provides a stream of hand data for a specified performer and glove
    // hand (`handedness`). Currently only the joint and pose identification data is supported. You must request a stream for each
    // hand in your application - this allows for use-cases where only a single glove is used
    // in the performance, or where two seperate performers are wearing a glove each, in
    // addition to the standard workflow of having a left and right hand glove per performer.
    //
    // ([JointResponse](#jointresponse)) and pose information
    // ([PoseInformationResponse](#poseinformationresponse)) data are currently available.
    //
    // Data is returned as individual frames and is timecoded. You may wish to discard
    // certain frames when reading the stream in order to improve data processing speed
    // within your application if the use-case is for realtime rendering.
    //
    // The rate of response messages matches the exact frequency returned by the glove
    // devices (around 120FPS). This may not always be consistent, depending on your
    // application's use-case and is not recommended for applications that need consistent
    // output with no missing frames. If you are doing live streaming or VR applications,
    // we recommend using `AnimationService.GetAllHandAnimationStream()` instead as this
    // provides a consistant output of timecoded frames.
    //
    // No data will be sent back from this method if Express Calibration hasn't been run
    // for the performer.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::HandAnimationResponse>> GetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::HandAnimationResponse>>(GetHandAnimationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>> AsyncGetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>>(AsyncGetHandAnimationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>> PrepareAsyncGetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>>(PrepareAsyncGetHandAnimationStreamRaw(context, request, cq));
    }
    // *
    // Provides a stream of hand data for all specified performers and glove
    // hands (`handedness`) where the performers are calibrated and have been staged.
    // Data is returned in a `handAnimations` property as an array of `HandAnimationResponse`
    // objects.
    //
    // The rate of response messages is limited to the current timecode source FPS set when
    // calling `StageService.SetTimecodeSource()` (this defaults to using the computer's system
    // clock @ 120FPS by default). For live-streaming or for VR use-cases that require animation
    // data, we recommend using a 60FPS target.
    //
    // Duplicate frames may be sent using this method, so your application should filter duplicate
    // frames according to the timecode if you are using this method as part of a motion capture
    // pipeline and your software does not automatically reconcile duplicated frames.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::StageAnimationResponse>> GetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::StageAnimationResponse>>(GetAllHandAnimationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>> AsyncGetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>>(AsyncGetAllHandAnimationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>> PrepareAsyncGetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>>(PrepareAsyncGetAllHandAnimationStreamRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // *
      // Provides a stream of hand data for a specified performer and glove
      // hand (`handedness`). Currently only the joint and pose identification data is supported. You must request a stream for each
      // hand in your application - this allows for use-cases where only a single glove is used
      // in the performance, or where two seperate performers are wearing a glove each, in
      // addition to the standard workflow of having a left and right hand glove per performer.
      //
      // ([JointResponse](#jointresponse)) and pose information
      // ([PoseInformationResponse](#poseinformationresponse)) data are currently available.
      //
      // Data is returned as individual frames and is timecoded. You may wish to discard
      // certain frames when reading the stream in order to improve data processing speed
      // within your application if the use-case is for realtime rendering.
      //
      // The rate of response messages matches the exact frequency returned by the glove
      // devices (around 120FPS). This may not always be consistent, depending on your
      // application's use-case and is not recommended for applications that need consistent
      // output with no missing frames. If you are doing live streaming or VR applications,
      // we recommend using `AnimationService.GetAllHandAnimationStream()` instead as this
      // provides a consistant output of timecoded frames.
      //
      // No data will be sent back from this method if Express Calibration hasn't been run
      // for the performer.
      virtual void GetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::HandAnimationResponse>* reactor) = 0;
      // *
      // Provides a stream of hand data for all specified performers and glove
      // hands (`handedness`) where the performers are calibrated and have been staged.
      // Data is returned in a `handAnimations` property as an array of `HandAnimationResponse`
      // objects.
      //
      // The rate of response messages is limited to the current timecode source FPS set when
      // calling `StageService.SetTimecodeSource()` (this defaults to using the computer's system
      // clock @ 120FPS by default). For live-streaming or for VR use-cases that require animation
      // data, we recommend using a 60FPS target.
      //
      // Duplicate frames may be sent using this method, so your application should filter duplicate
      // frames according to the timecode if you are using this method as part of a motion capture
      // pipeline and your software does not automatically reconcile duplicated frames.
      virtual void GetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::StageAnimationResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::handEngine::v1::HandAnimationResponse>* GetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>* AsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::HandAnimationResponse>* PrepareAsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::handEngine::v1::StageAnimationResponse>* GetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>* AsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::StageAnimationResponse>* PrepareAsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::HandAnimationResponse>> GetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::HandAnimationResponse>>(GetHandAnimationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>> AsyncGetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>>(AsyncGetHandAnimationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>> PrepareAsyncGetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>>(PrepareAsyncGetHandAnimationStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::StageAnimationResponse>> GetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::StageAnimationResponse>>(GetAllHandAnimationStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>> AsyncGetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>>(AsyncGetAllHandAnimationStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>> PrepareAsyncGetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>>(PrepareAsyncGetAllHandAnimationStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::HandAnimationResponse>* reactor) override;
      void GetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::StageAnimationResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::handEngine::v1::HandAnimationResponse>* GetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>* AsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>* PrepareAsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::handEngine::v1::StageAnimationResponse>* GetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>* AsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>* PrepareAsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetHandAnimationStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllHandAnimationStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Provides a stream of hand data for a specified performer and glove
    // hand (`handedness`). Currently only the joint and pose identification data is supported. You must request a stream for each
    // hand in your application - this allows for use-cases where only a single glove is used
    // in the performance, or where two seperate performers are wearing a glove each, in
    // addition to the standard workflow of having a left and right hand glove per performer.
    //
    // ([JointResponse](#jointresponse)) and pose information
    // ([PoseInformationResponse](#poseinformationresponse)) data are currently available.
    //
    // Data is returned as individual frames and is timecoded. You may wish to discard
    // certain frames when reading the stream in order to improve data processing speed
    // within your application if the use-case is for realtime rendering.
    //
    // The rate of response messages matches the exact frequency returned by the glove
    // devices (around 120FPS). This may not always be consistent, depending on your
    // application's use-case and is not recommended for applications that need consistent
    // output with no missing frames. If you are doing live streaming or VR applications,
    // we recommend using `AnimationService.GetAllHandAnimationStream()` instead as this
    // provides a consistant output of timecoded frames.
    //
    // No data will be sent back from this method if Express Calibration hasn't been run
    // for the performer.
    virtual ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* context, const ::handEngine::v1::HandAnimationRequest* request, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* writer);
    // *
    // Provides a stream of hand data for all specified performers and glove
    // hands (`handedness`) where the performers are calibrated and have been staged.
    // Data is returned in a `handAnimations` property as an array of `HandAnimationResponse`
    // objects.
    //
    // The rate of response messages is limited to the current timecode source FPS set when
    // calling `StageService.SetTimecodeSource()` (this defaults to using the computer's system
    // clock @ 120FPS by default). For live-streaming or for VR use-cases that require animation
    // data, we recommend using a 60FPS target.
    //
    // Duplicate frames may be sent using this method, so your application should filter duplicate
    // frames according to the timecode if you are using this method as part of a motion capture
    // pipeline and your software does not automatically reconcile duplicated frames.
    virtual ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* context, const ::handEngine::v1::StageAnimationRequest* request, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHandAnimationStream(::grpc::ServerContext* context, ::handEngine::v1::HandAnimationRequest* request, ::grpc::ServerAsyncWriter< ::handEngine::v1::HandAnimationResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllHandAnimationStream(::grpc::ServerContext* context, ::handEngine::v1::StageAnimationRequest* request, ::grpc::ServerAsyncWriter< ::handEngine::v1::StageAnimationResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetHandAnimationStream<WithAsyncMethod_GetAllHandAnimationStream<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::handEngine::v1::HandAnimationRequest, ::handEngine::v1::HandAnimationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::HandAnimationRequest* request) { return this->GetHandAnimationStream(context, request); }));
    }
    ~WithCallbackMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::handEngine::v1::HandAnimationResponse>* GetHandAnimationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::handEngine::v1::StageAnimationRequest, ::handEngine::v1::StageAnimationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::StageAnimationRequest* request) { return this->GetAllHandAnimationStream(context, request); }));
    }
    ~WithCallbackMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::handEngine::v1::StageAnimationResponse>* GetAllHandAnimationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetHandAnimationStream<WithCallbackMethod_GetAllHandAnimationStream<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHandAnimationStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllHandAnimationStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetHandAnimationStream(context, request); }));
    }
    ~WithRawCallbackMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetHandAnimationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAllHandAnimationStream(context, request); }));
    }
    ~WithRawCallbackMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAllHandAnimationStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetHandAnimationStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::handEngine::v1::HandAnimationRequest, ::handEngine::v1::HandAnimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::handEngine::v1::HandAnimationRequest, ::handEngine::v1::HandAnimationResponse>* streamer) {
                       return this->StreamedGetHandAnimationStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::HandAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetHandAnimationStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::handEngine::v1::HandAnimationRequest,::handEngine::v1::HandAnimationResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAllHandAnimationStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAllHandAnimationStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::handEngine::v1::StageAnimationRequest, ::handEngine::v1::StageAnimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::handEngine::v1::StageAnimationRequest, ::handEngine::v1::StageAnimationResponse>* streamer) {
                       return this->StreamedGetAllHandAnimationStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAllHandAnimationStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllHandAnimationStream(::grpc::ServerContext* /*context*/, const ::handEngine::v1::StageAnimationRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAllHandAnimationStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::handEngine::v1::StageAnimationRequest,::handEngine::v1::StageAnimationResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetHandAnimationStream<WithSplitStreamingMethod_GetAllHandAnimationStream<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetHandAnimationStream<WithSplitStreamingMethod_GetAllHandAnimationStream<Service > > StreamedService;
};

}  // namespace v1
}  // namespace handEngine


#endif  // GRPC_v1_2fanimation_2eproto__INCLUDED

