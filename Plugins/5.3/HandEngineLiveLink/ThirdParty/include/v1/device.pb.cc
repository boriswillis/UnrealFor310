// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/device.proto
#include "EnableGrpcIncludes.h"
#include "v1/device.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
#include "DisableGrpcIncludes.h"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace handEngine {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GloveSourceData::GloveSourceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sourceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sourceversion_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gloveid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gloveversion_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sourceversionstatus_)*/ 0

  , /*decltype(_impl_.handedness_)*/ 0

  , /*decltype(_impl_.gloveversionstatus_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GloveSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GloveSourceDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GloveSourceDataDefaultTypeInternal() {}
  union {
    GloveSourceData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GloveSourceDataDefaultTypeInternal _GloveSourceData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GloveSourceListResponse::GloveSourceListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.glovesourcedata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GloveSourceListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GloveSourceListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GloveSourceListResponseDefaultTypeInternal() {}
  union {
    GloveSourceListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GloveSourceListResponseDefaultTypeInternal _GloveSourceListResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
namespace handEngine {
namespace v1 {
bool VersionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    VersionStatus_strings[5] = {};

static const char VersionStatus_names[] = {
    "VERSION_STATUS_AHEAD"
    "VERSION_STATUS_BEHIND"
    "VERSION_STATUS_ERROR"
    "VERSION_STATUS_UNKNOWN"
    "VERSION_STATUS_UP_TO_DATE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VersionStatus_entries[] =
    {
        {{&VersionStatus_names[0], 20}, 4},
        {{&VersionStatus_names[20], 21}, 2},
        {{&VersionStatus_names[41], 20}, 0},
        {{&VersionStatus_names[61], 22}, 1},
        {{&VersionStatus_names[83], 25}, 3},
};

static const int VersionStatus_entries_by_number[] = {
    2,  // 0 -> VERSION_STATUS_ERROR
    3,  // 1 -> VERSION_STATUS_UNKNOWN
    1,  // 2 -> VERSION_STATUS_BEHIND
    4,  // 3 -> VERSION_STATUS_UP_TO_DATE
    0,  // 4 -> VERSION_STATUS_AHEAD
};

const std::string& VersionStatus_Name(VersionStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VersionStatus_entries, VersionStatus_entries_by_number,
          5, VersionStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VersionStatus_entries, VersionStatus_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : VersionStatus_strings[idx].get();
}

bool VersionStatus_Parse(absl::string_view name, VersionStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VersionStatus_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<VersionStatus>(int_value);
  }
  return success;
}
// ===================================================================

class GloveSourceData::_Internal {
 public:
};

GloveSourceData::GloveSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.GloveSourceData)
}
GloveSourceData::GloveSourceData(const GloveSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GloveSourceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceid_) {}

    , decltype(_impl_.sourceversion_) {}

    , decltype(_impl_.gloveid_) {}

    , decltype(_impl_.gloveversion_) {}

    , decltype(_impl_.sourceversionstatus_) {}

    , decltype(_impl_.handedness_) {}

    , decltype(_impl_.gloveversionstatus_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceid().empty()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), _this->GetArenaForAllocation());
  }
  _impl_.sourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceversion_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceversion().empty()) {
    _this->_impl_.sourceversion_.Set(from._internal_sourceversion(), _this->GetArenaForAllocation());
  }
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gloveid().empty()) {
    _this->_impl_.gloveid_.Set(from._internal_gloveid(), _this->GetArenaForAllocation());
  }
  _impl_.gloveversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveversion_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gloveversion().empty()) {
    _this->_impl_.gloveversion_.Set(from._internal_gloveversion(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sourceversionstatus_, &from._impl_.sourceversionstatus_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.gloveversionstatus_) -
    reinterpret_cast<char*>(&_impl_.sourceversionstatus_)) + sizeof(_impl_.gloveversionstatus_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.GloveSourceData)
}

inline void GloveSourceData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceid_) {}

    , decltype(_impl_.sourceversion_) {}

    , decltype(_impl_.gloveid_) {}

    , decltype(_impl_.gloveversion_) {}

    , decltype(_impl_.sourceversionstatus_) { 0 }

    , decltype(_impl_.handedness_) { 0 }

    , decltype(_impl_.gloveversionstatus_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sourceversion_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gloveversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveversion_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GloveSourceData::~GloveSourceData() {
  // @@protoc_insertion_point(destructor:handEngine.v1.GloveSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GloveSourceData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourceid_.Destroy();
  _impl_.sourceversion_.Destroy();
  _impl_.gloveid_.Destroy();
  _impl_.gloveversion_.Destroy();
}

void GloveSourceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GloveSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.GloveSourceData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourceid_.ClearToEmpty();
  _impl_.sourceversion_.ClearToEmpty();
  _impl_.gloveid_.ClearToEmpty();
  _impl_.gloveversion_.ClearToEmpty();
  ::memset(&_impl_.sourceversionstatus_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gloveversionstatus_) -
      reinterpret_cast<char*>(&_impl_.sourceversionstatus_)) + sizeof(_impl_.gloveversionstatus_));
  _internal_metadata_.Clear<std::string>();
}

const char* GloveSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sourceVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.VersionStatus sourceVersionStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_sourceversionstatus(static_cast<::handEngine::v1::VersionStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gloveId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gloveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.Handedness handedness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_handedness(static_cast<::handEngine::v1::Handedness>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gloveVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_gloveversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.VersionStatus gloveVersionStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_gloveversionstatus(static_cast<::handEngine::v1::VersionStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GloveSourceData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.GloveSourceData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    const std::string& _s = this->_internal_sourceid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GloveSourceData.sourceId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sourceVersion = 2;
  if (!this->_internal_sourceversion().empty()) {
    const std::string& _s = this->_internal_sourceversion();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GloveSourceData.sourceVersion");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .handEngine.v1.VersionStatus sourceVersionStatus = 3;
  if (this->_internal_sourceversionstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_sourceversionstatus(), target);
  }

  // string gloveId = 4;
  if (!this->_internal_gloveid().empty()) {
    const std::string& _s = this->_internal_gloveid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GloveSourceData.gloveId");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .handEngine.v1.Handedness handedness = 5;
  if (this->_internal_handedness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_handedness(), target);
  }

  // string gloveVersion = 6;
  if (!this->_internal_gloveversion().empty()) {
    const std::string& _s = this->_internal_gloveversion();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.GloveSourceData.gloveVersion");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .handEngine.v1.VersionStatus gloveVersionStatus = 7;
  if (this->_internal_gloveversionstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_gloveversionstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.GloveSourceData)
  return target;
}

::size_t GloveSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.GloveSourceData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceId = 1;
  if (!this->_internal_sourceid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sourceid());
  }

  // string sourceVersion = 2;
  if (!this->_internal_sourceversion().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sourceversion());
  }

  // string gloveId = 4;
  if (!this->_internal_gloveid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gloveid());
  }

  // string gloveVersion = 6;
  if (!this->_internal_gloveversion().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gloveversion());
  }

  // .handEngine.v1.VersionStatus sourceVersionStatus = 3;
  if (this->_internal_sourceversionstatus() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_sourceversionstatus());
  }

  // .handEngine.v1.Handedness handedness = 5;
  if (this->_internal_handedness() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_handedness());
  }

  // .handEngine.v1.VersionStatus gloveVersionStatus = 7;
  if (this->_internal_gloveversionstatus() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gloveversionstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GloveSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GloveSourceData*>(
      &from));
}

void GloveSourceData::MergeFrom(const GloveSourceData& from) {
  GloveSourceData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.GloveSourceData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourceid().empty()) {
    _this->_internal_set_sourceid(from._internal_sourceid());
  }
  if (!from._internal_sourceversion().empty()) {
    _this->_internal_set_sourceversion(from._internal_sourceversion());
  }
  if (!from._internal_gloveid().empty()) {
    _this->_internal_set_gloveid(from._internal_gloveid());
  }
  if (!from._internal_gloveversion().empty()) {
    _this->_internal_set_gloveversion(from._internal_gloveversion());
  }
  if (from._internal_sourceversionstatus() != 0) {
    _this->_internal_set_sourceversionstatus(from._internal_sourceversionstatus());
  }
  if (from._internal_handedness() != 0) {
    _this->_internal_set_handedness(from._internal_handedness());
  }
  if (from._internal_gloveversionstatus() != 0) {
    _this->_internal_set_gloveversionstatus(from._internal_gloveversionstatus());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GloveSourceData::CopyFrom(const GloveSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.GloveSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GloveSourceData::IsInitialized() const {
  return true;
}

void GloveSourceData::InternalSwap(GloveSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sourceid_, lhs_arena,
                                       &other->_impl_.sourceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sourceversion_, lhs_arena,
                                       &other->_impl_.sourceversion_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gloveid_, lhs_arena,
                                       &other->_impl_.gloveid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gloveversion_, lhs_arena,
                                       &other->_impl_.gloveversion_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GloveSourceData, _impl_.gloveversionstatus_)
      + sizeof(GloveSourceData::_impl_.gloveversionstatus_)
      - PROTOBUF_FIELD_OFFSET(GloveSourceData, _impl_.sourceversionstatus_)>(
          reinterpret_cast<char*>(&_impl_.sourceversionstatus_),
          reinterpret_cast<char*>(&other->_impl_.sourceversionstatus_));
}

std::string GloveSourceData::GetTypeName() const {
  return "handEngine.v1.GloveSourceData";
}

// ===================================================================

class GloveSourceListResponse::_Internal {
 public:
};

GloveSourceListResponse::GloveSourceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.GloveSourceListResponse)
}
GloveSourceListResponse::GloveSourceListResponse(const GloveSourceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GloveSourceListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.glovesourcedata_){from._impl_.glovesourcedata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.GloveSourceListResponse)
}

inline void GloveSourceListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.glovesourcedata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GloveSourceListResponse::~GloveSourceListResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.GloveSourceListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GloveSourceListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_glovesourcedata()->~RepeatedPtrField();
}

void GloveSourceListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GloveSourceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.GloveSourceListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_glovesourcedata()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GloveSourceListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .handEngine.v1.GloveSourceData gloveSourceData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_glovesourcedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GloveSourceListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.GloveSourceListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handEngine.v1.GloveSourceData gloveSourceData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_glovesourcedata_size()); i < n; i++) {
    const auto& repfield = this->_internal_glovesourcedata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.GloveSourceListResponse)
  return target;
}

::size_t GloveSourceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.GloveSourceListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handEngine.v1.GloveSourceData gloveSourceData = 1;
  total_size += 1UL * this->_internal_glovesourcedata_size();
  for (const auto& msg : this->_internal_glovesourcedata()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GloveSourceListResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GloveSourceListResponse*>(
      &from));
}

void GloveSourceListResponse::MergeFrom(const GloveSourceListResponse& from) {
  GloveSourceListResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.GloveSourceListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_glovesourcedata()->MergeFrom(from._internal_glovesourcedata());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GloveSourceListResponse::CopyFrom(const GloveSourceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.GloveSourceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GloveSourceListResponse::IsInitialized() const {
  return true;
}

void GloveSourceListResponse::InternalSwap(GloveSourceListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_glovesourcedata()->InternalSwap(other->_internal_mutable_glovesourcedata());
}

std::string GloveSourceListResponse::GetTypeName() const {
  return "handEngine.v1.GloveSourceListResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handEngine::v1::GloveSourceData*
Arena::CreateMaybeMessage< ::handEngine::v1::GloveSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::GloveSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::GloveSourceListResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::GloveSourceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::GloveSourceListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
