// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/license.proto
#include "EnableGrpcIncludes.h"
#include "v1/license.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
#include "DisableGrpcIncludes.h"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace handEngine {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR LicenseKeyRequest::LicenseKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gloveid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LicenseKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LicenseKeyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LicenseKeyRequestDefaultTypeInternal() {}
  union {
    LicenseKeyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LicenseKeyRequestDefaultTypeInternal _LicenseKeyRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LicenseKeyResponse::LicenseKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LicenseKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LicenseKeyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LicenseKeyResponseDefaultTypeInternal() {}
  union {
    LicenseKeyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LicenseKeyResponseDefaultTypeInternal _LicenseKeyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ActivateDeviceRequest::ActivateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gloveid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateDeviceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateDeviceRequestDefaultTypeInternal() {}
  union {
    ActivateDeviceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateDeviceRequestDefaultTypeInternal _ActivateDeviceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ActivateDeviceResponse::ActivateDeviceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.response_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateDeviceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateDeviceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateDeviceResponseDefaultTypeInternal() {}
  union {
    ActivateDeviceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateDeviceResponseDefaultTypeInternal _ActivateDeviceResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
namespace handEngine {
namespace v1 {
bool ActivateDeviceResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    ActivateDeviceResult_strings[3] = {};

static const char ActivateDeviceResult_names[] = {
    "ACTIVATION_SUCCESS"
    "CONNECTION_INTERRUPTED"
    "INVALID_TOKEN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActivateDeviceResult_entries[] =
    {
        {{&ActivateDeviceResult_names[0], 18}, 0},
        {{&ActivateDeviceResult_names[18], 22}, 2},
        {{&ActivateDeviceResult_names[40], 13}, 1},
};

static const int ActivateDeviceResult_entries_by_number[] = {
    0,  // 0 -> ACTIVATION_SUCCESS
    2,  // 1 -> INVALID_TOKEN
    1,  // 2 -> CONNECTION_INTERRUPTED
};

const std::string& ActivateDeviceResult_Name(ActivateDeviceResult value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActivateDeviceResult_entries, ActivateDeviceResult_entries_by_number,
          3, ActivateDeviceResult_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActivateDeviceResult_entries, ActivateDeviceResult_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : ActivateDeviceResult_strings[idx].get();
}

bool ActivateDeviceResult_Parse(absl::string_view name, ActivateDeviceResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActivateDeviceResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ActivateDeviceResult>(int_value);
  }
  return success;
}
// ===================================================================

class LicenseKeyRequest::_Internal {
 public:
};

LicenseKeyRequest::LicenseKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.LicenseKeyRequest)
}
LicenseKeyRequest::LicenseKeyRequest(const LicenseKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LicenseKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gloveid().empty()) {
    _this->_impl_.gloveid_.Set(from._internal_gloveid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.LicenseKeyRequest)
}

inline void LicenseKeyRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LicenseKeyRequest::~LicenseKeyRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.LicenseKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LicenseKeyRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gloveid_.Destroy();
}

void LicenseKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LicenseKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.LicenseKeyRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gloveid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LicenseKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gloveId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gloveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LicenseKeyRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.LicenseKeyRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gloveId = 1;
  if (!this->_internal_gloveid().empty()) {
    const std::string& _s = this->_internal_gloveid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.LicenseKeyRequest.gloveId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.LicenseKeyRequest)
  return target;
}

::size_t LicenseKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.LicenseKeyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gloveId = 1;
  if (!this->_internal_gloveid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gloveid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseKeyRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LicenseKeyRequest*>(
      &from));
}

void LicenseKeyRequest::MergeFrom(const LicenseKeyRequest& from) {
  LicenseKeyRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.LicenseKeyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gloveid().empty()) {
    _this->_internal_set_gloveid(from._internal_gloveid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LicenseKeyRequest::CopyFrom(const LicenseKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.LicenseKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseKeyRequest::IsInitialized() const {
  return true;
}

void LicenseKeyRequest::InternalSwap(LicenseKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gloveid_, lhs_arena,
                                       &other->_impl_.gloveid_, rhs_arena);
}

std::string LicenseKeyRequest::GetTypeName() const {
  return "handEngine.v1.LicenseKeyRequest";
}

// ===================================================================

class LicenseKeyResponse::_Internal {
 public:
};

LicenseKeyResponse::LicenseKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.LicenseKeyResponse)
}
LicenseKeyResponse::LicenseKeyResponse(const LicenseKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LicenseKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.LicenseKeyResponse)
}

inline void LicenseKeyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LicenseKeyResponse::~LicenseKeyResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.LicenseKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LicenseKeyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void LicenseKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LicenseKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.LicenseKeyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LicenseKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LicenseKeyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.LicenseKeyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.LicenseKeyResponse.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.LicenseKeyResponse)
  return target;
}

::size_t LicenseKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.LicenseKeyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseKeyResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LicenseKeyResponse*>(
      &from));
}

void LicenseKeyResponse::MergeFrom(const LicenseKeyResponse& from) {
  LicenseKeyResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.LicenseKeyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LicenseKeyResponse::CopyFrom(const LicenseKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.LicenseKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseKeyResponse::IsInitialized() const {
  return true;
}

void LicenseKeyResponse::InternalSwap(LicenseKeyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

std::string LicenseKeyResponse::GetTypeName() const {
  return "handEngine.v1.LicenseKeyResponse";
}

// ===================================================================

class ActivateDeviceRequest::_Internal {
 public:
};

ActivateDeviceRequest::ActivateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.ActivateDeviceRequest)
}
ActivateDeviceRequest::ActivateDeviceRequest(const ActivateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ActivateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveid_) {}

    , decltype(_impl_.token_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gloveid().empty()) {
    _this->_impl_.gloveid_.Set(from._internal_gloveid(), _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.ActivateDeviceRequest)
}

inline void ActivateDeviceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gloveid_) {}

    , decltype(_impl_.token_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gloveid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gloveid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivateDeviceRequest::~ActivateDeviceRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.ActivateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateDeviceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gloveid_.Destroy();
  _impl_.token_.Destroy();
}

void ActivateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.ActivateDeviceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gloveid_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ActivateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gloveId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gloveid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActivateDeviceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.ActivateDeviceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gloveId = 1;
  if (!this->_internal_gloveid().empty()) {
    const std::string& _s = this->_internal_gloveid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.ActivateDeviceRequest.gloveId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    const std::string& _s = this->_internal_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.ActivateDeviceRequest.token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.ActivateDeviceRequest)
  return target;
}

::size_t ActivateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.ActivateDeviceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gloveId = 1;
  if (!this->_internal_gloveid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gloveid());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateDeviceRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActivateDeviceRequest*>(
      &from));
}

void ActivateDeviceRequest::MergeFrom(const ActivateDeviceRequest& from) {
  ActivateDeviceRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.ActivateDeviceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gloveid().empty()) {
    _this->_internal_set_gloveid(from._internal_gloveid());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActivateDeviceRequest::CopyFrom(const ActivateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.ActivateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateDeviceRequest::IsInitialized() const {
  return true;
}

void ActivateDeviceRequest::InternalSwap(ActivateDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gloveid_, lhs_arena,
                                       &other->_impl_.gloveid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
}

std::string ActivateDeviceRequest::GetTypeName() const {
  return "handEngine.v1.ActivateDeviceRequest";
}

// ===================================================================

class ActivateDeviceResponse::_Internal {
 public:
};

ActivateDeviceResponse::ActivateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.ActivateDeviceResponse)
}
ActivateDeviceResponse::ActivateDeviceResponse(const ActivateDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ActivateDeviceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.response_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.ActivateDeviceResponse)
}

inline void ActivateDeviceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.response_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivateDeviceResponse::~ActivateDeviceResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.ActivateDeviceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateDeviceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ActivateDeviceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.ActivateDeviceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.response_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ActivateDeviceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.ActivateDeviceResult response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::handEngine::v1::ActivateDeviceResult>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActivateDeviceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.ActivateDeviceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .handEngine.v1.ActivateDeviceResult response = 1;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_response(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.ActivateDeviceResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.ActivateDeviceResponse)
  return target;
}

::size_t ActivateDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.ActivateDeviceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .handEngine.v1.ActivateDeviceResult response = 1;
  if (this->_internal_response() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateDeviceResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActivateDeviceResponse*>(
      &from));
}

void ActivateDeviceResponse::MergeFrom(const ActivateDeviceResponse& from) {
  ActivateDeviceResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.ActivateDeviceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_response() != 0) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActivateDeviceResponse::CopyFrom(const ActivateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.ActivateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateDeviceResponse::IsInitialized() const {
  return true;
}

void ActivateDeviceResponse::InternalSwap(ActivateDeviceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.response_, other->_impl_.response_);
}

std::string ActivateDeviceResponse::GetTypeName() const {
  return "handEngine.v1.ActivateDeviceResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handEngine::v1::LicenseKeyRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::LicenseKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::LicenseKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::LicenseKeyResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::LicenseKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::LicenseKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::ActivateDeviceRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::ActivateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::ActivateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::ActivateDeviceResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::ActivateDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::ActivateDeviceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
