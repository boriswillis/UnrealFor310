// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/performer.proto
#include "EnableGrpcIncludes.h"
#include "v1/performer.pb.h"
#include "v1/performer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "DisableGrpcIncludes.h"
namespace handEngine {
namespace v1 {

static const char* PerformerService_method_names[] = {
  "/handEngine.v1.PerformerService/GetPerformersStream",
  "/handEngine.v1.PerformerService/AddPerformer",
  "/handEngine.v1.PerformerService/RemovePerformer",
  "/handEngine.v1.PerformerService/SetStagePerformer",
  "/handEngine.v1.PerformerService/SetPerformerGlove",
  "/handEngine.v1.PerformerService/RemovePerformerGlove",
  "/handEngine.v1.PerformerService/GetGloveStatusStream",
  "/handEngine.v1.PerformerService/SetExpressCaptureStatus",
  "/handEngine.v1.PerformerService/SmartCalibrate",
  "/handEngine.v1.PerformerService/CaptureSmartPose",
  "/handEngine.v1.PerformerService/Train",
  "/handEngine.v1.PerformerService/GetGlovesConnectedToProfiles",
  "/handEngine.v1.PerformerService/CreateHapticStream",
};

std::unique_ptr< PerformerService::Stub> PerformerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PerformerService::Stub> stub(new PerformerService::Stub(channel, options));
  return stub;
}

PerformerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPerformersStream_(PerformerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddPerformer_(PerformerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePerformer_(PerformerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStagePerformer_(PerformerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPerformerGlove_(PerformerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePerformerGlove_(PerformerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGloveStatusStream_(PerformerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetExpressCaptureStatus_(PerformerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SmartCalibrate_(PerformerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CaptureSmartPose_(PerformerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Train_(PerformerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGlovesConnectedToProfiles_(PerformerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateHapticStream_(PerformerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::handEngine::v1::PerformerNameListResponse>* PerformerService::Stub::GetPerformersStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::PerformerNameListResponse>::Create(channel_.get(), rpcmethod_GetPerformersStream_, context, request);
}

void PerformerService::Stub::async::GetPerformersStream(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::PerformerNameListResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::PerformerNameListResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPerformersStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::PerformerNameListResponse>* PerformerService::Stub::AsyncGetPerformersStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::PerformerNameListResponse>::Create(channel_.get(), cq, rpcmethod_GetPerformersStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::PerformerNameListResponse>* PerformerService::Stub::PrepareAsyncGetPerformersStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::PerformerNameListResponse>::Create(channel_.get(), cq, rpcmethod_GetPerformersStream_, context, request, false, nullptr);
}

::grpc::Status PerformerService::Stub::AddPerformer(::grpc::ClientContext* context, const ::handEngine::v1::AddPerformerRequest& request, ::handEngine::v1::AddPerformerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::AddPerformerRequest, ::handEngine::v1::AddPerformerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPerformer_, context, request, response);
}

void PerformerService::Stub::async::AddPerformer(::grpc::ClientContext* context, const ::handEngine::v1::AddPerformerRequest* request, ::handEngine::v1::AddPerformerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::AddPerformerRequest, ::handEngine::v1::AddPerformerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPerformer_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::AddPerformer(::grpc::ClientContext* context, const ::handEngine::v1::AddPerformerRequest* request, ::handEngine::v1::AddPerformerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPerformer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::AddPerformerResponse>* PerformerService::Stub::PrepareAsyncAddPerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::AddPerformerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::AddPerformerResponse, ::handEngine::v1::AddPerformerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPerformer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::AddPerformerResponse>* PerformerService::Stub::AsyncAddPerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::AddPerformerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPerformerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PerformerService::Stub::RemovePerformer(::grpc::ClientContext* context, const ::handEngine::v1::RemovePerformerRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::RemovePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePerformer_, context, request, response);
}

void PerformerService::Stub::async::RemovePerformer(::grpc::ClientContext* context, const ::handEngine::v1::RemovePerformerRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::RemovePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePerformer_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::RemovePerformer(::grpc::ClientContext* context, const ::handEngine::v1::RemovePerformerRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePerformer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncRemovePerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::RemovePerformerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::RemovePerformerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePerformer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncRemovePerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::RemovePerformerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePerformerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PerformerService::Stub::SetStagePerformer(::grpc::ClientContext* context, const ::handEngine::v1::StagePerformerRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::StagePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStagePerformer_, context, request, response);
}

void PerformerService::Stub::async::SetStagePerformer(::grpc::ClientContext* context, const ::handEngine::v1::StagePerformerRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::StagePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStagePerformer_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::SetStagePerformer(::grpc::ClientContext* context, const ::handEngine::v1::StagePerformerRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStagePerformer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncSetStagePerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::StagePerformerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::StagePerformerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStagePerformer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncSetStagePerformerRaw(::grpc::ClientContext* context, const ::handEngine::v1::StagePerformerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStagePerformerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PerformerService::Stub::SetPerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::AssignGloveToPerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPerformerGlove_, context, request, response);
}

void PerformerService::Stub::async::SetPerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::AssignGloveToPerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPerformerGlove_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::SetPerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPerformerGlove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncSetPerformerGloveRaw(::grpc::ClientContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::AssignGloveToPerformerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPerformerGlove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncSetPerformerGloveRaw(::grpc::ClientContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPerformerGloveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PerformerService::Stub::RemovePerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePerformerGlove_, context, request, response);
}

void PerformerService::Stub::async::RemovePerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePerformerGlove_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::RemovePerformerGlove(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePerformerGlove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncRemovePerformerGloveRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::ProfileMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePerformerGlove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncRemovePerformerGloveRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePerformerGloveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::handEngine::v1::GloveInformationResponse>* PerformerService::Stub::GetGloveStatusStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::GloveInformationResponse>::Create(channel_.get(), rpcmethod_GetGloveStatusStream_, context, request);
}

void PerformerService::Stub::async::GetGloveStatusStream(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::grpc::ClientReadReactor< ::handEngine::v1::GloveInformationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::GloveInformationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGloveStatusStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::GloveInformationResponse>* PerformerService::Stub::AsyncGetGloveStatusStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::GloveInformationResponse>::Create(channel_.get(), cq, rpcmethod_GetGloveStatusStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::GloveInformationResponse>* PerformerService::Stub::PrepareAsyncGetGloveStatusStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::GloveInformationResponse>::Create(channel_.get(), cq, rpcmethod_GetGloveStatusStream_, context, request, false, nullptr);
}

::grpc::Status PerformerService::Stub::SetExpressCaptureStatus(::grpc::ClientContext* context, const ::handEngine::v1::ExpressCaptureRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::ExpressCaptureRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetExpressCaptureStatus_, context, request, response);
}

void PerformerService::Stub::async::SetExpressCaptureStatus(::grpc::ClientContext* context, const ::handEngine::v1::ExpressCaptureRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::ExpressCaptureRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetExpressCaptureStatus_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::SetExpressCaptureStatus(::grpc::ClientContext* context, const ::handEngine::v1::ExpressCaptureRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetExpressCaptureStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncSetExpressCaptureStatusRaw(::grpc::ClientContext* context, const ::handEngine::v1::ExpressCaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::ExpressCaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetExpressCaptureStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncSetExpressCaptureStatusRaw(::grpc::ClientContext* context, const ::handEngine::v1::ExpressCaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetExpressCaptureStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::handEngine::v1::SmartCalibrationResponse>* PerformerService::Stub::SmartCalibrateRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::SmartCalibrationResponse>::Create(channel_.get(), rpcmethod_SmartCalibrate_, context, request);
}

void PerformerService::Stub::async::SmartCalibrate(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::grpc::ClientReadReactor< ::handEngine::v1::SmartCalibrationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::SmartCalibrationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SmartCalibrate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::SmartCalibrationResponse>* PerformerService::Stub::AsyncSmartCalibrateRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::SmartCalibrationResponse>::Create(channel_.get(), cq, rpcmethod_SmartCalibrate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::SmartCalibrationResponse>* PerformerService::Stub::PrepareAsyncSmartCalibrateRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::SmartCalibrationResponse>::Create(channel_.get(), cq, rpcmethod_SmartCalibrate_, context, request, false, nullptr);
}

::grpc::Status PerformerService::Stub::CaptureSmartPose(::grpc::ClientContext* context, const ::handEngine::v1::CaptureSmartPoseRequest& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::CaptureSmartPoseRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureSmartPose_, context, request, response);
}

void PerformerService::Stub::async::CaptureSmartPose(::grpc::ClientContext* context, const ::handEngine::v1::CaptureSmartPoseRequest* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::CaptureSmartPoseRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureSmartPose_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::CaptureSmartPose(::grpc::ClientContext* context, const ::handEngine::v1::CaptureSmartPoseRequest* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureSmartPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncCaptureSmartPoseRaw(::grpc::ClientContext* context, const ::handEngine::v1::CaptureSmartPoseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::CaptureSmartPoseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureSmartPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncCaptureSmartPoseRaw(::grpc::ClientContext* context, const ::handEngine::v1::CaptureSmartPoseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureSmartPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PerformerService::Stub::Train(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::handEngine::v1::BlankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Train_, context, request, response);
}

void PerformerService::Stub::async::Train(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, std::move(f));
}

void PerformerService::Stub::async::Train(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Train_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::PrepareAsyncTrainRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::BlankResponse, ::handEngine::v1::ProfileMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Train_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::BlankResponse>* PerformerService::Stub::AsyncTrainRaw(::grpc::ClientContext* context, const ::handEngine::v1::ProfileMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::handEngine::v1::DeviceDataResponse>* PerformerService::Stub::GetGlovesConnectedToProfilesRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::DeviceDataResponse>::Create(channel_.get(), rpcmethod_GetGlovesConnectedToProfiles_, context, request);
}

void PerformerService::Stub::async::GetGlovesConnectedToProfiles(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::DeviceDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::DeviceDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGlovesConnectedToProfiles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::DeviceDataResponse>* PerformerService::Stub::AsyncGetGlovesConnectedToProfilesRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::DeviceDataResponse>::Create(channel_.get(), cq, rpcmethod_GetGlovesConnectedToProfiles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::DeviceDataResponse>* PerformerService::Stub::PrepareAsyncGetGlovesConnectedToProfilesRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::DeviceDataResponse>::Create(channel_.get(), cq, rpcmethod_GetGlovesConnectedToProfiles_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>* PerformerService::Stub::CreateHapticStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>::Create(channel_.get(), rpcmethod_CreateHapticStream_, context);
}

void PerformerService::Stub::async::CreateHapticStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::handEngine::v1::HapticsInputRequest,::handEngine::v1::HapticsStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::handEngine::v1::HapticsInputRequest,::handEngine::v1::HapticsStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateHapticStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>* PerformerService::Stub::AsyncCreateHapticStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>::Create(channel_.get(), cq, rpcmethod_CreateHapticStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>* PerformerService::Stub::PrepareAsyncCreateHapticStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>::Create(channel_.get(), cq, rpcmethod_CreateHapticStream_, context, false, nullptr);
}

PerformerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PerformerService::Service, ::handEngine::v1::BlankRequest, ::handEngine::v1::PerformerNameListResponse>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::BlankRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::PerformerNameListResponse>* writer) {
               return service->GetPerformersStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::AddPerformerRequest, ::handEngine::v1::AddPerformerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::AddPerformerRequest* req,
             ::handEngine::v1::AddPerformerResponse* resp) {
               return service->AddPerformer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::RemovePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::RemovePerformerRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->RemovePerformer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::StagePerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::StagePerformerRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetStagePerformer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::AssignGloveToPerformerRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::AssignGloveToPerformerRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetPerformerGlove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ProfileMeta* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->RemovePerformerGlove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PerformerService::Service, ::handEngine::v1::ProfileMeta, ::handEngine::v1::GloveInformationResponse>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ProfileMeta* req,
             ::grpc::ServerWriter<::handEngine::v1::GloveInformationResponse>* writer) {
               return service->GetGloveStatusStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::ExpressCaptureRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ExpressCaptureRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->SetExpressCaptureStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PerformerService::Service, ::handEngine::v1::ProfileMeta, ::handEngine::v1::SmartCalibrationResponse>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ProfileMeta* req,
             ::grpc::ServerWriter<::handEngine::v1::SmartCalibrationResponse>* writer) {
               return service->SmartCalibrate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::CaptureSmartPoseRequest, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::CaptureSmartPoseRequest* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->CaptureSmartPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PerformerService::Service, ::handEngine::v1::ProfileMeta, ::handEngine::v1::BlankResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ProfileMeta* req,
             ::handEngine::v1::BlankResponse* resp) {
               return service->Train(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PerformerService::Service, ::handEngine::v1::BlankRequest, ::handEngine::v1::DeviceDataResponse>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::BlankRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::DeviceDataResponse>* writer) {
               return service->GetGlovesConnectedToProfiles(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PerformerService_method_names[12],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PerformerService::Service, ::handEngine::v1::HapticsInputRequest, ::handEngine::v1::HapticsStatusResponse>(
          [](PerformerService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::handEngine::v1::HapticsStatusResponse,
             ::handEngine::v1::HapticsInputRequest>* stream) {
               return service->CreateHapticStream(ctx, stream);
             }, this)));
}

PerformerService::Service::~Service() {
}

::grpc::Status PerformerService::Service::GetPerformersStream(::grpc::ServerContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ServerWriter< ::handEngine::v1::PerformerNameListResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::AddPerformer(::grpc::ServerContext* context, const ::handEngine::v1::AddPerformerRequest* request, ::handEngine::v1::AddPerformerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::RemovePerformer(::grpc::ServerContext* context, const ::handEngine::v1::RemovePerformerRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::SetStagePerformer(::grpc::ServerContext* context, const ::handEngine::v1::StagePerformerRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::SetPerformerGlove(::grpc::ServerContext* context, const ::handEngine::v1::AssignGloveToPerformerRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::RemovePerformerGlove(::grpc::ServerContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::GetGloveStatusStream(::grpc::ServerContext* context, const ::handEngine::v1::ProfileMeta* request, ::grpc::ServerWriter< ::handEngine::v1::GloveInformationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::SetExpressCaptureStatus(::grpc::ServerContext* context, const ::handEngine::v1::ExpressCaptureRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::SmartCalibrate(::grpc::ServerContext* context, const ::handEngine::v1::ProfileMeta* request, ::grpc::ServerWriter< ::handEngine::v1::SmartCalibrationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::CaptureSmartPose(::grpc::ServerContext* context, const ::handEngine::v1::CaptureSmartPoseRequest* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::Train(::grpc::ServerContext* context, const ::handEngine::v1::ProfileMeta* request, ::handEngine::v1::BlankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::GetGlovesConnectedToProfiles(::grpc::ServerContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ServerWriter< ::handEngine::v1::DeviceDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PerformerService::Service::CreateHapticStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::handEngine::v1::HapticsStatusResponse, ::handEngine::v1::HapticsInputRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handEngine
}  // namespace v1

