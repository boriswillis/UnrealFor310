
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/update-firmware.proto
// Original file comments:
// *
// Update Firmware RPCs
//
// Remote control Hand Engine's firmware update.
#ifndef GRPC_v1_2fupdate_2dfirmware_2eproto__INCLUDED
#define GRPC_v1_2fupdate_2dfirmware_2eproto__INCLUDED

#include "v1/update-firmware.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace handEngine {
namespace v1 {

class UpdateFirmwareService final {
 public:
  static constexpr char const* service_full_name() {
    return "handEngine.v1.UpdateFirmwareService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // * Updates a single dongle-glove set.
    // Takes the source ID of the target dongle-glove set.
    // Returns an UpdateResponse containing the successfully updated device.
    // Returns an error if the set cannot be updated due not meeting the update critera, e.g. Low battery
    // Also returns an error if the device is already waiting for an update 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>> Update(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>>(UpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>>(AsyncUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // * Updates all connected dongle-glove sets that meet the update criteria.
    // It does not need any arguments as it detects all sources that can be updated.
    // Returns an UpdateResponse containing all devices that successfully updated and all devices that failed to update.
    // Returns an error if another UpdateAll is currently in progress 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>> UpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>>(UpdateAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>> AsyncUpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>>(AsyncUpdateAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>> PrepareAsyncUpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>>(PrepareAsyncUpdateAllRaw(context, request, cq));
    }
    // * Set a target firmware path
    // Sets the target firmware path for the desired firmware to be uploaded to the devices
    // Takes a string containing the path to the desired firmware file
    // Returns a result, the attempted file path and a message elaborating upon the result 
    virtual ::grpc::Status AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::handEngine::v1::GlobalFirmwarePathResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>> AsyncAddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>>(AsyncAddFirmwarePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>> PrepareAsyncAddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>>(PrepareAsyncAddFirmwarePathRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // * Updates a single dongle-glove set.
      // Takes the source ID of the target dongle-glove set.
      // Returns an UpdateResponse containing the successfully updated device.
      // Returns an error if the set cannot be updated due not meeting the update critera, e.g. Low battery
      // Also returns an error if the device is already waiting for an update 
      virtual void Update(::grpc::ClientContext* context, const ::handEngine::v1::SourceId* request, ::grpc::ClientReadReactor< ::handEngine::v1::UpdateResponse>* reactor) = 0;
      // * Updates all connected dongle-glove sets that meet the update criteria.
      // It does not need any arguments as it detects all sources that can be updated.
      // Returns an UpdateResponse containing all devices that successfully updated and all devices that failed to update.
      // Returns an error if another UpdateAll is currently in progress 
      virtual void UpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::UpdateResponse>* reactor) = 0;
      // * Set a target firmware path
      // Sets the target firmware path for the desired firmware to be uploaded to the devices
      // Takes a string containing the path to the desired firmware file
      // Returns a result, the attempted file path and a message elaborating upon the result 
      virtual void AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>* UpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::handEngine::v1::UpdateResponse>* UpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>* AsyncUpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handEngine::v1::UpdateResponse>* PrepareAsyncUpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>* AsyncAddFirmwarePathRaw(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::GlobalFirmwarePathResponse>* PrepareAsyncAddFirmwarePathRaw(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>> Update(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>>(UpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>>(AsyncUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>> UpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>>(UpdateAllRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>> AsyncUpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>>(AsyncUpdateAllRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>> PrepareAsyncUpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>>(PrepareAsyncUpdateAllRaw(context, request, cq));
    }
    ::grpc::Status AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::handEngine::v1::GlobalFirmwarePathResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>> AsyncAddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>>(AsyncAddFirmwarePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>> PrepareAsyncAddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>>(PrepareAsyncAddFirmwarePathRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Update(::grpc::ClientContext* context, const ::handEngine::v1::SourceId* request, ::grpc::ClientReadReactor< ::handEngine::v1::UpdateResponse>* reactor) override;
      void UpdateAll(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::UpdateResponse>* reactor) override;
      void AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response, std::function<void(::grpc::Status)>) override;
      void AddFirmwarePath(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>* UpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::handEngine::v1::SourceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::handEngine::v1::UpdateResponse>* UpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>* AsyncUpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::handEngine::v1::UpdateResponse>* PrepareAsyncUpdateAllRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>* AsyncAddFirmwarePathRaw(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::GlobalFirmwarePathResponse>* PrepareAsyncAddFirmwarePathRaw(::grpc::ClientContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAll_;
    const ::grpc::internal::RpcMethod rpcmethod_AddFirmwarePath_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // * Updates a single dongle-glove set.
    // Takes the source ID of the target dongle-glove set.
    // Returns an UpdateResponse containing the successfully updated device.
    // Returns an error if the set cannot be updated due not meeting the update critera, e.g. Low battery
    // Also returns an error if the device is already waiting for an update 
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::handEngine::v1::SourceId* request, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* writer);
    // * Updates all connected dongle-glove sets that meet the update criteria.
    // It does not need any arguments as it detects all sources that can be updated.
    // Returns an UpdateResponse containing all devices that successfully updated and all devices that failed to update.
    // Returns an error if another UpdateAll is currently in progress 
    virtual ::grpc::Status UpdateAll(::grpc::ServerContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* writer);
    // * Set a target firmware path
    // Sets the target firmware path for the desired firmware to be uploaded to the devices
    // Takes a string containing the path to the desired firmware file
    // Returns a result, the attempted file path and a message elaborating upon the result 
    virtual ::grpc::Status AddFirmwarePath(::grpc::ServerContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::handEngine::v1::SourceId* request, ::grpc::ServerAsyncWriter< ::handEngine::v1::UpdateResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAll(::grpc::ServerContext* context, ::handEngine::v1::BlankRequest* request, ::grpc::ServerAsyncWriter< ::handEngine::v1::UpdateResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFirmwarePath(::grpc::ServerContext* context, ::handEngine::v1::GlobalFirmwarePathRequest* request, ::grpc::ServerAsyncResponseWriter< ::handEngine::v1::GlobalFirmwarePathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Update<WithAsyncMethod_UpdateAll<WithAsyncMethod_AddFirmwarePath<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::handEngine::v1::SourceId, ::handEngine::v1::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::SourceId* request) { return this->Update(context, request); }));
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::handEngine::v1::UpdateResponse>* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAll() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::handEngine::v1::BlankRequest, ::handEngine::v1::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::BlankRequest* request) { return this->UpdateAll(context, request); }));
    }
    ~WithCallbackMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::handEngine::v1::UpdateResponse>* UpdateAll(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::GlobalFirmwarePathRequest, ::handEngine::v1::GlobalFirmwarePathResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::GlobalFirmwarePathRequest* request, ::handEngine::v1::GlobalFirmwarePathResponse* response) { return this->AddFirmwarePath(context, request, response); }));}
    void SetMessageAllocatorFor_AddFirmwarePath(
        ::grpc::MessageAllocator< ::handEngine::v1::GlobalFirmwarePathRequest, ::handEngine::v1::GlobalFirmwarePathResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::GlobalFirmwarePathRequest, ::handEngine::v1::GlobalFirmwarePathResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFirmwarePath(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Update<WithCallbackMethod_UpdateAll<WithCallbackMethod_AddFirmwarePath<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAll() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFirmwarePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Update(context, request); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAll() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->UpdateAll(context, request); }));
    }
    ~WithRawCallbackMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* UpdateAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddFirmwarePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFirmwarePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddFirmwarePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddFirmwarePath() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::handEngine::v1::GlobalFirmwarePathRequest, ::handEngine::v1::GlobalFirmwarePathResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::handEngine::v1::GlobalFirmwarePathRequest, ::handEngine::v1::GlobalFirmwarePathResponse>* streamer) {
                       return this->StreamedAddFirmwarePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddFirmwarePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddFirmwarePath(::grpc::ServerContext* /*context*/, const ::handEngine::v1::GlobalFirmwarePathRequest* /*request*/, ::handEngine::v1::GlobalFirmwarePathResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddFirmwarePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handEngine::v1::GlobalFirmwarePathRequest,::handEngine::v1::GlobalFirmwarePathResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddFirmwarePath<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::handEngine::v1::SourceId, ::handEngine::v1::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::handEngine::v1::SourceId, ::handEngine::v1::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::handEngine::v1::SourceId* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::handEngine::v1::SourceId,::handEngine::v1::UpdateResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_UpdateAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_UpdateAll() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::handEngine::v1::BlankRequest, ::handEngine::v1::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::handEngine::v1::BlankRequest, ::handEngine::v1::UpdateResponse>* streamer) {
                       return this->StreamedUpdateAll(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_UpdateAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAll(::grpc::ServerContext* /*context*/, const ::handEngine::v1::BlankRequest* /*request*/, ::grpc::ServerWriter< ::handEngine::v1::UpdateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedUpdateAll(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::handEngine::v1::BlankRequest,::handEngine::v1::UpdateResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Update<WithSplitStreamingMethod_UpdateAll<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Update<WithSplitStreamingMethod_UpdateAll<WithStreamedUnaryMethod_AddFirmwarePath<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace handEngine


#endif  // GRPC_v1_2fupdate_2dfirmware_2eproto__INCLUDED


