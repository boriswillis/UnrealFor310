// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/device.proto
#include "EnableGrpcIncludes.h"
#include "v1/device.pb.h"
#include "v1/device.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "DisableGrpcIncludes.h"
namespace handEngine {
namespace v1 {

static const char* DeviceService_method_names[] = {
  "/handEngine.v1.DeviceService/GetGloveStream",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetGloveStream_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::handEngine::v1::GloveSourceListResponse>* DeviceService::Stub::GetGloveStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::GloveSourceListResponse>::Create(channel_.get(), rpcmethod_GetGloveStream_, context, request);
}

void DeviceService::Stub::async::GetGloveStream(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::GloveSourceListResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::GloveSourceListResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGloveStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::GloveSourceListResponse>* DeviceService::Stub::AsyncGetGloveStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::GloveSourceListResponse>::Create(channel_.get(), cq, rpcmethod_GetGloveStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::GloveSourceListResponse>* DeviceService::Stub::PrepareAsyncGetGloveStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::BlankRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::GloveSourceListResponse>::Create(channel_.get(), cq, rpcmethod_GetGloveStream_, context, request, false, nullptr);
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::handEngine::v1::BlankRequest, ::handEngine::v1::GloveSourceListResponse>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::BlankRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::GloveSourceListResponse>* writer) {
               return service->GetGloveStream(ctx, req, writer);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::GetGloveStream(::grpc::ServerContext* context, const ::handEngine::v1::BlankRequest* request, ::grpc::ServerWriter< ::handEngine::v1::GloveSourceListResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handEngine
}  // namespace v1

