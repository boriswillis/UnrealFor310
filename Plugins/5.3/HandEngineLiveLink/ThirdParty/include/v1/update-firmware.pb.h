
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/update-firmware.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fupdate_2dfirmware_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fupdate_2dfirmware_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "v1/_api.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2fupdate_2dfirmware_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fupdate_2dfirmware_2eproto {
  static const ::uint32_t offsets[];
};
namespace handEngine {
namespace v1 {
class GlobalFirmwarePathRequest;
struct GlobalFirmwarePathRequestDefaultTypeInternal;
extern GlobalFirmwarePathRequestDefaultTypeInternal _GlobalFirmwarePathRequest_default_instance_;
class GlobalFirmwarePathResponse;
struct GlobalFirmwarePathResponseDefaultTypeInternal;
extern GlobalFirmwarePathResponseDefaultTypeInternal _GlobalFirmwarePathResponse_default_instance_;
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SourceId;
struct SourceIdDefaultTypeInternal;
extern SourceIdDefaultTypeInternal _SourceId_default_instance_;
class UpdateResponse;
struct UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class UpdateState;
struct UpdateStateDefaultTypeInternal;
extern UpdateStateDefaultTypeInternal _UpdateState_default_instance_;
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template <>
::handEngine::v1::GlobalFirmwarePathRequest* Arena::CreateMaybeMessage<::handEngine::v1::GlobalFirmwarePathRequest>(Arena*);
template <>
::handEngine::v1::GlobalFirmwarePathResponse* Arena::CreateMaybeMessage<::handEngine::v1::GlobalFirmwarePathResponse>(Arena*);
template <>
::handEngine::v1::Source* Arena::CreateMaybeMessage<::handEngine::v1::Source>(Arena*);
template <>
::handEngine::v1::SourceId* Arena::CreateMaybeMessage<::handEngine::v1::SourceId>(Arena*);
template <>
::handEngine::v1::UpdateResponse* Arena::CreateMaybeMessage<::handEngine::v1::UpdateResponse>(Arena*);
template <>
::handEngine::v1::UpdateState* Arena::CreateMaybeMessage<::handEngine::v1::UpdateState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace handEngine {
namespace v1 {
enum ParsedPathResult : int {
  PARSE_SUCCESS = 0,
  PARSE_FAILURE = 1,
  ParsedPathResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ParsedPathResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ParsedPathResult_IsValid(int value);
constexpr ParsedPathResult ParsedPathResult_MIN = static_cast<ParsedPathResult>(0);
constexpr ParsedPathResult ParsedPathResult_MAX = static_cast<ParsedPathResult>(1);
constexpr int ParsedPathResult_ARRAYSIZE = 1 + 1;
const std::string& ParsedPathResult_Name(ParsedPathResult value);
template <typename T>
const std::string& ParsedPathResult_Name(T value) {
  static_assert(std::is_same<T, ParsedPathResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ParsedPathResult_Name().");
  return ParsedPathResult_Name(static_cast<ParsedPathResult>(value));
}
const std::string& ParsedPathResult_Name(ParsedPathResult value);
bool ParsedPathResult_Parse(absl::string_view name, ParsedPathResult* value);
enum UpdateAction : int {
  UPDATE_ACTION_DONGLE = 0,
  UPDATE_ACTION_GLOVE = 1,
  UpdateAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UpdateAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UpdateAction_IsValid(int value);
constexpr UpdateAction UpdateAction_MIN = static_cast<UpdateAction>(0);
constexpr UpdateAction UpdateAction_MAX = static_cast<UpdateAction>(1);
constexpr int UpdateAction_ARRAYSIZE = 1 + 1;
const std::string& UpdateAction_Name(UpdateAction value);
template <typename T>
const std::string& UpdateAction_Name(T value) {
  static_assert(std::is_same<T, UpdateAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateAction_Name().");
  return UpdateAction_Name(static_cast<UpdateAction>(value));
}
const std::string& UpdateAction_Name(UpdateAction value);
bool UpdateAction_Parse(absl::string_view name, UpdateAction* value);
enum UpdateStatus : int {
  UPDATE_STATUS_UNKNOWN = 0,
  UPDATE_STATUS_WAITING = 1,
  UPDATE_STATUS_UPDATING = 2,
  UPDATE_STATUS_SUCCESS = 3,
  UPDATE_STATUS_ERROR = 4,
  UpdateStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UpdateStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UpdateStatus_IsValid(int value);
constexpr UpdateStatus UpdateStatus_MIN = static_cast<UpdateStatus>(0);
constexpr UpdateStatus UpdateStatus_MAX = static_cast<UpdateStatus>(4);
constexpr int UpdateStatus_ARRAYSIZE = 4 + 1;
const std::string& UpdateStatus_Name(UpdateStatus value);
template <typename T>
const std::string& UpdateStatus_Name(T value) {
  static_assert(std::is_same<T, UpdateStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateStatus_Name().");
  return UpdateStatus_Name(static_cast<UpdateStatus>(value));
}
const std::string& UpdateStatus_Name(UpdateStatus value);
bool UpdateStatus_Parse(absl::string_view name, UpdateStatus* value);

// ===================================================================


// -------------------------------------------------------------------

class GlobalFirmwarePathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.GlobalFirmwarePathRequest) */ {
 public:
  inline GlobalFirmwarePathRequest() : GlobalFirmwarePathRequest(nullptr) {}
  ~GlobalFirmwarePathRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GlobalFirmwarePathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalFirmwarePathRequest(const GlobalFirmwarePathRequest& from);
  GlobalFirmwarePathRequest(GlobalFirmwarePathRequest&& from) noexcept
    : GlobalFirmwarePathRequest() {
    *this = ::std::move(from);
  }

  inline GlobalFirmwarePathRequest& operator=(const GlobalFirmwarePathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalFirmwarePathRequest& operator=(GlobalFirmwarePathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GlobalFirmwarePathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalFirmwarePathRequest* internal_default_instance() {
    return reinterpret_cast<const GlobalFirmwarePathRequest*>(
               &_GlobalFirmwarePathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalFirmwarePathRequest& a, GlobalFirmwarePathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalFirmwarePathRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalFirmwarePathRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalFirmwarePathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalFirmwarePathRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GlobalFirmwarePathRequest& from);
  void MergeFrom(const GlobalFirmwarePathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalFirmwarePathRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.GlobalFirmwarePathRequest";
  }
  protected:
  explicit GlobalFirmwarePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.GlobalFirmwarePathRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};// -------------------------------------------------------------------

class SourceId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.SourceId) */ {
 public:
  inline SourceId() : SourceId(nullptr) {}
  ~SourceId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SourceId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceId(const SourceId& from);
  SourceId(SourceId&& from) noexcept
    : SourceId() {
    *this = ::std::move(from);
  }

  inline SourceId& operator=(const SourceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceId& operator=(SourceId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SourceId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceId* internal_default_instance() {
    return reinterpret_cast<const SourceId*>(
               &_SourceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SourceId& a, SourceId& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SourceId& from);
  void MergeFrom(const SourceId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SourceId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.SourceId";
  }
  protected:
  explicit SourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
  };
  // string sourceId = 1;
  void clear_sourceid() ;
  const std::string& sourceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourceid(Arg_&& arg, Args_... args);
  std::string* mutable_sourceid();
  PROTOBUF_NODISCARD std::string* release_sourceid();
  void set_allocated_sourceid(std::string* ptr);

  private:
  const std::string& _internal_sourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceid(
      const std::string& value);
  std::string* _internal_mutable_sourceid();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.SourceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};// -------------------------------------------------------------------

class GlobalFirmwarePathResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.GlobalFirmwarePathResponse) */ {
 public:
  inline GlobalFirmwarePathResponse() : GlobalFirmwarePathResponse(nullptr) {}
  ~GlobalFirmwarePathResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GlobalFirmwarePathResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalFirmwarePathResponse(const GlobalFirmwarePathResponse& from);
  GlobalFirmwarePathResponse(GlobalFirmwarePathResponse&& from) noexcept
    : GlobalFirmwarePathResponse() {
    *this = ::std::move(from);
  }

  inline GlobalFirmwarePathResponse& operator=(const GlobalFirmwarePathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalFirmwarePathResponse& operator=(GlobalFirmwarePathResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GlobalFirmwarePathResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalFirmwarePathResponse* internal_default_instance() {
    return reinterpret_cast<const GlobalFirmwarePathResponse*>(
               &_GlobalFirmwarePathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalFirmwarePathResponse& a, GlobalFirmwarePathResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalFirmwarePathResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalFirmwarePathResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalFirmwarePathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalFirmwarePathResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GlobalFirmwarePathResponse& from);
  void MergeFrom(const GlobalFirmwarePathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalFirmwarePathResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.GlobalFirmwarePathResponse";
  }
  protected:
  explicit GlobalFirmwarePathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 2,
    kMessageFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string filePath = 2;
  void clear_filepath() ;
  const std::string& filepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filepath(Arg_&& arg, Args_... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* ptr);

  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(
      const std::string& value);
  std::string* _internal_mutable_filepath();

  public:
  // optional string message = 3;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .handEngine.v1.ParsedPathResult result = 1;
  void clear_result() ;
  ::handEngine::v1::ParsedPathResult result() const;
  void set_result(::handEngine::v1::ParsedPathResult value);

  private:
  ::handEngine::v1::ParsedPathResult _internal_result() const;
  void _internal_set_result(::handEngine::v1::ParsedPathResult value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.GlobalFirmwarePathResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};// -------------------------------------------------------------------

class Source final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Source(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Source& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGloveIdsFieldNumber = 2,
    kSourceIdFieldNumber = 1,
  };
  // repeated string gloveIds = 2;
  int gloveids_size() const;
  private:
  int _internal_gloveids_size() const;

  public:
  void clear_gloveids() ;
  const std::string& gloveids(int index) const;
  std::string* mutable_gloveids(int index);
  void set_gloveids(int index, const std::string& value);
  void set_gloveids(int index, std::string&& value);
  void set_gloveids(int index, const char* value);
  void set_gloveids(int index, const char* value, std::size_t size);
  void set_gloveids(int index, absl::string_view value);
  std::string* add_gloveids();
  void add_gloveids(const std::string& value);
  void add_gloveids(std::string&& value);
  void add_gloveids(const char* value);
  void add_gloveids(const char* value, std::size_t size);
  void add_gloveids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gloveids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gloveids();

  private:
  const std::string& _internal_gloveids(int index) const;
  std::string* _internal_add_gloveids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_gloveids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_gloveids();

  public:
  // string sourceId = 1;
  void clear_sourceid() ;
  const std::string& sourceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourceid(Arg_&& arg, Args_... args);
  std::string* mutable_sourceid();
  PROTOBUF_NODISCARD std::string* release_sourceid();
  void set_allocated_sourceid(std::string* ptr);

  private:
  const std::string& _internal_sourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceid(
      const std::string& value);
  std::string* _internal_mutable_sourceid();

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gloveids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};// -------------------------------------------------------------------

class UpdateState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.UpdateState) */ {
 public:
  inline UpdateState() : UpdateState(nullptr) {}
  ~UpdateState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateState(const UpdateState& from);
  UpdateState(UpdateState&& from) noexcept
    : UpdateState() {
    *this = ::std::move(from);
  }

  inline UpdateState& operator=(const UpdateState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateState& operator=(UpdateState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UpdateState& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateState* internal_default_instance() {
    return reinterpret_cast<const UpdateState*>(
               &_UpdateState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateState& a, UpdateState& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UpdateState& from);
  void MergeFrom(const UpdateState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.UpdateState";
  }
  protected:
  explicit UpdateState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobActionsFieldNumber = 2,
    kFirmwarePathFieldNumber = 1,
    kMessageFieldNumber = 5,
    kStatusFieldNumber = 3,
    kProgressFieldNumber = 4,
  };
  // repeated .handEngine.v1.UpdateAction jobActions = 2;
  int jobactions_size() const;
  private:
  int _internal_jobactions_size() const;

  public:
  void clear_jobactions() ;
  public:
  ::handEngine::v1::UpdateAction jobactions(int index) const;
  void set_jobactions(int index, ::handEngine::v1::UpdateAction value);
  void add_jobactions(::handEngine::v1::UpdateAction value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& jobactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_jobactions();

  private:
  ::handEngine::v1::UpdateAction _internal_jobactions(int index) const;
  void _internal_add_jobactions(::handEngine::v1::UpdateAction value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_jobactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_jobactions();

  public:
  // string firmwarePath = 1;
  void clear_firmwarepath() ;
  const std::string& firmwarepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firmwarepath(Arg_&& arg, Args_... args);
  std::string* mutable_firmwarepath();
  PROTOBUF_NODISCARD std::string* release_firmwarepath();
  void set_allocated_firmwarepath(std::string* ptr);

  private:
  const std::string& _internal_firmwarepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmwarepath(
      const std::string& value);
  std::string* _internal_mutable_firmwarepath();

  public:
  // optional string message = 5;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .handEngine.v1.UpdateStatus status = 3;
  void clear_status() ;
  ::handEngine::v1::UpdateStatus status() const;
  void set_status(::handEngine::v1::UpdateStatus value);

  private:
  ::handEngine::v1::UpdateStatus _internal_status() const;
  void _internal_set_status(::handEngine::v1::UpdateStatus value);

  public:
  // optional int32 progress = 4;
  bool has_progress() const;
  void clear_progress() ;
  ::int32_t progress() const;
  void set_progress(::int32_t value);

  private:
  ::int32_t _internal_progress() const;
  void _internal_set_progress(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.UpdateState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> jobactions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _jobactions_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwarepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int status_;
    ::int32_t progress_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};// -------------------------------------------------------------------

class UpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  ~UpdateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .handEngine.v1.Source source = 1;
  bool has_source() const;
  void clear_source() ;
  const ::handEngine::v1::Source& source() const;
  PROTOBUF_NODISCARD ::handEngine::v1::Source* release_source();
  ::handEngine::v1::Source* mutable_source();
  void set_allocated_source(::handEngine::v1::Source* source);
  private:
  const ::handEngine::v1::Source& _internal_source() const;
  ::handEngine::v1::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::handEngine::v1::Source* source);
  ::handEngine::v1::Source* unsafe_arena_release_source();
  // .handEngine.v1.UpdateState state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::handEngine::v1::UpdateState& state() const;
  PROTOBUF_NODISCARD ::handEngine::v1::UpdateState* release_state();
  ::handEngine::v1::UpdateState* mutable_state();
  void set_allocated_state(::handEngine::v1::UpdateState* state);
  private:
  const ::handEngine::v1::UpdateState& _internal_state() const;
  ::handEngine::v1::UpdateState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::handEngine::v1::UpdateState* state);
  ::handEngine::v1::UpdateState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:handEngine.v1.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::handEngine::v1::Source* source_;
    ::handEngine::v1::UpdateState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fupdate_2dfirmware_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GlobalFirmwarePathRequest

// string path = 1;
inline void GlobalFirmwarePathRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& GlobalFirmwarePathRequest::path() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GlobalFirmwarePathRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GlobalFirmwarePathRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GlobalFirmwarePathRequest.path)
}
inline std::string* GlobalFirmwarePathRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GlobalFirmwarePathRequest.path)
  return _s;
}
inline const std::string& GlobalFirmwarePathRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void GlobalFirmwarePathRequest::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathRequest::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathRequest::release_path() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GlobalFirmwarePathRequest.path)
  return _impl_.path_.Release();
}
inline void GlobalFirmwarePathRequest::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GlobalFirmwarePathRequest.path)
}

// -------------------------------------------------------------------

// SourceId

// string sourceId = 1;
inline void SourceId::clear_sourceid() {
  _impl_.sourceid_.ClearToEmpty();
}
inline const std::string& SourceId::sourceid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.SourceId.sourceId)
  return _internal_sourceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SourceId::set_sourceid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sourceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.SourceId.sourceId)
}
inline std::string* SourceId::mutable_sourceid() {
  std::string* _s = _internal_mutable_sourceid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.SourceId.sourceId)
  return _s;
}
inline const std::string& SourceId::_internal_sourceid() const {
  return _impl_.sourceid_.Get();
}
inline void SourceId::_internal_set_sourceid(const std::string& value) {
  ;


  _impl_.sourceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceId::_internal_mutable_sourceid() {
  ;
  return _impl_.sourceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SourceId::release_sourceid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.SourceId.sourceId)
  return _impl_.sourceid_.Release();
}
inline void SourceId::set_allocated_sourceid(std::string* value) {
  _impl_.sourceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourceid_.IsDefault()) {
          _impl_.sourceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.SourceId.sourceId)
}

// -------------------------------------------------------------------

// GlobalFirmwarePathResponse

// .handEngine.v1.ParsedPathResult result = 1;
inline void GlobalFirmwarePathResponse::clear_result() {
  _impl_.result_ = 0;
}
inline ::handEngine::v1::ParsedPathResult GlobalFirmwarePathResponse::result() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GlobalFirmwarePathResponse.result)
  return _internal_result();
}
inline void GlobalFirmwarePathResponse::set_result(::handEngine::v1::ParsedPathResult value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.GlobalFirmwarePathResponse.result)
}
inline ::handEngine::v1::ParsedPathResult GlobalFirmwarePathResponse::_internal_result() const {
  return static_cast<::handEngine::v1::ParsedPathResult>(_impl_.result_);
}
inline void GlobalFirmwarePathResponse::_internal_set_result(::handEngine::v1::ParsedPathResult value) {
  ;
  _impl_.result_ = value;
}

// string filePath = 2;
inline void GlobalFirmwarePathResponse::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& GlobalFirmwarePathResponse::filepath() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GlobalFirmwarePathResponse.filePath)
  return _internal_filepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GlobalFirmwarePathResponse::set_filepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.filepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GlobalFirmwarePathResponse.filePath)
}
inline std::string* GlobalFirmwarePathResponse::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GlobalFirmwarePathResponse.filePath)
  return _s;
}
inline const std::string& GlobalFirmwarePathResponse::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void GlobalFirmwarePathResponse::_internal_set_filepath(const std::string& value) {
  ;


  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathResponse::_internal_mutable_filepath() {
  ;
  return _impl_.filepath_.Mutable( GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathResponse::release_filepath() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GlobalFirmwarePathResponse.filePath)
  return _impl_.filepath_.Release();
}
inline void GlobalFirmwarePathResponse::set_allocated_filepath(std::string* value) {
  _impl_.filepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filepath_.IsDefault()) {
          _impl_.filepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GlobalFirmwarePathResponse.filePath)
}

// optional string message = 3;
inline bool GlobalFirmwarePathResponse::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GlobalFirmwarePathResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GlobalFirmwarePathResponse::message() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GlobalFirmwarePathResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GlobalFirmwarePathResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GlobalFirmwarePathResponse.message)
}
inline std::string* GlobalFirmwarePathResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GlobalFirmwarePathResponse.message)
  return _s;
}
inline const std::string& GlobalFirmwarePathResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GlobalFirmwarePathResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* GlobalFirmwarePathResponse::release_message() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GlobalFirmwarePathResponse.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GlobalFirmwarePathResponse::set_allocated_message(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GlobalFirmwarePathResponse.message)
}

// -------------------------------------------------------------------

// Source

// string sourceId = 1;
inline void Source::clear_sourceid() {
  _impl_.sourceid_.ClearToEmpty();
}
inline const std::string& Source::sourceid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Source.sourceId)
  return _internal_sourceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Source::set_sourceid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sourceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.Source.sourceId)
}
inline std::string* Source::mutable_sourceid() {
  std::string* _s = _internal_mutable_sourceid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.Source.sourceId)
  return _s;
}
inline const std::string& Source::_internal_sourceid() const {
  return _impl_.sourceid_.Get();
}
inline void Source::_internal_set_sourceid(const std::string& value) {
  ;


  _impl_.sourceid_.Set(value, GetArenaForAllocation());
}
inline std::string* Source::_internal_mutable_sourceid() {
  ;
  return _impl_.sourceid_.Mutable( GetArenaForAllocation());
}
inline std::string* Source::release_sourceid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.Source.sourceId)
  return _impl_.sourceid_.Release();
}
inline void Source::set_allocated_sourceid(std::string* value) {
  _impl_.sourceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourceid_.IsDefault()) {
          _impl_.sourceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.Source.sourceId)
}

// repeated string gloveIds = 2;
inline int Source::_internal_gloveids_size() const {
  return _impl_.gloveids_.size();
}
inline int Source::gloveids_size() const {
  return _internal_gloveids_size();
}
inline void Source::clear_gloveids() {
  _internal_mutable_gloveids()->Clear();
}
inline std::string* Source::add_gloveids() {
  std::string* _s = _internal_add_gloveids();
  // @@protoc_insertion_point(field_add_mutable:handEngine.v1.Source.gloveIds)
  return _s;
}
inline const std::string& Source::gloveids(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Source.gloveIds)
  return _internal_gloveids(index);
}
inline std::string* Source::mutable_gloveids(int index) {
  // @@protoc_insertion_point(field_mutable:handEngine.v1.Source.gloveIds)
  return _internal_mutable_gloveids()->Mutable(index);
}
inline void Source::set_gloveids(int index, const std::string& value) {
  _internal_mutable_gloveids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Source.gloveIds)
}
inline void Source::set_gloveids(int index, std::string&& value) {
  _internal_mutable_gloveids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:handEngine.v1.Source.gloveIds)
}
inline void Source::set_gloveids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_gloveids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:handEngine.v1.Source.gloveIds)
}
inline void Source::set_gloveids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_gloveids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:handEngine.v1.Source.gloveIds)
}
inline void Source::set_gloveids(int index, absl::string_view value) {
  _internal_mutable_gloveids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:handEngine.v1.Source.gloveIds)
}
inline void Source::add_gloveids(const std::string& value) {
  _internal_mutable_gloveids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.Source.gloveIds)
}
inline void Source::add_gloveids(std::string&& value) {
  _internal_mutable_gloveids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:handEngine.v1.Source.gloveIds)
}
inline void Source::add_gloveids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_gloveids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:handEngine.v1.Source.gloveIds)
}
inline void Source::add_gloveids(const char* value, std::size_t size) {
  _internal_mutable_gloveids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:handEngine.v1.Source.gloveIds)
}
inline void Source::add_gloveids(absl::string_view value) {
  _internal_mutable_gloveids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:handEngine.v1.Source.gloveIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Source::gloveids() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.Source.gloveIds)
  return _internal_gloveids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Source::mutable_gloveids() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.Source.gloveIds)
  return _internal_mutable_gloveids();
}
inline const std::string& Source::_internal_gloveids(int index) const {
  return _internal_gloveids().Get(index);
}
inline std::string* Source::_internal_add_gloveids() {
  return _internal_mutable_gloveids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Source::_internal_gloveids() const {
  return _impl_.gloveids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Source::_internal_mutable_gloveids() {
  return &_impl_.gloveids_;
}

// -------------------------------------------------------------------

// UpdateState

// string firmwarePath = 1;
inline void UpdateState::clear_firmwarepath() {
  _impl_.firmwarepath_.ClearToEmpty();
}
inline const std::string& UpdateState::firmwarepath() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateState.firmwarePath)
  return _internal_firmwarepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateState::set_firmwarepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.firmwarepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.UpdateState.firmwarePath)
}
inline std::string* UpdateState::mutable_firmwarepath() {
  std::string* _s = _internal_mutable_firmwarepath();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.UpdateState.firmwarePath)
  return _s;
}
inline const std::string& UpdateState::_internal_firmwarepath() const {
  return _impl_.firmwarepath_.Get();
}
inline void UpdateState::_internal_set_firmwarepath(const std::string& value) {
  ;


  _impl_.firmwarepath_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateState::_internal_mutable_firmwarepath() {
  ;
  return _impl_.firmwarepath_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateState::release_firmwarepath() {
  // @@protoc_insertion_point(field_release:handEngine.v1.UpdateState.firmwarePath)
  return _impl_.firmwarepath_.Release();
}
inline void UpdateState::set_allocated_firmwarepath(std::string* value) {
  _impl_.firmwarepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firmwarepath_.IsDefault()) {
          _impl_.firmwarepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.UpdateState.firmwarePath)
}

// repeated .handEngine.v1.UpdateAction jobActions = 2;
inline int UpdateState::_internal_jobactions_size() const {
  return _impl_.jobactions_.size();
}
inline int UpdateState::jobactions_size() const {
  return _internal_jobactions_size();
}
inline void UpdateState::clear_jobactions() {
  _internal_mutable_jobactions()->Clear();
}
inline ::handEngine::v1::UpdateAction UpdateState::jobactions(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateState.jobActions)
  return _internal_jobactions(index);
}
inline void UpdateState::set_jobactions(int index, ::handEngine::v1::UpdateAction value) {
  _internal_mutable_jobactions()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.UpdateState.jobActions)
}
inline void UpdateState::add_jobactions(::handEngine::v1::UpdateAction value) {
  _internal_add_jobactions(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.UpdateState.jobActions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& UpdateState::jobactions() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.UpdateState.jobActions)
  return _internal_jobactions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* UpdateState::mutable_jobactions() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.UpdateState.jobActions)
  return _internal_mutable_jobactions();
}
inline ::handEngine::v1::UpdateAction UpdateState::_internal_jobactions(int index) const {
  return static_cast<::handEngine::v1::UpdateAction>(_internal_jobactions().Get(index));
}
inline void UpdateState::_internal_add_jobactions(::handEngine::v1::UpdateAction value) {
  _internal_mutable_jobactions()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& UpdateState::_internal_jobactions() const {
  return _impl_.jobactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* UpdateState::_internal_mutable_jobactions() {
  return &_impl_.jobactions_;
}

// .handEngine.v1.UpdateStatus status = 3;
inline void UpdateState::clear_status() {
  _impl_.status_ = 0;
}
inline ::handEngine::v1::UpdateStatus UpdateState::status() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateState.status)
  return _internal_status();
}
inline void UpdateState::set_status(::handEngine::v1::UpdateStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.UpdateState.status)
}
inline ::handEngine::v1::UpdateStatus UpdateState::_internal_status() const {
  return static_cast<::handEngine::v1::UpdateStatus>(_impl_.status_);
}
inline void UpdateState::_internal_set_status(::handEngine::v1::UpdateStatus value) {
  ;
  _impl_.status_ = value;
}

// optional int32 progress = 4;
inline bool UpdateState::has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UpdateState::clear_progress() {
  _impl_.progress_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t UpdateState::progress() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateState.progress)
  return _internal_progress();
}
inline void UpdateState::set_progress(::int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.UpdateState.progress)
}
inline ::int32_t UpdateState::_internal_progress() const {
  return _impl_.progress_;
}
inline void UpdateState::_internal_set_progress(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.progress_ = value;
}

// optional string message = 5;
inline bool UpdateState::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UpdateState::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateState::message() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateState.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateState::set_message(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.UpdateState.message)
}
inline std::string* UpdateState::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.UpdateState.message)
  return _s;
}
inline const std::string& UpdateState::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UpdateState::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateState::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateState::release_message() {
  // @@protoc_insertion_point(field_release:handEngine.v1.UpdateState.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UpdateState::set_allocated_message(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.UpdateState.message)
}

// -------------------------------------------------------------------

// UpdateResponse

// .handEngine.v1.Source source = 1;
inline bool UpdateResponse::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline void UpdateResponse::clear_source() {
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::handEngine::v1::Source& UpdateResponse::_internal_source() const {
  const ::handEngine::v1::Source* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::Source&>(
      ::handEngine::v1::_Source_default_instance_);
}
inline const ::handEngine::v1::Source& UpdateResponse::source() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateResponse.source)
  return _internal_source();
}
inline void UpdateResponse::unsafe_arena_set_allocated_source(
    ::handEngine::v1::Source* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  if (source) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.UpdateResponse.source)
}
inline ::handEngine::v1::Source* UpdateResponse::release_source() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::Source* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::Source* UpdateResponse::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:handEngine.v1.UpdateResponse.source)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::Source* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::handEngine::v1::Source* UpdateResponse::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::Source>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::handEngine::v1::Source* UpdateResponse::mutable_source() {
  ::handEngine::v1::Source* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.UpdateResponse.source)
  return _msg;
}
inline void UpdateResponse::set_allocated_source(::handEngine::v1::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.UpdateResponse.source)
}

// .handEngine.v1.UpdateState state = 2;
inline bool UpdateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void UpdateResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::handEngine::v1::UpdateState& UpdateResponse::_internal_state() const {
  const ::handEngine::v1::UpdateState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::UpdateState&>(
      ::handEngine::v1::_UpdateState_default_instance_);
}
inline const ::handEngine::v1::UpdateState& UpdateResponse::state() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.UpdateResponse.state)
  return _internal_state();
}
inline void UpdateResponse::unsafe_arena_set_allocated_state(
    ::handEngine::v1::UpdateState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.UpdateResponse.state)
}
inline ::handEngine::v1::UpdateState* UpdateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::UpdateState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::UpdateState* UpdateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:handEngine.v1.UpdateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::UpdateState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::handEngine::v1::UpdateState* UpdateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::UpdateState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::handEngine::v1::UpdateState* UpdateResponse::mutable_state() {
  ::handEngine::v1::UpdateState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.UpdateResponse.state)
  return _msg;
}
inline void UpdateResponse::set_allocated_state(::handEngine::v1::UpdateState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.UpdateResponse.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::handEngine::v1::ParsedPathResult> : std::true_type {};
template <>
struct is_proto_enum<::handEngine::v1::UpdateAction> : std::true_type {};
template <>
struct is_proto_enum<::handEngine::v1::UpdateStatus> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2fupdate_2dfirmware_2eproto_2epb_2eh


