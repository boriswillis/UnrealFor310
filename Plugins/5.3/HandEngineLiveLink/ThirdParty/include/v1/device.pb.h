
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fdevice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fdevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "v1/_api.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2fdevice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fdevice_2eproto {
  static const ::uint32_t offsets[];
};
namespace handEngine {
namespace v1 {
class GloveSourceData;
struct GloveSourceDataDefaultTypeInternal;
extern GloveSourceDataDefaultTypeInternal _GloveSourceData_default_instance_;
class GloveSourceListResponse;
struct GloveSourceListResponseDefaultTypeInternal;
extern GloveSourceListResponseDefaultTypeInternal _GloveSourceListResponse_default_instance_;
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template <>
::handEngine::v1::GloveSourceData* Arena::CreateMaybeMessage<::handEngine::v1::GloveSourceData>(Arena*);
template <>
::handEngine::v1::GloveSourceListResponse* Arena::CreateMaybeMessage<::handEngine::v1::GloveSourceListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace handEngine {
namespace v1 {
enum VersionStatus : int {
  VERSION_STATUS_ERROR = 0,
  VERSION_STATUS_UNKNOWN = 1,
  VERSION_STATUS_BEHIND = 2,
  VERSION_STATUS_UP_TO_DATE = 3,
  VERSION_STATUS_AHEAD = 4,
  VersionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VersionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VersionStatus_IsValid(int value);
constexpr VersionStatus VersionStatus_MIN = static_cast<VersionStatus>(0);
constexpr VersionStatus VersionStatus_MAX = static_cast<VersionStatus>(4);
constexpr int VersionStatus_ARRAYSIZE = 4 + 1;
const std::string& VersionStatus_Name(VersionStatus value);
template <typename T>
const std::string& VersionStatus_Name(T value) {
  static_assert(std::is_same<T, VersionStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VersionStatus_Name().");
  return VersionStatus_Name(static_cast<VersionStatus>(value));
}
const std::string& VersionStatus_Name(VersionStatus value);
bool VersionStatus_Parse(absl::string_view name, VersionStatus* value);

// ===================================================================


// -------------------------------------------------------------------

class GloveSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.GloveSourceData) */ {
 public:
  inline GloveSourceData() : GloveSourceData(nullptr) {}
  ~GloveSourceData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GloveSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GloveSourceData(const GloveSourceData& from);
  GloveSourceData(GloveSourceData&& from) noexcept
    : GloveSourceData() {
    *this = ::std::move(from);
  }

  inline GloveSourceData& operator=(const GloveSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GloveSourceData& operator=(GloveSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GloveSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GloveSourceData* internal_default_instance() {
    return reinterpret_cast<const GloveSourceData*>(
               &_GloveSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GloveSourceData& a, GloveSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(GloveSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GloveSourceData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GloveSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GloveSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GloveSourceData& from);
  void MergeFrom(const GloveSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GloveSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.GloveSourceData";
  }
  protected:
  explicit GloveSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceVersionFieldNumber = 2,
    kGloveIdFieldNumber = 4,
    kGloveVersionFieldNumber = 6,
    kSourceVersionStatusFieldNumber = 3,
    kHandednessFieldNumber = 5,
    kGloveVersionStatusFieldNumber = 7,
  };
  // string sourceId = 1;
  void clear_sourceid() ;
  const std::string& sourceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourceid(Arg_&& arg, Args_... args);
  std::string* mutable_sourceid();
  PROTOBUF_NODISCARD std::string* release_sourceid();
  void set_allocated_sourceid(std::string* ptr);

  private:
  const std::string& _internal_sourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceid(
      const std::string& value);
  std::string* _internal_mutable_sourceid();

  public:
  // string sourceVersion = 2;
  void clear_sourceversion() ;
  const std::string& sourceversion() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourceversion(Arg_&& arg, Args_... args);
  std::string* mutable_sourceversion();
  PROTOBUF_NODISCARD std::string* release_sourceversion();
  void set_allocated_sourceversion(std::string* ptr);

  private:
  const std::string& _internal_sourceversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceversion(
      const std::string& value);
  std::string* _internal_mutable_sourceversion();

  public:
  // string gloveId = 4;
  void clear_gloveid() ;
  const std::string& gloveid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gloveid(Arg_&& arg, Args_... args);
  std::string* mutable_gloveid();
  PROTOBUF_NODISCARD std::string* release_gloveid();
  void set_allocated_gloveid(std::string* ptr);

  private:
  const std::string& _internal_gloveid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gloveid(
      const std::string& value);
  std::string* _internal_mutable_gloveid();

  public:
  // string gloveVersion = 6;
  void clear_gloveversion() ;
  const std::string& gloveversion() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gloveversion(Arg_&& arg, Args_... args);
  std::string* mutable_gloveversion();
  PROTOBUF_NODISCARD std::string* release_gloveversion();
  void set_allocated_gloveversion(std::string* ptr);

  private:
  const std::string& _internal_gloveversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gloveversion(
      const std::string& value);
  std::string* _internal_mutable_gloveversion();

  public:
  // .handEngine.v1.VersionStatus sourceVersionStatus = 3;
  void clear_sourceversionstatus() ;
  ::handEngine::v1::VersionStatus sourceversionstatus() const;
  void set_sourceversionstatus(::handEngine::v1::VersionStatus value);

  private:
  ::handEngine::v1::VersionStatus _internal_sourceversionstatus() const;
  void _internal_set_sourceversionstatus(::handEngine::v1::VersionStatus value);

  public:
  // .handEngine.v1.Handedness handedness = 5;
  void clear_handedness() ;
  ::handEngine::v1::Handedness handedness() const;
  void set_handedness(::handEngine::v1::Handedness value);

  private:
  ::handEngine::v1::Handedness _internal_handedness() const;
  void _internal_set_handedness(::handEngine::v1::Handedness value);

  public:
  // .handEngine.v1.VersionStatus gloveVersionStatus = 7;
  void clear_gloveversionstatus() ;
  ::handEngine::v1::VersionStatus gloveversionstatus() const;
  void set_gloveversionstatus(::handEngine::v1::VersionStatus value);

  private:
  ::handEngine::v1::VersionStatus _internal_gloveversionstatus() const;
  void _internal_set_gloveversionstatus(::handEngine::v1::VersionStatus value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.GloveSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gloveid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gloveversion_;
    int sourceversionstatus_;
    int handedness_;
    int gloveversionstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fdevice_2eproto;
};// -------------------------------------------------------------------

class GloveSourceListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.GloveSourceListResponse) */ {
 public:
  inline GloveSourceListResponse() : GloveSourceListResponse(nullptr) {}
  ~GloveSourceListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GloveSourceListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GloveSourceListResponse(const GloveSourceListResponse& from);
  GloveSourceListResponse(GloveSourceListResponse&& from) noexcept
    : GloveSourceListResponse() {
    *this = ::std::move(from);
  }

  inline GloveSourceListResponse& operator=(const GloveSourceListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GloveSourceListResponse& operator=(GloveSourceListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GloveSourceListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GloveSourceListResponse* internal_default_instance() {
    return reinterpret_cast<const GloveSourceListResponse*>(
               &_GloveSourceListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GloveSourceListResponse& a, GloveSourceListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GloveSourceListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GloveSourceListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GloveSourceListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GloveSourceListResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GloveSourceListResponse& from);
  void MergeFrom(const GloveSourceListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GloveSourceListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.GloveSourceListResponse";
  }
  protected:
  explicit GloveSourceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGloveSourceDataFieldNumber = 1,
  };
  // repeated .handEngine.v1.GloveSourceData gloveSourceData = 1;
  int glovesourcedata_size() const;
  private:
  int _internal_glovesourcedata_size() const;

  public:
  void clear_glovesourcedata() ;
  ::handEngine::v1::GloveSourceData* mutable_glovesourcedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::GloveSourceData >*
      mutable_glovesourcedata();
  private:
  const ::handEngine::v1::GloveSourceData& _internal_glovesourcedata(int index) const;
  ::handEngine::v1::GloveSourceData* _internal_add_glovesourcedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::GloveSourceData>& _internal_glovesourcedata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::GloveSourceData>* _internal_mutable_glovesourcedata();
  public:
  const ::handEngine::v1::GloveSourceData& glovesourcedata(int index) const;
  ::handEngine::v1::GloveSourceData* add_glovesourcedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::GloveSourceData >&
      glovesourcedata() const;
  // @@protoc_insertion_point(class_scope:handEngine.v1.GloveSourceListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::GloveSourceData > glovesourcedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fdevice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GloveSourceData

// string sourceId = 1;
inline void GloveSourceData::clear_sourceid() {
  _impl_.sourceid_.ClearToEmpty();
}
inline const std::string& GloveSourceData::sourceid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.sourceId)
  return _internal_sourceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GloveSourceData::set_sourceid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sourceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.sourceId)
}
inline std::string* GloveSourceData::mutable_sourceid() {
  std::string* _s = _internal_mutable_sourceid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GloveSourceData.sourceId)
  return _s;
}
inline const std::string& GloveSourceData::_internal_sourceid() const {
  return _impl_.sourceid_.Get();
}
inline void GloveSourceData::_internal_set_sourceid(const std::string& value) {
  ;


  _impl_.sourceid_.Set(value, GetArenaForAllocation());
}
inline std::string* GloveSourceData::_internal_mutable_sourceid() {
  ;
  return _impl_.sourceid_.Mutable( GetArenaForAllocation());
}
inline std::string* GloveSourceData::release_sourceid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GloveSourceData.sourceId)
  return _impl_.sourceid_.Release();
}
inline void GloveSourceData::set_allocated_sourceid(std::string* value) {
  _impl_.sourceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourceid_.IsDefault()) {
          _impl_.sourceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GloveSourceData.sourceId)
}

// string sourceVersion = 2;
inline void GloveSourceData::clear_sourceversion() {
  _impl_.sourceversion_.ClearToEmpty();
}
inline const std::string& GloveSourceData::sourceversion() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.sourceVersion)
  return _internal_sourceversion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GloveSourceData::set_sourceversion(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sourceversion_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.sourceVersion)
}
inline std::string* GloveSourceData::mutable_sourceversion() {
  std::string* _s = _internal_mutable_sourceversion();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GloveSourceData.sourceVersion)
  return _s;
}
inline const std::string& GloveSourceData::_internal_sourceversion() const {
  return _impl_.sourceversion_.Get();
}
inline void GloveSourceData::_internal_set_sourceversion(const std::string& value) {
  ;


  _impl_.sourceversion_.Set(value, GetArenaForAllocation());
}
inline std::string* GloveSourceData::_internal_mutable_sourceversion() {
  ;
  return _impl_.sourceversion_.Mutable( GetArenaForAllocation());
}
inline std::string* GloveSourceData::release_sourceversion() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GloveSourceData.sourceVersion)
  return _impl_.sourceversion_.Release();
}
inline void GloveSourceData::set_allocated_sourceversion(std::string* value) {
  _impl_.sourceversion_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourceversion_.IsDefault()) {
          _impl_.sourceversion_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GloveSourceData.sourceVersion)
}

// .handEngine.v1.VersionStatus sourceVersionStatus = 3;
inline void GloveSourceData::clear_sourceversionstatus() {
  _impl_.sourceversionstatus_ = 0;
}
inline ::handEngine::v1::VersionStatus GloveSourceData::sourceversionstatus() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.sourceVersionStatus)
  return _internal_sourceversionstatus();
}
inline void GloveSourceData::set_sourceversionstatus(::handEngine::v1::VersionStatus value) {
   _internal_set_sourceversionstatus(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.sourceVersionStatus)
}
inline ::handEngine::v1::VersionStatus GloveSourceData::_internal_sourceversionstatus() const {
  return static_cast<::handEngine::v1::VersionStatus>(_impl_.sourceversionstatus_);
}
inline void GloveSourceData::_internal_set_sourceversionstatus(::handEngine::v1::VersionStatus value) {
  ;
  _impl_.sourceversionstatus_ = value;
}

// string gloveId = 4;
inline void GloveSourceData::clear_gloveid() {
  _impl_.gloveid_.ClearToEmpty();
}
inline const std::string& GloveSourceData::gloveid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.gloveId)
  return _internal_gloveid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GloveSourceData::set_gloveid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gloveid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.gloveId)
}
inline std::string* GloveSourceData::mutable_gloveid() {
  std::string* _s = _internal_mutable_gloveid();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GloveSourceData.gloveId)
  return _s;
}
inline const std::string& GloveSourceData::_internal_gloveid() const {
  return _impl_.gloveid_.Get();
}
inline void GloveSourceData::_internal_set_gloveid(const std::string& value) {
  ;


  _impl_.gloveid_.Set(value, GetArenaForAllocation());
}
inline std::string* GloveSourceData::_internal_mutable_gloveid() {
  ;
  return _impl_.gloveid_.Mutable( GetArenaForAllocation());
}
inline std::string* GloveSourceData::release_gloveid() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GloveSourceData.gloveId)
  return _impl_.gloveid_.Release();
}
inline void GloveSourceData::set_allocated_gloveid(std::string* value) {
  _impl_.gloveid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gloveid_.IsDefault()) {
          _impl_.gloveid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GloveSourceData.gloveId)
}

// .handEngine.v1.Handedness handedness = 5;
inline void GloveSourceData::clear_handedness() {
  _impl_.handedness_ = 0;
}
inline ::handEngine::v1::Handedness GloveSourceData::handedness() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.handedness)
  return _internal_handedness();
}
inline void GloveSourceData::set_handedness(::handEngine::v1::Handedness value) {
   _internal_set_handedness(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.handedness)
}
inline ::handEngine::v1::Handedness GloveSourceData::_internal_handedness() const {
  return static_cast<::handEngine::v1::Handedness>(_impl_.handedness_);
}
inline void GloveSourceData::_internal_set_handedness(::handEngine::v1::Handedness value) {
  ;
  _impl_.handedness_ = value;
}

// string gloveVersion = 6;
inline void GloveSourceData::clear_gloveversion() {
  _impl_.gloveversion_.ClearToEmpty();
}
inline const std::string& GloveSourceData::gloveversion() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.gloveVersion)
  return _internal_gloveversion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GloveSourceData::set_gloveversion(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gloveversion_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.gloveVersion)
}
inline std::string* GloveSourceData::mutable_gloveversion() {
  std::string* _s = _internal_mutable_gloveversion();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GloveSourceData.gloveVersion)
  return _s;
}
inline const std::string& GloveSourceData::_internal_gloveversion() const {
  return _impl_.gloveversion_.Get();
}
inline void GloveSourceData::_internal_set_gloveversion(const std::string& value) {
  ;


  _impl_.gloveversion_.Set(value, GetArenaForAllocation());
}
inline std::string* GloveSourceData::_internal_mutable_gloveversion() {
  ;
  return _impl_.gloveversion_.Mutable( GetArenaForAllocation());
}
inline std::string* GloveSourceData::release_gloveversion() {
  // @@protoc_insertion_point(field_release:handEngine.v1.GloveSourceData.gloveVersion)
  return _impl_.gloveversion_.Release();
}
inline void GloveSourceData::set_allocated_gloveversion(std::string* value) {
  _impl_.gloveversion_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gloveversion_.IsDefault()) {
          _impl_.gloveversion_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.GloveSourceData.gloveVersion)
}

// .handEngine.v1.VersionStatus gloveVersionStatus = 7;
inline void GloveSourceData::clear_gloveversionstatus() {
  _impl_.gloveversionstatus_ = 0;
}
inline ::handEngine::v1::VersionStatus GloveSourceData::gloveversionstatus() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceData.gloveVersionStatus)
  return _internal_gloveversionstatus();
}
inline void GloveSourceData::set_gloveversionstatus(::handEngine::v1::VersionStatus value) {
   _internal_set_gloveversionstatus(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.GloveSourceData.gloveVersionStatus)
}
inline ::handEngine::v1::VersionStatus GloveSourceData::_internal_gloveversionstatus() const {
  return static_cast<::handEngine::v1::VersionStatus>(_impl_.gloveversionstatus_);
}
inline void GloveSourceData::_internal_set_gloveversionstatus(::handEngine::v1::VersionStatus value) {
  ;
  _impl_.gloveversionstatus_ = value;
}

// -------------------------------------------------------------------

// GloveSourceListResponse

// repeated .handEngine.v1.GloveSourceData gloveSourceData = 1;
inline int GloveSourceListResponse::_internal_glovesourcedata_size() const {
  return _impl_.glovesourcedata_.size();
}
inline int GloveSourceListResponse::glovesourcedata_size() const {
  return _internal_glovesourcedata_size();
}
inline void GloveSourceListResponse::clear_glovesourcedata() {
  _internal_mutable_glovesourcedata()->Clear();
}
inline ::handEngine::v1::GloveSourceData* GloveSourceListResponse::mutable_glovesourcedata(int index) {
  // @@protoc_insertion_point(field_mutable:handEngine.v1.GloveSourceListResponse.gloveSourceData)
  return _internal_mutable_glovesourcedata()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::GloveSourceData >*
GloveSourceListResponse::mutable_glovesourcedata() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.GloveSourceListResponse.gloveSourceData)
  return _internal_mutable_glovesourcedata();
}
inline const ::handEngine::v1::GloveSourceData& GloveSourceListResponse::_internal_glovesourcedata(int index) const {
  return _internal_glovesourcedata().Get(index);
}
inline const ::handEngine::v1::GloveSourceData& GloveSourceListResponse::glovesourcedata(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.GloveSourceListResponse.gloveSourceData)
  return _internal_glovesourcedata(index);
}
inline ::handEngine::v1::GloveSourceData* GloveSourceListResponse::_internal_add_glovesourcedata() {
  return _internal_mutable_glovesourcedata()->Add();
}
inline ::handEngine::v1::GloveSourceData* GloveSourceListResponse::add_glovesourcedata() {
  ::handEngine::v1::GloveSourceData* _add = _internal_add_glovesourcedata();
  // @@protoc_insertion_point(field_add:handEngine.v1.GloveSourceListResponse.gloveSourceData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::GloveSourceData >&
GloveSourceListResponse::glovesourcedata() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.GloveSourceListResponse.gloveSourceData)
  return _internal_glovesourcedata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::GloveSourceData>&
GloveSourceListResponse::_internal_glovesourcedata() const {
  return _impl_.glovesourcedata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::GloveSourceData>*
GloveSourceListResponse::_internal_mutable_glovesourcedata() {
  return &_impl_.glovesourcedata_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::handEngine::v1::VersionStatus> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2fdevice_2eproto_2epb_2eh

