// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/license.proto
#include "EnableGrpcIncludes.h"
#include "v1/license.pb.h"
#include "v1/license.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "DisableGrpcIncludes.h"
namespace handEngine {
namespace v1 {

static const char* LicenseService_method_names[] = {
  "/handEngine.v1.LicenseService/GetLicenseKey",
  "/handEngine.v1.LicenseService/ActivateDevice",
};

std::unique_ptr< LicenseService::Stub> LicenseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LicenseService::Stub> stub(new LicenseService::Stub(channel, options));
  return stub;
}

LicenseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLicenseKey_(LicenseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateDevice_(LicenseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LicenseService::Stub::GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::handEngine::v1::LicenseKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLicenseKey_, context, request, response);
}

void LicenseService::Stub::async::GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLicenseKey_, context, request, response, std::move(f));
}

void LicenseService::Stub::async::GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLicenseKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>* LicenseService::Stub::PrepareAsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::LicenseKeyResponse, ::handEngine::v1::LicenseKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLicenseKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>* LicenseService::Stub::AsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLicenseKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LicenseService::Stub::ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::handEngine::v1::ActivateDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateDevice_, context, request, response);
}

void LicenseService::Stub::async::ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateDevice_, context, request, response, std::move(f));
}

void LicenseService::Stub::async::ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>* LicenseService::Stub::PrepareAsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::handEngine::v1::ActivateDeviceResponse, ::handEngine::v1::ActivateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>* LicenseService::Stub::AsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

LicenseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LicenseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LicenseService::Service, ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LicenseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::LicenseKeyRequest* req,
             ::handEngine::v1::LicenseKeyResponse* resp) {
               return service->GetLicenseKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LicenseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LicenseService::Service, ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LicenseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::ActivateDeviceRequest* req,
             ::handEngine::v1::ActivateDeviceResponse* resp) {
               return service->ActivateDevice(ctx, req, resp);
             }, this)));
}

LicenseService::Service::~Service() {
}

::grpc::Status LicenseService::Service::GetLicenseKey(::grpc::ServerContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LicenseService::Service::ActivateDevice(::grpc::ServerContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handEngine
}  // namespace v1

