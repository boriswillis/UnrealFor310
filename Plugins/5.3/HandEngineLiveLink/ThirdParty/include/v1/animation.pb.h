
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/animation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fanimation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fanimation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "v1/_api.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2fanimation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fanimation_2eproto {
  static const ::uint32_t offsets[];
};
namespace handEngine {
namespace v1 {
class HandAnimationRequest;
struct HandAnimationRequestDefaultTypeInternal;
extern HandAnimationRequestDefaultTypeInternal _HandAnimationRequest_default_instance_;
class HandAnimationResponse;
struct HandAnimationResponseDefaultTypeInternal;
extern HandAnimationResponseDefaultTypeInternal _HandAnimationResponse_default_instance_;
class JointResponse;
struct JointResponseDefaultTypeInternal;
extern JointResponseDefaultTypeInternal _JointResponse_default_instance_;
class PoseInformationResponse;
struct PoseInformationResponseDefaultTypeInternal;
extern PoseInformationResponseDefaultTypeInternal _PoseInformationResponse_default_instance_;
class Sliders;
struct SlidersDefaultTypeInternal;
extern SlidersDefaultTypeInternal _Sliders_default_instance_;
class StageAnimationRequest;
struct StageAnimationRequestDefaultTypeInternal;
extern StageAnimationRequestDefaultTypeInternal _StageAnimationRequest_default_instance_;
class StageAnimationResponse;
struct StageAnimationResponseDefaultTypeInternal;
extern StageAnimationResponseDefaultTypeInternal _StageAnimationResponse_default_instance_;
class StreamSettings;
struct StreamSettingsDefaultTypeInternal;
extern StreamSettingsDefaultTypeInternal _StreamSettings_default_instance_;
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template <>
::handEngine::v1::HandAnimationRequest* Arena::CreateMaybeMessage<::handEngine::v1::HandAnimationRequest>(Arena*);
template <>
::handEngine::v1::HandAnimationResponse* Arena::CreateMaybeMessage<::handEngine::v1::HandAnimationResponse>(Arena*);
template <>
::handEngine::v1::JointResponse* Arena::CreateMaybeMessage<::handEngine::v1::JointResponse>(Arena*);
template <>
::handEngine::v1::PoseInformationResponse* Arena::CreateMaybeMessage<::handEngine::v1::PoseInformationResponse>(Arena*);
template <>
::handEngine::v1::Sliders* Arena::CreateMaybeMessage<::handEngine::v1::Sliders>(Arena*);
template <>
::handEngine::v1::StageAnimationRequest* Arena::CreateMaybeMessage<::handEngine::v1::StageAnimationRequest>(Arena*);
template <>
::handEngine::v1::StageAnimationResponse* Arena::CreateMaybeMessage<::handEngine::v1::StageAnimationResponse>(Arena*);
template <>
::handEngine::v1::StreamSettings* Arena::CreateMaybeMessage<::handEngine::v1::StreamSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace handEngine {
namespace v1 {
enum CoordinateSystem : int {
  LOCAL = 0,
  GLOBAL = 1,
  CoordinateSystem_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CoordinateSystem_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CoordinateSystem_IsValid(int value);
constexpr CoordinateSystem CoordinateSystem_MIN = static_cast<CoordinateSystem>(0);
constexpr CoordinateSystem CoordinateSystem_MAX = static_cast<CoordinateSystem>(1);
constexpr int CoordinateSystem_ARRAYSIZE = 1 + 1;
const std::string& CoordinateSystem_Name(CoordinateSystem value);
template <typename T>
const std::string& CoordinateSystem_Name(T value) {
  static_assert(std::is_same<T, CoordinateSystem>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CoordinateSystem_Name().");
  return CoordinateSystem_Name(static_cast<CoordinateSystem>(value));
}
const std::string& CoordinateSystem_Name(CoordinateSystem value);
bool CoordinateSystem_Parse(absl::string_view name, CoordinateSystem* value);

// ===================================================================


// -------------------------------------------------------------------

class HandAnimationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.HandAnimationRequest) */ {
 public:
  inline HandAnimationRequest() : HandAnimationRequest(nullptr) {}
  ~HandAnimationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HandAnimationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandAnimationRequest(const HandAnimationRequest& from);
  HandAnimationRequest(HandAnimationRequest&& from) noexcept
    : HandAnimationRequest() {
    *this = ::std::move(from);
  }

  inline HandAnimationRequest& operator=(const HandAnimationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandAnimationRequest& operator=(HandAnimationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HandAnimationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandAnimationRequest* internal_default_instance() {
    return reinterpret_cast<const HandAnimationRequest*>(
               &_HandAnimationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HandAnimationRequest& a, HandAnimationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandAnimationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandAnimationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandAnimationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandAnimationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HandAnimationRequest& from);
  void MergeFrom(const HandAnimationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandAnimationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.HandAnimationRequest";
  }
  protected:
  explicit HandAnimationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileMetaFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // .handEngine.v1.ProfileMeta profileMeta = 1;
  bool has_profilemeta() const;
  void clear_profilemeta() ;
  const ::handEngine::v1::ProfileMeta& profilemeta() const;
  PROTOBUF_NODISCARD ::handEngine::v1::ProfileMeta* release_profilemeta();
  ::handEngine::v1::ProfileMeta* mutable_profilemeta();
  void set_allocated_profilemeta(::handEngine::v1::ProfileMeta* profilemeta);
  private:
  const ::handEngine::v1::ProfileMeta& _internal_profilemeta() const;
  ::handEngine::v1::ProfileMeta* _internal_mutable_profilemeta();
  public:
  void unsafe_arena_set_allocated_profilemeta(
      ::handEngine::v1::ProfileMeta* profilemeta);
  ::handEngine::v1::ProfileMeta* unsafe_arena_release_profilemeta();
  // .handEngine.v1.StreamSettings settings = 2;
  bool has_settings() const;
  void clear_settings() ;
  const ::handEngine::v1::StreamSettings& settings() const;
  PROTOBUF_NODISCARD ::handEngine::v1::StreamSettings* release_settings();
  ::handEngine::v1::StreamSettings* mutable_settings();
  void set_allocated_settings(::handEngine::v1::StreamSettings* settings);
  private:
  const ::handEngine::v1::StreamSettings& _internal_settings() const;
  ::handEngine::v1::StreamSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::handEngine::v1::StreamSettings* settings);
  ::handEngine::v1::StreamSettings* unsafe_arena_release_settings();
  // @@protoc_insertion_point(class_scope:handEngine.v1.HandAnimationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::handEngine::v1::ProfileMeta* profilemeta_;
    ::handEngine::v1::StreamSettings* settings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class StageAnimationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.StageAnimationRequest) */ {
 public:
  inline StageAnimationRequest() : StageAnimationRequest(nullptr) {}
  ~StageAnimationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StageAnimationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StageAnimationRequest(const StageAnimationRequest& from);
  StageAnimationRequest(StageAnimationRequest&& from) noexcept
    : StageAnimationRequest() {
    *this = ::std::move(from);
  }

  inline StageAnimationRequest& operator=(const StageAnimationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageAnimationRequest& operator=(StageAnimationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StageAnimationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StageAnimationRequest* internal_default_instance() {
    return reinterpret_cast<const StageAnimationRequest*>(
               &_StageAnimationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StageAnimationRequest& a, StageAnimationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StageAnimationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageAnimationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StageAnimationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StageAnimationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StageAnimationRequest& from);
  void MergeFrom(const StageAnimationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StageAnimationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.StageAnimationRequest";
  }
  protected:
  explicit StageAnimationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileMetaFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // repeated .handEngine.v1.ProfileMeta profileMeta = 1;
  int profilemeta_size() const;
  private:
  int _internal_profilemeta_size() const;

  public:
  void clear_profilemeta() ;
  ::handEngine::v1::ProfileMeta* mutable_profilemeta(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::ProfileMeta >*
      mutable_profilemeta();
  private:
  const ::handEngine::v1::ProfileMeta& _internal_profilemeta(int index) const;
  ::handEngine::v1::ProfileMeta* _internal_add_profilemeta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::ProfileMeta>& _internal_profilemeta() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::ProfileMeta>* _internal_mutable_profilemeta();
  public:
  const ::handEngine::v1::ProfileMeta& profilemeta(int index) const;
  ::handEngine::v1::ProfileMeta* add_profilemeta();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::ProfileMeta >&
      profilemeta() const;
  // .handEngine.v1.StreamSettings settings = 2;
  bool has_settings() const;
  void clear_settings() ;
  const ::handEngine::v1::StreamSettings& settings() const;
  PROTOBUF_NODISCARD ::handEngine::v1::StreamSettings* release_settings();
  ::handEngine::v1::StreamSettings* mutable_settings();
  void set_allocated_settings(::handEngine::v1::StreamSettings* settings);
  private:
  const ::handEngine::v1::StreamSettings& _internal_settings() const;
  ::handEngine::v1::StreamSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::handEngine::v1::StreamSettings* settings);
  ::handEngine::v1::StreamSettings* unsafe_arena_release_settings();
  // @@protoc_insertion_point(class_scope:handEngine.v1.StageAnimationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::ProfileMeta > profilemeta_;
    ::handEngine::v1::StreamSettings* settings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class StreamSettings final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.StreamSettings) */ {
 public:
  inline StreamSettings() : StreamSettings(nullptr) {}
  ~StreamSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamSettings(const StreamSettings& from);
  StreamSettings(StreamSettings&& from) noexcept
    : StreamSettings() {
    *this = ::std::move(from);
  }

  inline StreamSettings& operator=(const StreamSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamSettings& operator=(StreamSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StreamSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamSettings* internal_default_instance() {
    return reinterpret_cast<const StreamSettings*>(
               &_StreamSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamSettings& a, StreamSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamSettings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StreamSettings& from);
  void MergeFrom(const StreamSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.StreamSettings";
  }
  protected:
  explicit StreamSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeMetaCarpalFieldNumber = 1,
    kCoordinateSystemFieldNumber = 2,
  };
  // bool includeMetaCarpal = 1;
  void clear_includemetacarpal() ;
  bool includemetacarpal() const;
  void set_includemetacarpal(bool value);

  private:
  bool _internal_includemetacarpal() const;
  void _internal_set_includemetacarpal(bool value);

  public:
  // .handEngine.v1.CoordinateSystem coordinateSystem = 2;
  void clear_coordinatesystem() ;
  ::handEngine::v1::CoordinateSystem coordinatesystem() const;
  void set_coordinatesystem(::handEngine::v1::CoordinateSystem value);

  private:
  ::handEngine::v1::CoordinateSystem _internal_coordinatesystem() const;
  void _internal_set_coordinatesystem(::handEngine::v1::CoordinateSystem value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.StreamSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool includemetacarpal_;
    int coordinatesystem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class HandAnimationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.HandAnimationResponse) */ {
 public:
  inline HandAnimationResponse() : HandAnimationResponse(nullptr) {}
  ~HandAnimationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HandAnimationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandAnimationResponse(const HandAnimationResponse& from);
  HandAnimationResponse(HandAnimationResponse&& from) noexcept
    : HandAnimationResponse() {
    *this = ::std::move(from);
  }

  inline HandAnimationResponse& operator=(const HandAnimationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandAnimationResponse& operator=(HandAnimationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HandAnimationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandAnimationResponse* internal_default_instance() {
    return reinterpret_cast<const HandAnimationResponse*>(
               &_HandAnimationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HandAnimationResponse& a, HandAnimationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandAnimationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandAnimationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandAnimationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandAnimationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HandAnimationResponse& from);
  void MergeFrom(const HandAnimationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandAnimationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.HandAnimationResponse";
  }
  protected:
  explicit HandAnimationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonesFieldNumber = 3,
    kPerformerNameFieldNumber = 1,
    kTimecodeFieldNumber = 5,
    kPoseInfoFieldNumber = 4,
    kProfileMetaFieldNumber = 6,
    kSourceInfoFieldNumber = 7,
    kSlidersFieldNumber = 8,
    kPerformerIdFieldNumber = 2,
  };
  // repeated .handEngine.v1.JointResponse bones = 3;
  int bones_size() const;
  private:
  int _internal_bones_size() const;

  public:
  void clear_bones() ;
  ::handEngine::v1::JointResponse* mutable_bones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::JointResponse >*
      mutable_bones();
  private:
  const ::handEngine::v1::JointResponse& _internal_bones(int index) const;
  ::handEngine::v1::JointResponse* _internal_add_bones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::JointResponse>& _internal_bones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::JointResponse>* _internal_mutable_bones();
  public:
  const ::handEngine::v1::JointResponse& bones(int index) const;
  ::handEngine::v1::JointResponse* add_bones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::JointResponse >&
      bones() const;
  // string performerName = 1;
  void clear_performername() ;
  const std::string& performername() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_performername(Arg_&& arg, Args_... args);
  std::string* mutable_performername();
  PROTOBUF_NODISCARD std::string* release_performername();
  void set_allocated_performername(std::string* ptr);

  private:
  const std::string& _internal_performername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_performername(
      const std::string& value);
  std::string* _internal_mutable_performername();

  public:
  // string timecode = 5;
  void clear_timecode() ;
  const std::string& timecode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timecode(Arg_&& arg, Args_... args);
  std::string* mutable_timecode();
  PROTOBUF_NODISCARD std::string* release_timecode();
  void set_allocated_timecode(std::string* ptr);

  private:
  const std::string& _internal_timecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timecode(
      const std::string& value);
  std::string* _internal_mutable_timecode();

  public:
  // .handEngine.v1.PoseInformationResponse poseInfo = 4;
  bool has_poseinfo() const;
  void clear_poseinfo() ;
  const ::handEngine::v1::PoseInformationResponse& poseinfo() const;
  PROTOBUF_NODISCARD ::handEngine::v1::PoseInformationResponse* release_poseinfo();
  ::handEngine::v1::PoseInformationResponse* mutable_poseinfo();
  void set_allocated_poseinfo(::handEngine::v1::PoseInformationResponse* poseinfo);
  private:
  const ::handEngine::v1::PoseInformationResponse& _internal_poseinfo() const;
  ::handEngine::v1::PoseInformationResponse* _internal_mutable_poseinfo();
  public:
  void unsafe_arena_set_allocated_poseinfo(
      ::handEngine::v1::PoseInformationResponse* poseinfo);
  ::handEngine::v1::PoseInformationResponse* unsafe_arena_release_poseinfo();
  // .handEngine.v1.ProfileMeta profileMeta = 6;
  bool has_profilemeta() const;
  void clear_profilemeta() ;
  const ::handEngine::v1::ProfileMeta& profilemeta() const;
  PROTOBUF_NODISCARD ::handEngine::v1::ProfileMeta* release_profilemeta();
  ::handEngine::v1::ProfileMeta* mutable_profilemeta();
  void set_allocated_profilemeta(::handEngine::v1::ProfileMeta* profilemeta);
  private:
  const ::handEngine::v1::ProfileMeta& _internal_profilemeta() const;
  ::handEngine::v1::ProfileMeta* _internal_mutable_profilemeta();
  public:
  void unsafe_arena_set_allocated_profilemeta(
      ::handEngine::v1::ProfileMeta* profilemeta);
  ::handEngine::v1::ProfileMeta* unsafe_arena_release_profilemeta();
  // .handEngine.v1.GloveInformationResponse sourceInfo = 7;
  bool has_sourceinfo() const;
  void clear_sourceinfo() ;
  const ::handEngine::v1::GloveInformationResponse& sourceinfo() const;
  PROTOBUF_NODISCARD ::handEngine::v1::GloveInformationResponse* release_sourceinfo();
  ::handEngine::v1::GloveInformationResponse* mutable_sourceinfo();
  void set_allocated_sourceinfo(::handEngine::v1::GloveInformationResponse* sourceinfo);
  private:
  const ::handEngine::v1::GloveInformationResponse& _internal_sourceinfo() const;
  ::handEngine::v1::GloveInformationResponse* _internal_mutable_sourceinfo();
  public:
  void unsafe_arena_set_allocated_sourceinfo(
      ::handEngine::v1::GloveInformationResponse* sourceinfo);
  ::handEngine::v1::GloveInformationResponse* unsafe_arena_release_sourceinfo();
  // optional .handEngine.v1.Sliders sliders = 8;
  bool has_sliders() const;
  void clear_sliders() ;
  const ::handEngine::v1::Sliders& sliders() const;
  PROTOBUF_NODISCARD ::handEngine::v1::Sliders* release_sliders();
  ::handEngine::v1::Sliders* mutable_sliders();
  void set_allocated_sliders(::handEngine::v1::Sliders* sliders);
  private:
  const ::handEngine::v1::Sliders& _internal_sliders() const;
  ::handEngine::v1::Sliders* _internal_mutable_sliders();
  public:
  void unsafe_arena_set_allocated_sliders(
      ::handEngine::v1::Sliders* sliders);
  ::handEngine::v1::Sliders* unsafe_arena_release_sliders();
  // uint32 performerId = 2;
  void clear_performerid() ;
  ::uint32_t performerid() const;
  void set_performerid(::uint32_t value);

  private:
  ::uint32_t _internal_performerid() const;
  void _internal_set_performerid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.HandAnimationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::JointResponse > bones_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr performername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timecode_;
    ::handEngine::v1::PoseInformationResponse* poseinfo_;
    ::handEngine::v1::ProfileMeta* profilemeta_;
    ::handEngine::v1::GloveInformationResponse* sourceinfo_;
    ::handEngine::v1::Sliders* sliders_;
    ::uint32_t performerid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class Sliders final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.Sliders) */ {
 public:
  inline Sliders() : Sliders(nullptr) {}
  ~Sliders() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sliders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sliders(const Sliders& from);
  Sliders(Sliders&& from) noexcept
    : Sliders() {
    *this = ::std::move(from);
  }

  inline Sliders& operator=(const Sliders& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sliders& operator=(Sliders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Sliders& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sliders* internal_default_instance() {
    return reinterpret_cast<const Sliders*>(
               &_Sliders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Sliders& a, Sliders& b) {
    a.Swap(&b);
  }
  inline void Swap(Sliders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sliders* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sliders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sliders>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Sliders& from);
  void MergeFrom(const Sliders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sliders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.Sliders";
  }
  protected:
  explicit Sliders(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTHUMBBEND1FieldNumber = 1,
    kTHUMBBEND2FieldNumber = 2,
    kINDEXBEND1FieldNumber = 3,
    kINDEXBEND2FieldNumber = 4,
    kMIDDLEBEND1FieldNumber = 5,
    kMIDDLEBEND2FieldNumber = 6,
    kTHUMBSPLAYFieldNumber = 7,
    kRINGBEND1FieldNumber = 8,
    kRINGBEND2FieldNumber = 9,
    kPINKYBEND1FieldNumber = 10,
    kPINKYBEND2FieldNumber = 11,
    kGLOBALSPLAYFieldNumber = 12,
    kTHUMBBEND3FieldNumber = 13,
    kINDEXBEND3FieldNumber = 14,
    kMIDDLEBEND3FieldNumber = 15,
    kRINGBEND3FieldNumber = 16,
    kPINKYBEND3FieldNumber = 17,
    kINDEXSPLAYFieldNumber = 18,
    kMIDDLESPLAYFieldNumber = 19,
    kRINGSPLAYFieldNumber = 20,
    kPINKYSPLAYFieldNumber = 21,
  };
  // float THUMB_BEND_1 = 1;
  void clear_thumb_bend_1() ;
  float thumb_bend_1() const;
  void set_thumb_bend_1(float value);

  private:
  float _internal_thumb_bend_1() const;
  void _internal_set_thumb_bend_1(float value);

  public:
  // float THUMB_BEND_2 = 2;
  void clear_thumb_bend_2() ;
  float thumb_bend_2() const;
  void set_thumb_bend_2(float value);

  private:
  float _internal_thumb_bend_2() const;
  void _internal_set_thumb_bend_2(float value);

  public:
  // float INDEX_BEND_1 = 3;
  void clear_index_bend_1() ;
  float index_bend_1() const;
  void set_index_bend_1(float value);

  private:
  float _internal_index_bend_1() const;
  void _internal_set_index_bend_1(float value);

  public:
  // float INDEX_BEND_2 = 4;
  void clear_index_bend_2() ;
  float index_bend_2() const;
  void set_index_bend_2(float value);

  private:
  float _internal_index_bend_2() const;
  void _internal_set_index_bend_2(float value);

  public:
  // float MIDDLE_BEND_1 = 5;
  void clear_middle_bend_1() ;
  float middle_bend_1() const;
  void set_middle_bend_1(float value);

  private:
  float _internal_middle_bend_1() const;
  void _internal_set_middle_bend_1(float value);

  public:
  // float MIDDLE_BEND_2 = 6;
  void clear_middle_bend_2() ;
  float middle_bend_2() const;
  void set_middle_bend_2(float value);

  private:
  float _internal_middle_bend_2() const;
  void _internal_set_middle_bend_2(float value);

  public:
  // float THUMB_SPLAY = 7;
  void clear_thumb_splay() ;
  float thumb_splay() const;
  void set_thumb_splay(float value);

  private:
  float _internal_thumb_splay() const;
  void _internal_set_thumb_splay(float value);

  public:
  // float RING_BEND_1 = 8;
  void clear_ring_bend_1() ;
  float ring_bend_1() const;
  void set_ring_bend_1(float value);

  private:
  float _internal_ring_bend_1() const;
  void _internal_set_ring_bend_1(float value);

  public:
  // float RING_BEND_2 = 9;
  void clear_ring_bend_2() ;
  float ring_bend_2() const;
  void set_ring_bend_2(float value);

  private:
  float _internal_ring_bend_2() const;
  void _internal_set_ring_bend_2(float value);

  public:
  // float PINKY_BEND_1 = 10;
  void clear_pinky_bend_1() ;
  float pinky_bend_1() const;
  void set_pinky_bend_1(float value);

  private:
  float _internal_pinky_bend_1() const;
  void _internal_set_pinky_bend_1(float value);

  public:
  // float PINKY_BEND_2 = 11;
  void clear_pinky_bend_2() ;
  float pinky_bend_2() const;
  void set_pinky_bend_2(float value);

  private:
  float _internal_pinky_bend_2() const;
  void _internal_set_pinky_bend_2(float value);

  public:
  // optional float GLOBAL_SPLAY = 12;
  bool has_global_splay() const;
  void clear_global_splay() ;
  float global_splay() const;
  void set_global_splay(float value);

  private:
  float _internal_global_splay() const;
  void _internal_set_global_splay(float value);

  public:
  // optional float THUMB_BEND_3 = 13;
  bool has_thumb_bend_3() const;
  void clear_thumb_bend_3() ;
  float thumb_bend_3() const;
  void set_thumb_bend_3(float value);

  private:
  float _internal_thumb_bend_3() const;
  void _internal_set_thumb_bend_3(float value);

  public:
  // optional float INDEX_BEND_3 = 14;
  bool has_index_bend_3() const;
  void clear_index_bend_3() ;
  float index_bend_3() const;
  void set_index_bend_3(float value);

  private:
  float _internal_index_bend_3() const;
  void _internal_set_index_bend_3(float value);

  public:
  // optional float MIDDLE_BEND_3 = 15;
  bool has_middle_bend_3() const;
  void clear_middle_bend_3() ;
  float middle_bend_3() const;
  void set_middle_bend_3(float value);

  private:
  float _internal_middle_bend_3() const;
  void _internal_set_middle_bend_3(float value);

  public:
  // optional float RING_BEND_3 = 16;
  bool has_ring_bend_3() const;
  void clear_ring_bend_3() ;
  float ring_bend_3() const;
  void set_ring_bend_3(float value);

  private:
  float _internal_ring_bend_3() const;
  void _internal_set_ring_bend_3(float value);

  public:
  // optional float PINKY_BEND_3 = 17;
  bool has_pinky_bend_3() const;
  void clear_pinky_bend_3() ;
  float pinky_bend_3() const;
  void set_pinky_bend_3(float value);

  private:
  float _internal_pinky_bend_3() const;
  void _internal_set_pinky_bend_3(float value);

  public:
  // optional float INDEX_SPLAY = 18;
  bool has_index_splay() const;
  void clear_index_splay() ;
  float index_splay() const;
  void set_index_splay(float value);

  private:
  float _internal_index_splay() const;
  void _internal_set_index_splay(float value);

  public:
  // optional float MIDDLE_SPLAY = 19;
  bool has_middle_splay() const;
  void clear_middle_splay() ;
  float middle_splay() const;
  void set_middle_splay(float value);

  private:
  float _internal_middle_splay() const;
  void _internal_set_middle_splay(float value);

  public:
  // optional float RING_SPLAY = 20;
  bool has_ring_splay() const;
  void clear_ring_splay() ;
  float ring_splay() const;
  void set_ring_splay(float value);

  private:
  float _internal_ring_splay() const;
  void _internal_set_ring_splay(float value);

  public:
  // optional float PINKY_SPLAY = 21;
  bool has_pinky_splay() const;
  void clear_pinky_splay() ;
  float pinky_splay() const;
  void set_pinky_splay(float value);

  private:
  float _internal_pinky_splay() const;
  void _internal_set_pinky_splay(float value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.Sliders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float thumb_bend_1_;
    float thumb_bend_2_;
    float index_bend_1_;
    float index_bend_2_;
    float middle_bend_1_;
    float middle_bend_2_;
    float thumb_splay_;
    float ring_bend_1_;
    float ring_bend_2_;
    float pinky_bend_1_;
    float pinky_bend_2_;
    float global_splay_;
    float thumb_bend_3_;
    float index_bend_3_;
    float middle_bend_3_;
    float ring_bend_3_;
    float pinky_bend_3_;
    float index_splay_;
    float middle_splay_;
    float ring_splay_;
    float pinky_splay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class StageAnimationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.StageAnimationResponse) */ {
 public:
  inline StageAnimationResponse() : StageAnimationResponse(nullptr) {}
  ~StageAnimationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StageAnimationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StageAnimationResponse(const StageAnimationResponse& from);
  StageAnimationResponse(StageAnimationResponse&& from) noexcept
    : StageAnimationResponse() {
    *this = ::std::move(from);
  }

  inline StageAnimationResponse& operator=(const StageAnimationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageAnimationResponse& operator=(StageAnimationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StageAnimationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StageAnimationResponse* internal_default_instance() {
    return reinterpret_cast<const StageAnimationResponse*>(
               &_StageAnimationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StageAnimationResponse& a, StageAnimationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StageAnimationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageAnimationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StageAnimationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StageAnimationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StageAnimationResponse& from);
  void MergeFrom(const StageAnimationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StageAnimationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.StageAnimationResponse";
  }
  protected:
  explicit StageAnimationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandAnimationsFieldNumber = 1,
  };
  // repeated .handEngine.v1.HandAnimationResponse handAnimations = 1;
  int handanimations_size() const;
  private:
  int _internal_handanimations_size() const;

  public:
  void clear_handanimations() ;
  ::handEngine::v1::HandAnimationResponse* mutable_handanimations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::HandAnimationResponse >*
      mutable_handanimations();
  private:
  const ::handEngine::v1::HandAnimationResponse& _internal_handanimations(int index) const;
  ::handEngine::v1::HandAnimationResponse* _internal_add_handanimations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::HandAnimationResponse>& _internal_handanimations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::HandAnimationResponse>* _internal_mutable_handanimations();
  public:
  const ::handEngine::v1::HandAnimationResponse& handanimations(int index) const;
  ::handEngine::v1::HandAnimationResponse* add_handanimations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::HandAnimationResponse >&
      handanimations() const;
  // @@protoc_insertion_point(class_scope:handEngine.v1.StageAnimationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::HandAnimationResponse > handanimations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class JointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.JointResponse) */ {
 public:
  inline JointResponse() : JointResponse(nullptr) {}
  ~JointResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointResponse(const JointResponse& from);
  JointResponse(JointResponse&& from) noexcept
    : JointResponse() {
    *this = ::std::move(from);
  }

  inline JointResponse& operator=(const JointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointResponse& operator=(JointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const JointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointResponse* internal_default_instance() {
    return reinterpret_cast<const JointResponse*>(
               &_JointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JointResponse& a, JointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const JointResponse& from);
  void MergeFrom(const JointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.JointResponse";
  }
  protected:
  explicit JointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kPreRotationFieldNumber = 3,
    kPostRotationFieldNumber = 4,
    kTranslationFieldNumber = 5,
    kScaleFieldNumber = 6,
    kNameFieldNumber = 1,
    kParentFieldNumber = 7,
  };
  // repeated float rotation = 2;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;

  public:
  void clear_rotation() ;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_rotation();

  private:
  float _internal_rotation(int index) const;
  void _internal_add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_rotation();

  public:
  // repeated float preRotation = 3;
  int prerotation_size() const;
  private:
  int _internal_prerotation_size() const;

  public:
  void clear_prerotation() ;
  float prerotation(int index) const;
  void set_prerotation(int index, float value);
  void add_prerotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& prerotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_prerotation();

  private:
  float _internal_prerotation(int index) const;
  void _internal_add_prerotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_prerotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_prerotation();

  public:
  // repeated float postRotation = 4;
  int postrotation_size() const;
  private:
  int _internal_postrotation_size() const;

  public:
  void clear_postrotation() ;
  float postrotation(int index) const;
  void set_postrotation(int index, float value);
  void add_postrotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& postrotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_postrotation();

  private:
  float _internal_postrotation(int index) const;
  void _internal_add_postrotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_postrotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_postrotation();

  public:
  // repeated float translation = 5;
  int translation_size() const;
  private:
  int _internal_translation_size() const;

  public:
  void clear_translation() ;
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_translation();

  private:
  float _internal_translation(int index) const;
  void _internal_add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_translation();

  public:
  // repeated float scale = 6;
  int scale_size() const;
  private:
  int _internal_scale_size() const;

  public:
  void clear_scale() ;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_scale();

  private:
  float _internal_scale(int index) const;
  void _internal_add_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_scale();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 parent = 7;
  void clear_parent() ;
  ::int32_t parent() const;
  void set_parent(::int32_t value);

  private:
  ::int32_t _internal_parent() const;
  void _internal_set_parent(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.JointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> rotation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> prerotation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> postrotation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> translation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> scale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};// -------------------------------------------------------------------

class PoseInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:handEngine.v1.PoseInformationResponse) */ {
 public:
  inline PoseInformationResponse() : PoseInformationResponse(nullptr) {}
  ~PoseInformationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PoseInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseInformationResponse(const PoseInformationResponse& from);
  PoseInformationResponse(PoseInformationResponse&& from) noexcept
    : PoseInformationResponse() {
    *this = ::std::move(from);
  }

  inline PoseInformationResponse& operator=(const PoseInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseInformationResponse& operator=(PoseInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PoseInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseInformationResponse* internal_default_instance() {
    return reinterpret_cast<const PoseInformationResponse*>(
               &_PoseInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PoseInformationResponse& a, PoseInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseInformationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseInformationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PoseInformationResponse& from);
  void MergeFrom(const PoseInformationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "handEngine.v1.PoseInformationResponse";
  }
  protected:
  explicit PoseInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseNameFieldNumber = 1,
    kPoseIdFieldNumber = 2,
    kPoseScoreFieldNumber = 3,
    kPoseActiveFieldNumber = 4,
  };
  // string poseName = 1;
  void clear_posename() ;
  const std::string& posename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_posename(Arg_&& arg, Args_... args);
  std::string* mutable_posename();
  PROTOBUF_NODISCARD std::string* release_posename();
  void set_allocated_posename(std::string* ptr);

  private:
  const std::string& _internal_posename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posename(
      const std::string& value);
  std::string* _internal_mutable_posename();

  public:
  // int32 poseId = 2;
  void clear_poseid() ;
  ::int32_t poseid() const;
  void set_poseid(::int32_t value);

  private:
  ::int32_t _internal_poseid() const;
  void _internal_set_poseid(::int32_t value);

  public:
  // float poseScore = 3;
  void clear_posescore() ;
  float posescore() const;
  void set_posescore(float value);

  private:
  float _internal_posescore() const;
  void _internal_set_posescore(float value);

  public:
  // bool poseActive = 4;
  void clear_poseactive() ;
  bool poseactive() const;
  void set_poseactive(bool value);

  private:
  bool _internal_poseactive() const;
  void _internal_set_poseactive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:handEngine.v1.PoseInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posename_;
    ::int32_t poseid_;
    float posescore_;
    bool poseactive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fanimation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HandAnimationRequest

// .handEngine.v1.ProfileMeta profileMeta = 1;
inline bool HandAnimationRequest::has_profilemeta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profilemeta_ != nullptr);
  return value;
}
inline const ::handEngine::v1::ProfileMeta& HandAnimationRequest::_internal_profilemeta() const {
  const ::handEngine::v1::ProfileMeta* p = _impl_.profilemeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::ProfileMeta&>(
      ::handEngine::v1::_ProfileMeta_default_instance_);
}
inline const ::handEngine::v1::ProfileMeta& HandAnimationRequest::profilemeta() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationRequest.profileMeta)
  return _internal_profilemeta();
}
inline void HandAnimationRequest::unsafe_arena_set_allocated_profilemeta(
    ::handEngine::v1::ProfileMeta* profilemeta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilemeta_);
  }
  _impl_.profilemeta_ = profilemeta;
  if (profilemeta) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationRequest.profileMeta)
}
inline ::handEngine::v1::ProfileMeta* HandAnimationRequest::release_profilemeta() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::ProfileMeta* temp = _impl_.profilemeta_;
  _impl_.profilemeta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationRequest::unsafe_arena_release_profilemeta() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationRequest.profileMeta)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::ProfileMeta* temp = _impl_.profilemeta_;
  _impl_.profilemeta_ = nullptr;
  return temp;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationRequest::_internal_mutable_profilemeta() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.profilemeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::ProfileMeta>(GetArenaForAllocation());
    _impl_.profilemeta_ = p;
  }
  return _impl_.profilemeta_;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationRequest::mutable_profilemeta() {
  ::handEngine::v1::ProfileMeta* _msg = _internal_mutable_profilemeta();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationRequest.profileMeta)
  return _msg;
}
inline void HandAnimationRequest::set_allocated_profilemeta(::handEngine::v1::ProfileMeta* profilemeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilemeta_);
  }
  if (profilemeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profilemeta));
    if (message_arena != submessage_arena) {
      profilemeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilemeta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.profilemeta_ = profilemeta;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationRequest.profileMeta)
}

// .handEngine.v1.StreamSettings settings = 2;
inline bool HandAnimationRequest::has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_ != nullptr);
  return value;
}
inline void HandAnimationRequest::clear_settings() {
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::handEngine::v1::StreamSettings& HandAnimationRequest::_internal_settings() const {
  const ::handEngine::v1::StreamSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::StreamSettings&>(
      ::handEngine::v1::_StreamSettings_default_instance_);
}
inline const ::handEngine::v1::StreamSettings& HandAnimationRequest::settings() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationRequest.settings)
  return _internal_settings();
}
inline void HandAnimationRequest::unsafe_arena_set_allocated_settings(
    ::handEngine::v1::StreamSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationRequest.settings)
}
inline ::handEngine::v1::StreamSettings* HandAnimationRequest::release_settings() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::StreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::StreamSettings* HandAnimationRequest::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationRequest.settings)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::StreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::handEngine::v1::StreamSettings* HandAnimationRequest::_internal_mutable_settings() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::StreamSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::handEngine::v1::StreamSettings* HandAnimationRequest::mutable_settings() {
  ::handEngine::v1::StreamSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationRequest.settings)
  return _msg;
}
inline void HandAnimationRequest::set_allocated_settings(::handEngine::v1::StreamSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationRequest.settings)
}

// -------------------------------------------------------------------

// StageAnimationRequest

// repeated .handEngine.v1.ProfileMeta profileMeta = 1;
inline int StageAnimationRequest::_internal_profilemeta_size() const {
  return _impl_.profilemeta_.size();
}
inline int StageAnimationRequest::profilemeta_size() const {
  return _internal_profilemeta_size();
}
inline ::handEngine::v1::ProfileMeta* StageAnimationRequest::mutable_profilemeta(int index) {
  // @@protoc_insertion_point(field_mutable:handEngine.v1.StageAnimationRequest.profileMeta)
  return _internal_mutable_profilemeta()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::ProfileMeta >*
StageAnimationRequest::mutable_profilemeta() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.StageAnimationRequest.profileMeta)
  return _internal_mutable_profilemeta();
}
inline const ::handEngine::v1::ProfileMeta& StageAnimationRequest::_internal_profilemeta(int index) const {
  return _internal_profilemeta().Get(index);
}
inline const ::handEngine::v1::ProfileMeta& StageAnimationRequest::profilemeta(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.StageAnimationRequest.profileMeta)
  return _internal_profilemeta(index);
}
inline ::handEngine::v1::ProfileMeta* StageAnimationRequest::_internal_add_profilemeta() {
  return _internal_mutable_profilemeta()->Add();
}
inline ::handEngine::v1::ProfileMeta* StageAnimationRequest::add_profilemeta() {
  ::handEngine::v1::ProfileMeta* _add = _internal_add_profilemeta();
  // @@protoc_insertion_point(field_add:handEngine.v1.StageAnimationRequest.profileMeta)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::ProfileMeta >&
StageAnimationRequest::profilemeta() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.StageAnimationRequest.profileMeta)
  return _internal_profilemeta();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::ProfileMeta>&
StageAnimationRequest::_internal_profilemeta() const {
  return _impl_.profilemeta_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::ProfileMeta>*
StageAnimationRequest::_internal_mutable_profilemeta() {
  return &_impl_.profilemeta_;
}

// .handEngine.v1.StreamSettings settings = 2;
inline bool StageAnimationRequest::has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_ != nullptr);
  return value;
}
inline void StageAnimationRequest::clear_settings() {
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::handEngine::v1::StreamSettings& StageAnimationRequest::_internal_settings() const {
  const ::handEngine::v1::StreamSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::StreamSettings&>(
      ::handEngine::v1::_StreamSettings_default_instance_);
}
inline const ::handEngine::v1::StreamSettings& StageAnimationRequest::settings() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.StageAnimationRequest.settings)
  return _internal_settings();
}
inline void StageAnimationRequest::unsafe_arena_set_allocated_settings(
    ::handEngine::v1::StreamSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.StageAnimationRequest.settings)
}
inline ::handEngine::v1::StreamSettings* StageAnimationRequest::release_settings() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::StreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::StreamSettings* StageAnimationRequest::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:handEngine.v1.StageAnimationRequest.settings)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::StreamSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::handEngine::v1::StreamSettings* StageAnimationRequest::_internal_mutable_settings() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::StreamSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::handEngine::v1::StreamSettings* StageAnimationRequest::mutable_settings() {
  ::handEngine::v1::StreamSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.StageAnimationRequest.settings)
  return _msg;
}
inline void StageAnimationRequest::set_allocated_settings(::handEngine::v1::StreamSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.StageAnimationRequest.settings)
}

// -------------------------------------------------------------------

// StreamSettings

// bool includeMetaCarpal = 1;
inline void StreamSettings::clear_includemetacarpal() {
  _impl_.includemetacarpal_ = false;
}
inline bool StreamSettings::includemetacarpal() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.StreamSettings.includeMetaCarpal)
  return _internal_includemetacarpal();
}
inline void StreamSettings::set_includemetacarpal(bool value) {
  _internal_set_includemetacarpal(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.StreamSettings.includeMetaCarpal)
}
inline bool StreamSettings::_internal_includemetacarpal() const {
  return _impl_.includemetacarpal_;
}
inline void StreamSettings::_internal_set_includemetacarpal(bool value) {
  ;
  _impl_.includemetacarpal_ = value;
}

// .handEngine.v1.CoordinateSystem coordinateSystem = 2;
inline void StreamSettings::clear_coordinatesystem() {
  _impl_.coordinatesystem_ = 0;
}
inline ::handEngine::v1::CoordinateSystem StreamSettings::coordinatesystem() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.StreamSettings.coordinateSystem)
  return _internal_coordinatesystem();
}
inline void StreamSettings::set_coordinatesystem(::handEngine::v1::CoordinateSystem value) {
   _internal_set_coordinatesystem(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.StreamSettings.coordinateSystem)
}
inline ::handEngine::v1::CoordinateSystem StreamSettings::_internal_coordinatesystem() const {
  return static_cast<::handEngine::v1::CoordinateSystem>(_impl_.coordinatesystem_);
}
inline void StreamSettings::_internal_set_coordinatesystem(::handEngine::v1::CoordinateSystem value) {
  ;
  _impl_.coordinatesystem_ = value;
}

// -------------------------------------------------------------------

// HandAnimationResponse

// string performerName = 1;
inline void HandAnimationResponse::clear_performername() {
  _impl_.performername_.ClearToEmpty();
}
inline const std::string& HandAnimationResponse::performername() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.performerName)
  return _internal_performername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandAnimationResponse::set_performername(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.performername_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.HandAnimationResponse.performerName)
}
inline std::string* HandAnimationResponse::mutable_performername() {
  std::string* _s = _internal_mutable_performername();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.performerName)
  return _s;
}
inline const std::string& HandAnimationResponse::_internal_performername() const {
  return _impl_.performername_.Get();
}
inline void HandAnimationResponse::_internal_set_performername(const std::string& value) {
  ;


  _impl_.performername_.Set(value, GetArenaForAllocation());
}
inline std::string* HandAnimationResponse::_internal_mutable_performername() {
  ;
  return _impl_.performername_.Mutable( GetArenaForAllocation());
}
inline std::string* HandAnimationResponse::release_performername() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.performerName)
  return _impl_.performername_.Release();
}
inline void HandAnimationResponse::set_allocated_performername(std::string* value) {
  _impl_.performername_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.performername_.IsDefault()) {
          _impl_.performername_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.performerName)
}

// uint32 performerId = 2;
inline void HandAnimationResponse::clear_performerid() {
  _impl_.performerid_ = 0u;
}
inline ::uint32_t HandAnimationResponse::performerid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.performerId)
  return _internal_performerid();
}
inline void HandAnimationResponse::set_performerid(::uint32_t value) {
  _internal_set_performerid(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.HandAnimationResponse.performerId)
}
inline ::uint32_t HandAnimationResponse::_internal_performerid() const {
  return _impl_.performerid_;
}
inline void HandAnimationResponse::_internal_set_performerid(::uint32_t value) {
  ;
  _impl_.performerid_ = value;
}

// repeated .handEngine.v1.JointResponse bones = 3;
inline int HandAnimationResponse::_internal_bones_size() const {
  return _impl_.bones_.size();
}
inline int HandAnimationResponse::bones_size() const {
  return _internal_bones_size();
}
inline void HandAnimationResponse::clear_bones() {
  _internal_mutable_bones()->Clear();
}
inline ::handEngine::v1::JointResponse* HandAnimationResponse::mutable_bones(int index) {
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.bones)
  return _internal_mutable_bones()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::JointResponse >*
HandAnimationResponse::mutable_bones() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.HandAnimationResponse.bones)
  return _internal_mutable_bones();
}
inline const ::handEngine::v1::JointResponse& HandAnimationResponse::_internal_bones(int index) const {
  return _internal_bones().Get(index);
}
inline const ::handEngine::v1::JointResponse& HandAnimationResponse::bones(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.bones)
  return _internal_bones(index);
}
inline ::handEngine::v1::JointResponse* HandAnimationResponse::_internal_add_bones() {
  return _internal_mutable_bones()->Add();
}
inline ::handEngine::v1::JointResponse* HandAnimationResponse::add_bones() {
  ::handEngine::v1::JointResponse* _add = _internal_add_bones();
  // @@protoc_insertion_point(field_add:handEngine.v1.HandAnimationResponse.bones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::JointResponse >&
HandAnimationResponse::bones() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.HandAnimationResponse.bones)
  return _internal_bones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::JointResponse>&
HandAnimationResponse::_internal_bones() const {
  return _impl_.bones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::JointResponse>*
HandAnimationResponse::_internal_mutable_bones() {
  return &_impl_.bones_;
}

// .handEngine.v1.PoseInformationResponse poseInfo = 4;
inline bool HandAnimationResponse::has_poseinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poseinfo_ != nullptr);
  return value;
}
inline void HandAnimationResponse::clear_poseinfo() {
  if (_impl_.poseinfo_ != nullptr) _impl_.poseinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::handEngine::v1::PoseInformationResponse& HandAnimationResponse::_internal_poseinfo() const {
  const ::handEngine::v1::PoseInformationResponse* p = _impl_.poseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::PoseInformationResponse&>(
      ::handEngine::v1::_PoseInformationResponse_default_instance_);
}
inline const ::handEngine::v1::PoseInformationResponse& HandAnimationResponse::poseinfo() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.poseInfo)
  return _internal_poseinfo();
}
inline void HandAnimationResponse::unsafe_arena_set_allocated_poseinfo(
    ::handEngine::v1::PoseInformationResponse* poseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poseinfo_);
  }
  _impl_.poseinfo_ = poseinfo;
  if (poseinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationResponse.poseInfo)
}
inline ::handEngine::v1::PoseInformationResponse* HandAnimationResponse::release_poseinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::PoseInformationResponse* temp = _impl_.poseinfo_;
  _impl_.poseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::PoseInformationResponse* HandAnimationResponse::unsafe_arena_release_poseinfo() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.poseInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::handEngine::v1::PoseInformationResponse* temp = _impl_.poseinfo_;
  _impl_.poseinfo_ = nullptr;
  return temp;
}
inline ::handEngine::v1::PoseInformationResponse* HandAnimationResponse::_internal_mutable_poseinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.poseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::PoseInformationResponse>(GetArenaForAllocation());
    _impl_.poseinfo_ = p;
  }
  return _impl_.poseinfo_;
}
inline ::handEngine::v1::PoseInformationResponse* HandAnimationResponse::mutable_poseinfo() {
  ::handEngine::v1::PoseInformationResponse* _msg = _internal_mutable_poseinfo();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.poseInfo)
  return _msg;
}
inline void HandAnimationResponse::set_allocated_poseinfo(::handEngine::v1::PoseInformationResponse* poseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poseinfo_;
  }
  if (poseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poseinfo);
    if (message_arena != submessage_arena) {
      poseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poseinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.poseinfo_ = poseinfo;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.poseInfo)
}

// string timecode = 5;
inline void HandAnimationResponse::clear_timecode() {
  _impl_.timecode_.ClearToEmpty();
}
inline const std::string& HandAnimationResponse::timecode() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.timecode)
  return _internal_timecode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandAnimationResponse::set_timecode(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timecode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.HandAnimationResponse.timecode)
}
inline std::string* HandAnimationResponse::mutable_timecode() {
  std::string* _s = _internal_mutable_timecode();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.timecode)
  return _s;
}
inline const std::string& HandAnimationResponse::_internal_timecode() const {
  return _impl_.timecode_.Get();
}
inline void HandAnimationResponse::_internal_set_timecode(const std::string& value) {
  ;


  _impl_.timecode_.Set(value, GetArenaForAllocation());
}
inline std::string* HandAnimationResponse::_internal_mutable_timecode() {
  ;
  return _impl_.timecode_.Mutable( GetArenaForAllocation());
}
inline std::string* HandAnimationResponse::release_timecode() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.timecode)
  return _impl_.timecode_.Release();
}
inline void HandAnimationResponse::set_allocated_timecode(std::string* value) {
  _impl_.timecode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timecode_.IsDefault()) {
          _impl_.timecode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.timecode)
}

// .handEngine.v1.ProfileMeta profileMeta = 6;
inline bool HandAnimationResponse::has_profilemeta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profilemeta_ != nullptr);
  return value;
}
inline const ::handEngine::v1::ProfileMeta& HandAnimationResponse::_internal_profilemeta() const {
  const ::handEngine::v1::ProfileMeta* p = _impl_.profilemeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::ProfileMeta&>(
      ::handEngine::v1::_ProfileMeta_default_instance_);
}
inline const ::handEngine::v1::ProfileMeta& HandAnimationResponse::profilemeta() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.profileMeta)
  return _internal_profilemeta();
}
inline void HandAnimationResponse::unsafe_arena_set_allocated_profilemeta(
    ::handEngine::v1::ProfileMeta* profilemeta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilemeta_);
  }
  _impl_.profilemeta_ = profilemeta;
  if (profilemeta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationResponse.profileMeta)
}
inline ::handEngine::v1::ProfileMeta* HandAnimationResponse::release_profilemeta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::ProfileMeta* temp = _impl_.profilemeta_;
  _impl_.profilemeta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationResponse::unsafe_arena_release_profilemeta() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.profileMeta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::handEngine::v1::ProfileMeta* temp = _impl_.profilemeta_;
  _impl_.profilemeta_ = nullptr;
  return temp;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationResponse::_internal_mutable_profilemeta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.profilemeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::ProfileMeta>(GetArenaForAllocation());
    _impl_.profilemeta_ = p;
  }
  return _impl_.profilemeta_;
}
inline ::handEngine::v1::ProfileMeta* HandAnimationResponse::mutable_profilemeta() {
  ::handEngine::v1::ProfileMeta* _msg = _internal_mutable_profilemeta();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.profileMeta)
  return _msg;
}
inline void HandAnimationResponse::set_allocated_profilemeta(::handEngine::v1::ProfileMeta* profilemeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilemeta_);
  }
  if (profilemeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profilemeta));
    if (message_arena != submessage_arena) {
      profilemeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilemeta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.profilemeta_ = profilemeta;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.profileMeta)
}

// .handEngine.v1.GloveInformationResponse sourceInfo = 7;
inline bool HandAnimationResponse::has_sourceinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourceinfo_ != nullptr);
  return value;
}
inline const ::handEngine::v1::GloveInformationResponse& HandAnimationResponse::_internal_sourceinfo() const {
  const ::handEngine::v1::GloveInformationResponse* p = _impl_.sourceinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::GloveInformationResponse&>(
      ::handEngine::v1::_GloveInformationResponse_default_instance_);
}
inline const ::handEngine::v1::GloveInformationResponse& HandAnimationResponse::sourceinfo() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.sourceInfo)
  return _internal_sourceinfo();
}
inline void HandAnimationResponse::unsafe_arena_set_allocated_sourceinfo(
    ::handEngine::v1::GloveInformationResponse* sourceinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourceinfo_);
  }
  _impl_.sourceinfo_ = sourceinfo;
  if (sourceinfo) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationResponse.sourceInfo)
}
inline ::handEngine::v1::GloveInformationResponse* HandAnimationResponse::release_sourceinfo() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::handEngine::v1::GloveInformationResponse* temp = _impl_.sourceinfo_;
  _impl_.sourceinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::GloveInformationResponse* HandAnimationResponse::unsafe_arena_release_sourceinfo() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.sourceInfo)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::handEngine::v1::GloveInformationResponse* temp = _impl_.sourceinfo_;
  _impl_.sourceinfo_ = nullptr;
  return temp;
}
inline ::handEngine::v1::GloveInformationResponse* HandAnimationResponse::_internal_mutable_sourceinfo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sourceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::GloveInformationResponse>(GetArenaForAllocation());
    _impl_.sourceinfo_ = p;
  }
  return _impl_.sourceinfo_;
}
inline ::handEngine::v1::GloveInformationResponse* HandAnimationResponse::mutable_sourceinfo() {
  ::handEngine::v1::GloveInformationResponse* _msg = _internal_mutable_sourceinfo();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.sourceInfo)
  return _msg;
}
inline void HandAnimationResponse::set_allocated_sourceinfo(::handEngine::v1::GloveInformationResponse* sourceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourceinfo_);
  }
  if (sourceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourceinfo));
    if (message_arena != submessage_arena) {
      sourceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sourceinfo_ = sourceinfo;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.sourceInfo)
}

// optional .handEngine.v1.Sliders sliders = 8;
inline bool HandAnimationResponse::has_sliders() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sliders_ != nullptr);
  return value;
}
inline void HandAnimationResponse::clear_sliders() {
  if (_impl_.sliders_ != nullptr) _impl_.sliders_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::handEngine::v1::Sliders& HandAnimationResponse::_internal_sliders() const {
  const ::handEngine::v1::Sliders* p = _impl_.sliders_;
  return p != nullptr ? *p : reinterpret_cast<const ::handEngine::v1::Sliders&>(
      ::handEngine::v1::_Sliders_default_instance_);
}
inline const ::handEngine::v1::Sliders& HandAnimationResponse::sliders() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.HandAnimationResponse.sliders)
  return _internal_sliders();
}
inline void HandAnimationResponse::unsafe_arena_set_allocated_sliders(
    ::handEngine::v1::Sliders* sliders) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sliders_);
  }
  _impl_.sliders_ = sliders;
  if (sliders) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:handEngine.v1.HandAnimationResponse.sliders)
}
inline ::handEngine::v1::Sliders* HandAnimationResponse::release_sliders() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::handEngine::v1::Sliders* temp = _impl_.sliders_;
  _impl_.sliders_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::handEngine::v1::Sliders* HandAnimationResponse::unsafe_arena_release_sliders() {
  // @@protoc_insertion_point(field_release:handEngine.v1.HandAnimationResponse.sliders)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::handEngine::v1::Sliders* temp = _impl_.sliders_;
  _impl_.sliders_ = nullptr;
  return temp;
}
inline ::handEngine::v1::Sliders* HandAnimationResponse::_internal_mutable_sliders() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sliders_ == nullptr) {
    auto* p = CreateMaybeMessage<::handEngine::v1::Sliders>(GetArenaForAllocation());
    _impl_.sliders_ = p;
  }
  return _impl_.sliders_;
}
inline ::handEngine::v1::Sliders* HandAnimationResponse::mutable_sliders() {
  ::handEngine::v1::Sliders* _msg = _internal_mutable_sliders();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.HandAnimationResponse.sliders)
  return _msg;
}
inline void HandAnimationResponse::set_allocated_sliders(::handEngine::v1::Sliders* sliders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sliders_;
  }
  if (sliders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sliders);
    if (message_arena != submessage_arena) {
      sliders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sliders, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sliders_ = sliders;
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.HandAnimationResponse.sliders)
}

// -------------------------------------------------------------------

// Sliders

// float THUMB_BEND_1 = 1;
inline void Sliders::clear_thumb_bend_1() {
  _impl_.thumb_bend_1_ = 0;
}
inline float Sliders::thumb_bend_1() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.THUMB_BEND_1)
  return _internal_thumb_bend_1();
}
inline void Sliders::set_thumb_bend_1(float value) {
  _internal_set_thumb_bend_1(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.THUMB_BEND_1)
}
inline float Sliders::_internal_thumb_bend_1() const {
  return _impl_.thumb_bend_1_;
}
inline void Sliders::_internal_set_thumb_bend_1(float value) {
  ;
  _impl_.thumb_bend_1_ = value;
}

// float THUMB_BEND_2 = 2;
inline void Sliders::clear_thumb_bend_2() {
  _impl_.thumb_bend_2_ = 0;
}
inline float Sliders::thumb_bend_2() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.THUMB_BEND_2)
  return _internal_thumb_bend_2();
}
inline void Sliders::set_thumb_bend_2(float value) {
  _internal_set_thumb_bend_2(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.THUMB_BEND_2)
}
inline float Sliders::_internal_thumb_bend_2() const {
  return _impl_.thumb_bend_2_;
}
inline void Sliders::_internal_set_thumb_bend_2(float value) {
  ;
  _impl_.thumb_bend_2_ = value;
}

// optional float THUMB_BEND_3 = 13;
inline bool Sliders::has_thumb_bend_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Sliders::clear_thumb_bend_3() {
  _impl_.thumb_bend_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Sliders::thumb_bend_3() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.THUMB_BEND_3)
  return _internal_thumb_bend_3();
}
inline void Sliders::set_thumb_bend_3(float value) {
  _internal_set_thumb_bend_3(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.THUMB_BEND_3)
}
inline float Sliders::_internal_thumb_bend_3() const {
  return _impl_.thumb_bend_3_;
}
inline void Sliders::_internal_set_thumb_bend_3(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.thumb_bend_3_ = value;
}

// float THUMB_SPLAY = 7;
inline void Sliders::clear_thumb_splay() {
  _impl_.thumb_splay_ = 0;
}
inline float Sliders::thumb_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.THUMB_SPLAY)
  return _internal_thumb_splay();
}
inline void Sliders::set_thumb_splay(float value) {
  _internal_set_thumb_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.THUMB_SPLAY)
}
inline float Sliders::_internal_thumb_splay() const {
  return _impl_.thumb_splay_;
}
inline void Sliders::_internal_set_thumb_splay(float value) {
  ;
  _impl_.thumb_splay_ = value;
}

// float INDEX_BEND_1 = 3;
inline void Sliders::clear_index_bend_1() {
  _impl_.index_bend_1_ = 0;
}
inline float Sliders::index_bend_1() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.INDEX_BEND_1)
  return _internal_index_bend_1();
}
inline void Sliders::set_index_bend_1(float value) {
  _internal_set_index_bend_1(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.INDEX_BEND_1)
}
inline float Sliders::_internal_index_bend_1() const {
  return _impl_.index_bend_1_;
}
inline void Sliders::_internal_set_index_bend_1(float value) {
  ;
  _impl_.index_bend_1_ = value;
}

// float INDEX_BEND_2 = 4;
inline void Sliders::clear_index_bend_2() {
  _impl_.index_bend_2_ = 0;
}
inline float Sliders::index_bend_2() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.INDEX_BEND_2)
  return _internal_index_bend_2();
}
inline void Sliders::set_index_bend_2(float value) {
  _internal_set_index_bend_2(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.INDEX_BEND_2)
}
inline float Sliders::_internal_index_bend_2() const {
  return _impl_.index_bend_2_;
}
inline void Sliders::_internal_set_index_bend_2(float value) {
  ;
  _impl_.index_bend_2_ = value;
}

// optional float INDEX_BEND_3 = 14;
inline bool Sliders::has_index_bend_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Sliders::clear_index_bend_3() {
  _impl_.index_bend_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Sliders::index_bend_3() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.INDEX_BEND_3)
  return _internal_index_bend_3();
}
inline void Sliders::set_index_bend_3(float value) {
  _internal_set_index_bend_3(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.INDEX_BEND_3)
}
inline float Sliders::_internal_index_bend_3() const {
  return _impl_.index_bend_3_;
}
inline void Sliders::_internal_set_index_bend_3(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_bend_3_ = value;
}

// float MIDDLE_BEND_1 = 5;
inline void Sliders::clear_middle_bend_1() {
  _impl_.middle_bend_1_ = 0;
}
inline float Sliders::middle_bend_1() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.MIDDLE_BEND_1)
  return _internal_middle_bend_1();
}
inline void Sliders::set_middle_bend_1(float value) {
  _internal_set_middle_bend_1(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.MIDDLE_BEND_1)
}
inline float Sliders::_internal_middle_bend_1() const {
  return _impl_.middle_bend_1_;
}
inline void Sliders::_internal_set_middle_bend_1(float value) {
  ;
  _impl_.middle_bend_1_ = value;
}

// float MIDDLE_BEND_2 = 6;
inline void Sliders::clear_middle_bend_2() {
  _impl_.middle_bend_2_ = 0;
}
inline float Sliders::middle_bend_2() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.MIDDLE_BEND_2)
  return _internal_middle_bend_2();
}
inline void Sliders::set_middle_bend_2(float value) {
  _internal_set_middle_bend_2(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.MIDDLE_BEND_2)
}
inline float Sliders::_internal_middle_bend_2() const {
  return _impl_.middle_bend_2_;
}
inline void Sliders::_internal_set_middle_bend_2(float value) {
  ;
  _impl_.middle_bend_2_ = value;
}

// optional float MIDDLE_BEND_3 = 15;
inline bool Sliders::has_middle_bend_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Sliders::clear_middle_bend_3() {
  _impl_.middle_bend_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Sliders::middle_bend_3() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.MIDDLE_BEND_3)
  return _internal_middle_bend_3();
}
inline void Sliders::set_middle_bend_3(float value) {
  _internal_set_middle_bend_3(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.MIDDLE_BEND_3)
}
inline float Sliders::_internal_middle_bend_3() const {
  return _impl_.middle_bend_3_;
}
inline void Sliders::_internal_set_middle_bend_3(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.middle_bend_3_ = value;
}

// float RING_BEND_1 = 8;
inline void Sliders::clear_ring_bend_1() {
  _impl_.ring_bend_1_ = 0;
}
inline float Sliders::ring_bend_1() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.RING_BEND_1)
  return _internal_ring_bend_1();
}
inline void Sliders::set_ring_bend_1(float value) {
  _internal_set_ring_bend_1(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.RING_BEND_1)
}
inline float Sliders::_internal_ring_bend_1() const {
  return _impl_.ring_bend_1_;
}
inline void Sliders::_internal_set_ring_bend_1(float value) {
  ;
  _impl_.ring_bend_1_ = value;
}

// float RING_BEND_2 = 9;
inline void Sliders::clear_ring_bend_2() {
  _impl_.ring_bend_2_ = 0;
}
inline float Sliders::ring_bend_2() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.RING_BEND_2)
  return _internal_ring_bend_2();
}
inline void Sliders::set_ring_bend_2(float value) {
  _internal_set_ring_bend_2(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.RING_BEND_2)
}
inline float Sliders::_internal_ring_bend_2() const {
  return _impl_.ring_bend_2_;
}
inline void Sliders::_internal_set_ring_bend_2(float value) {
  ;
  _impl_.ring_bend_2_ = value;
}

// optional float RING_BEND_3 = 16;
inline bool Sliders::has_ring_bend_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Sliders::clear_ring_bend_3() {
  _impl_.ring_bend_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Sliders::ring_bend_3() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.RING_BEND_3)
  return _internal_ring_bend_3();
}
inline void Sliders::set_ring_bend_3(float value) {
  _internal_set_ring_bend_3(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.RING_BEND_3)
}
inline float Sliders::_internal_ring_bend_3() const {
  return _impl_.ring_bend_3_;
}
inline void Sliders::_internal_set_ring_bend_3(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ring_bend_3_ = value;
}

// float PINKY_BEND_1 = 10;
inline void Sliders::clear_pinky_bend_1() {
  _impl_.pinky_bend_1_ = 0;
}
inline float Sliders::pinky_bend_1() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.PINKY_BEND_1)
  return _internal_pinky_bend_1();
}
inline void Sliders::set_pinky_bend_1(float value) {
  _internal_set_pinky_bend_1(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.PINKY_BEND_1)
}
inline float Sliders::_internal_pinky_bend_1() const {
  return _impl_.pinky_bend_1_;
}
inline void Sliders::_internal_set_pinky_bend_1(float value) {
  ;
  _impl_.pinky_bend_1_ = value;
}

// float PINKY_BEND_2 = 11;
inline void Sliders::clear_pinky_bend_2() {
  _impl_.pinky_bend_2_ = 0;
}
inline float Sliders::pinky_bend_2() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.PINKY_BEND_2)
  return _internal_pinky_bend_2();
}
inline void Sliders::set_pinky_bend_2(float value) {
  _internal_set_pinky_bend_2(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.PINKY_BEND_2)
}
inline float Sliders::_internal_pinky_bend_2() const {
  return _impl_.pinky_bend_2_;
}
inline void Sliders::_internal_set_pinky_bend_2(float value) {
  ;
  _impl_.pinky_bend_2_ = value;
}

// optional float PINKY_BEND_3 = 17;
inline bool Sliders::has_pinky_bend_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Sliders::clear_pinky_bend_3() {
  _impl_.pinky_bend_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Sliders::pinky_bend_3() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.PINKY_BEND_3)
  return _internal_pinky_bend_3();
}
inline void Sliders::set_pinky_bend_3(float value) {
  _internal_set_pinky_bend_3(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.PINKY_BEND_3)
}
inline float Sliders::_internal_pinky_bend_3() const {
  return _impl_.pinky_bend_3_;
}
inline void Sliders::_internal_set_pinky_bend_3(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pinky_bend_3_ = value;
}

// optional float GLOBAL_SPLAY = 12;
inline bool Sliders::has_global_splay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Sliders::clear_global_splay() {
  _impl_.global_splay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Sliders::global_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.GLOBAL_SPLAY)
  return _internal_global_splay();
}
inline void Sliders::set_global_splay(float value) {
  _internal_set_global_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.GLOBAL_SPLAY)
}
inline float Sliders::_internal_global_splay() const {
  return _impl_.global_splay_;
}
inline void Sliders::_internal_set_global_splay(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.global_splay_ = value;
}

// optional float INDEX_SPLAY = 18;
inline bool Sliders::has_index_splay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Sliders::clear_index_splay() {
  _impl_.index_splay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Sliders::index_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.INDEX_SPLAY)
  return _internal_index_splay();
}
inline void Sliders::set_index_splay(float value) {
  _internal_set_index_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.INDEX_SPLAY)
}
inline float Sliders::_internal_index_splay() const {
  return _impl_.index_splay_;
}
inline void Sliders::_internal_set_index_splay(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.index_splay_ = value;
}

// optional float MIDDLE_SPLAY = 19;
inline bool Sliders::has_middle_splay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Sliders::clear_middle_splay() {
  _impl_.middle_splay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Sliders::middle_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.MIDDLE_SPLAY)
  return _internal_middle_splay();
}
inline void Sliders::set_middle_splay(float value) {
  _internal_set_middle_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.MIDDLE_SPLAY)
}
inline float Sliders::_internal_middle_splay() const {
  return _impl_.middle_splay_;
}
inline void Sliders::_internal_set_middle_splay(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.middle_splay_ = value;
}

// optional float RING_SPLAY = 20;
inline bool Sliders::has_ring_splay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Sliders::clear_ring_splay() {
  _impl_.ring_splay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Sliders::ring_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.RING_SPLAY)
  return _internal_ring_splay();
}
inline void Sliders::set_ring_splay(float value) {
  _internal_set_ring_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.RING_SPLAY)
}
inline float Sliders::_internal_ring_splay() const {
  return _impl_.ring_splay_;
}
inline void Sliders::_internal_set_ring_splay(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ring_splay_ = value;
}

// optional float PINKY_SPLAY = 21;
inline bool Sliders::has_pinky_splay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Sliders::clear_pinky_splay() {
  _impl_.pinky_splay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Sliders::pinky_splay() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.Sliders.PINKY_SPLAY)
  return _internal_pinky_splay();
}
inline void Sliders::set_pinky_splay(float value) {
  _internal_set_pinky_splay(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.Sliders.PINKY_SPLAY)
}
inline float Sliders::_internal_pinky_splay() const {
  return _impl_.pinky_splay_;
}
inline void Sliders::_internal_set_pinky_splay(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pinky_splay_ = value;
}

// -------------------------------------------------------------------

// StageAnimationResponse

// repeated .handEngine.v1.HandAnimationResponse handAnimations = 1;
inline int StageAnimationResponse::_internal_handanimations_size() const {
  return _impl_.handanimations_.size();
}
inline int StageAnimationResponse::handanimations_size() const {
  return _internal_handanimations_size();
}
inline void StageAnimationResponse::clear_handanimations() {
  _internal_mutable_handanimations()->Clear();
}
inline ::handEngine::v1::HandAnimationResponse* StageAnimationResponse::mutable_handanimations(int index) {
  // @@protoc_insertion_point(field_mutable:handEngine.v1.StageAnimationResponse.handAnimations)
  return _internal_mutable_handanimations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::HandAnimationResponse >*
StageAnimationResponse::mutable_handanimations() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.StageAnimationResponse.handAnimations)
  return _internal_mutable_handanimations();
}
inline const ::handEngine::v1::HandAnimationResponse& StageAnimationResponse::_internal_handanimations(int index) const {
  return _internal_handanimations().Get(index);
}
inline const ::handEngine::v1::HandAnimationResponse& StageAnimationResponse::handanimations(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.StageAnimationResponse.handAnimations)
  return _internal_handanimations(index);
}
inline ::handEngine::v1::HandAnimationResponse* StageAnimationResponse::_internal_add_handanimations() {
  return _internal_mutable_handanimations()->Add();
}
inline ::handEngine::v1::HandAnimationResponse* StageAnimationResponse::add_handanimations() {
  ::handEngine::v1::HandAnimationResponse* _add = _internal_add_handanimations();
  // @@protoc_insertion_point(field_add:handEngine.v1.StageAnimationResponse.handAnimations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handEngine::v1::HandAnimationResponse >&
StageAnimationResponse::handanimations() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.StageAnimationResponse.handAnimations)
  return _internal_handanimations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::HandAnimationResponse>&
StageAnimationResponse::_internal_handanimations() const {
  return _impl_.handanimations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::handEngine::v1::HandAnimationResponse>*
StageAnimationResponse::_internal_mutable_handanimations() {
  return &_impl_.handanimations_;
}

// -------------------------------------------------------------------

// JointResponse

// string name = 1;
inline void JointResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& JointResponse::name() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JointResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.name)
}
inline std::string* JointResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.JointResponse.name)
  return _s;
}
inline const std::string& JointResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void JointResponse::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* JointResponse::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* JointResponse::release_name() {
  // @@protoc_insertion_point(field_release:handEngine.v1.JointResponse.name)
  return _impl_.name_.Release();
}
inline void JointResponse::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.JointResponse.name)
}

// repeated float rotation = 2;
inline int JointResponse::_internal_rotation_size() const {
  return _impl_.rotation_.size();
}
inline int JointResponse::rotation_size() const {
  return _internal_rotation_size();
}
inline void JointResponse::clear_rotation() {
  _internal_mutable_rotation()->Clear();
}
inline float JointResponse::rotation(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.rotation)
  return _internal_rotation(index);
}
inline void JointResponse::set_rotation(int index, float value) {
  _internal_mutable_rotation()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.rotation)
}
inline void JointResponse::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.JointResponse.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::rotation() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.JointResponse.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.JointResponse.rotation)
  return _internal_mutable_rotation();
}

inline float JointResponse::_internal_rotation(int index) const {
  return _internal_rotation().Get(index);
}
inline void JointResponse::_internal_add_rotation(float value) {
  _internal_mutable_rotation()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::_internal_rotation() const {
  return _impl_.rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::_internal_mutable_rotation() {
  return &_impl_.rotation_;
}

// repeated float preRotation = 3;
inline int JointResponse::_internal_prerotation_size() const {
  return _impl_.prerotation_.size();
}
inline int JointResponse::prerotation_size() const {
  return _internal_prerotation_size();
}
inline void JointResponse::clear_prerotation() {
  _internal_mutable_prerotation()->Clear();
}
inline float JointResponse::prerotation(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.preRotation)
  return _internal_prerotation(index);
}
inline void JointResponse::set_prerotation(int index, float value) {
  _internal_mutable_prerotation()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.preRotation)
}
inline void JointResponse::add_prerotation(float value) {
  _internal_add_prerotation(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.JointResponse.preRotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::prerotation() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.JointResponse.preRotation)
  return _internal_prerotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::mutable_prerotation() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.JointResponse.preRotation)
  return _internal_mutable_prerotation();
}

inline float JointResponse::_internal_prerotation(int index) const {
  return _internal_prerotation().Get(index);
}
inline void JointResponse::_internal_add_prerotation(float value) {
  _internal_mutable_prerotation()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::_internal_prerotation() const {
  return _impl_.prerotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::_internal_mutable_prerotation() {
  return &_impl_.prerotation_;
}

// repeated float postRotation = 4;
inline int JointResponse::_internal_postrotation_size() const {
  return _impl_.postrotation_.size();
}
inline int JointResponse::postrotation_size() const {
  return _internal_postrotation_size();
}
inline void JointResponse::clear_postrotation() {
  _internal_mutable_postrotation()->Clear();
}
inline float JointResponse::postrotation(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.postRotation)
  return _internal_postrotation(index);
}
inline void JointResponse::set_postrotation(int index, float value) {
  _internal_mutable_postrotation()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.postRotation)
}
inline void JointResponse::add_postrotation(float value) {
  _internal_add_postrotation(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.JointResponse.postRotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::postrotation() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.JointResponse.postRotation)
  return _internal_postrotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::mutable_postrotation() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.JointResponse.postRotation)
  return _internal_mutable_postrotation();
}

inline float JointResponse::_internal_postrotation(int index) const {
  return _internal_postrotation().Get(index);
}
inline void JointResponse::_internal_add_postrotation(float value) {
  _internal_mutable_postrotation()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::_internal_postrotation() const {
  return _impl_.postrotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::_internal_mutable_postrotation() {
  return &_impl_.postrotation_;
}

// repeated float translation = 5;
inline int JointResponse::_internal_translation_size() const {
  return _impl_.translation_.size();
}
inline int JointResponse::translation_size() const {
  return _internal_translation_size();
}
inline void JointResponse::clear_translation() {
  _internal_mutable_translation()->Clear();
}
inline float JointResponse::translation(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.translation)
  return _internal_translation(index);
}
inline void JointResponse::set_translation(int index, float value) {
  _internal_mutable_translation()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.translation)
}
inline void JointResponse::add_translation(float value) {
  _internal_add_translation(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.JointResponse.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::translation() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.JointResponse.translation)
  return _internal_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.JointResponse.translation)
  return _internal_mutable_translation();
}

inline float JointResponse::_internal_translation(int index) const {
  return _internal_translation().Get(index);
}
inline void JointResponse::_internal_add_translation(float value) {
  _internal_mutable_translation()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::_internal_translation() const {
  return _impl_.translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::_internal_mutable_translation() {
  return &_impl_.translation_;
}

// repeated float scale = 6;
inline int JointResponse::_internal_scale_size() const {
  return _impl_.scale_.size();
}
inline int JointResponse::scale_size() const {
  return _internal_scale_size();
}
inline void JointResponse::clear_scale() {
  _internal_mutable_scale()->Clear();
}
inline float JointResponse::scale(int index) const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.scale)
  return _internal_scale(index);
}
inline void JointResponse::set_scale(int index, float value) {
  _internal_mutable_scale()->Set(index, value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.scale)
}
inline void JointResponse::add_scale(float value) {
  _internal_add_scale(value);
  // @@protoc_insertion_point(field_add:handEngine.v1.JointResponse.scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::scale() const {
  // @@protoc_insertion_point(field_list:handEngine.v1.JointResponse.scale)
  return _internal_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:handEngine.v1.JointResponse.scale)
  return _internal_mutable_scale();
}

inline float JointResponse::_internal_scale(int index) const {
  return _internal_scale().Get(index);
}
inline void JointResponse::_internal_add_scale(float value) {
  _internal_mutable_scale()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& JointResponse::_internal_scale() const {
  return _impl_.scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* JointResponse::_internal_mutable_scale() {
  return &_impl_.scale_;
}

// int32 parent = 7;
inline void JointResponse::clear_parent() {
  _impl_.parent_ = 0;
}
inline ::int32_t JointResponse::parent() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.JointResponse.parent)
  return _internal_parent();
}
inline void JointResponse::set_parent(::int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.JointResponse.parent)
}
inline ::int32_t JointResponse::_internal_parent() const {
  return _impl_.parent_;
}
inline void JointResponse::_internal_set_parent(::int32_t value) {
  ;
  _impl_.parent_ = value;
}

// -------------------------------------------------------------------

// PoseInformationResponse

// string poseName = 1;
inline void PoseInformationResponse::clear_posename() {
  _impl_.posename_.ClearToEmpty();
}
inline const std::string& PoseInformationResponse::posename() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.PoseInformationResponse.poseName)
  return _internal_posename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PoseInformationResponse::set_posename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.posename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:handEngine.v1.PoseInformationResponse.poseName)
}
inline std::string* PoseInformationResponse::mutable_posename() {
  std::string* _s = _internal_mutable_posename();
  // @@protoc_insertion_point(field_mutable:handEngine.v1.PoseInformationResponse.poseName)
  return _s;
}
inline const std::string& PoseInformationResponse::_internal_posename() const {
  return _impl_.posename_.Get();
}
inline void PoseInformationResponse::_internal_set_posename(const std::string& value) {
  ;


  _impl_.posename_.Set(value, GetArenaForAllocation());
}
inline std::string* PoseInformationResponse::_internal_mutable_posename() {
  ;
  return _impl_.posename_.Mutable( GetArenaForAllocation());
}
inline std::string* PoseInformationResponse::release_posename() {
  // @@protoc_insertion_point(field_release:handEngine.v1.PoseInformationResponse.poseName)
  return _impl_.posename_.Release();
}
inline void PoseInformationResponse::set_allocated_posename(std::string* value) {
  _impl_.posename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.posename_.IsDefault()) {
          _impl_.posename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:handEngine.v1.PoseInformationResponse.poseName)
}

// int32 poseId = 2;
inline void PoseInformationResponse::clear_poseid() {
  _impl_.poseid_ = 0;
}
inline ::int32_t PoseInformationResponse::poseid() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.PoseInformationResponse.poseId)
  return _internal_poseid();
}
inline void PoseInformationResponse::set_poseid(::int32_t value) {
  _internal_set_poseid(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.PoseInformationResponse.poseId)
}
inline ::int32_t PoseInformationResponse::_internal_poseid() const {
  return _impl_.poseid_;
}
inline void PoseInformationResponse::_internal_set_poseid(::int32_t value) {
  ;
  _impl_.poseid_ = value;
}

// float poseScore = 3;
inline void PoseInformationResponse::clear_posescore() {
  _impl_.posescore_ = 0;
}
inline float PoseInformationResponse::posescore() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.PoseInformationResponse.poseScore)
  return _internal_posescore();
}
inline void PoseInformationResponse::set_posescore(float value) {
  _internal_set_posescore(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.PoseInformationResponse.poseScore)
}
inline float PoseInformationResponse::_internal_posescore() const {
  return _impl_.posescore_;
}
inline void PoseInformationResponse::_internal_set_posescore(float value) {
  ;
  _impl_.posescore_ = value;
}

// bool poseActive = 4;
inline void PoseInformationResponse::clear_poseactive() {
  _impl_.poseactive_ = false;
}
inline bool PoseInformationResponse::poseactive() const {
  // @@protoc_insertion_point(field_get:handEngine.v1.PoseInformationResponse.poseActive)
  return _internal_poseactive();
}
inline void PoseInformationResponse::set_poseactive(bool value) {
  _internal_set_poseactive(value);
  // @@protoc_insertion_point(field_set:handEngine.v1.PoseInformationResponse.poseActive)
}
inline bool PoseInformationResponse::_internal_poseactive() const {
  return _impl_.poseactive_;
}
inline void PoseInformationResponse::_internal_set_poseactive(bool value) {
  ;
  _impl_.poseactive_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::handEngine::v1::CoordinateSystem> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2fanimation_2eproto_2epb_2eh


