// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/stage.proto
#include "EnableGrpcIncludes.h"
#include "v1/stage.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
#include "DisableGrpcIncludes.h"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace handEngine {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR StageStateResponse::StageStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timecode_)*/nullptr
  , /*decltype(_impl_.recording_)*/nullptr} {}
struct StageStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StageStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StageStateResponseDefaultTypeInternal() {}
  union {
    StageStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StageStateResponseDefaultTypeInternal _StageStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RecordingStateRequest::RecordingStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.takename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isrecording_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordingStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingStateRequestDefaultTypeInternal() {}
  union {
    RecordingStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingStateRequestDefaultTypeInternal _RecordingStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RecordingDirectoryRequest::RecordingDirectoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recordingdirectory_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordingDirectoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingDirectoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingDirectoryRequestDefaultTypeInternal() {}
  union {
    RecordingDirectoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingDirectoryRequestDefaultTypeInternal _RecordingDirectoryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TimeCodeRequest::TimeCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ipaddress_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.interfaceaddress_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/ 0

  , /*decltype(_impl_.framerate_)*/ 0

  , /*decltype(_impl_.cast_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeCodeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeCodeRequestDefaultTypeInternal() {}
  union {
    TimeCodeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeCodeRequestDefaultTypeInternal _TimeCodeRequest_default_instance_;
}  // namespace v1
}  // namespace handEngine
namespace handEngine {
namespace v1 {
// ===================================================================

class StageStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StageStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StageStateResponse, _impl_._has_bits_);
  static const ::handEngine::v1::TimeCodeRequest& timecode(const StageStateResponse* msg);
  static void set_has_timecode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::handEngine::v1::RecordingStateRequest& recording(const StageStateResponse* msg);
  static void set_has_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::handEngine::v1::TimeCodeRequest&
StageStateResponse::_Internal::timecode(const StageStateResponse* msg) {
  return *msg->_impl_.timecode_;
}
const ::handEngine::v1::RecordingStateRequest&
StageStateResponse::_Internal::recording(const StageStateResponse* msg) {
  return *msg->_impl_.recording_;
}
StageStateResponse::StageStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.StageStateResponse)
}
StageStateResponse::StageStateResponse(const StageStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StageStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timecode_){nullptr}
    , decltype(_impl_.recording_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timecode_ = new ::handEngine::v1::TimeCodeRequest(*from._impl_.timecode_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.recording_ = new ::handEngine::v1::RecordingStateRequest(*from._impl_.recording_);
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.StageStateResponse)
}

inline void StageStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timecode_){nullptr}
    , decltype(_impl_.recording_){nullptr}
  };
}

StageStateResponse::~StageStateResponse() {
  // @@protoc_insertion_point(destructor:handEngine.v1.StageStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StageStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timecode_;
  if (this != internal_default_instance()) delete _impl_.recording_;
}

void StageStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StageStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.StageStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timecode_ != nullptr);
      _impl_.timecode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.recording_ != nullptr);
      _impl_.recording_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StageStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.TimeCodeRequest timecode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timecode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.RecordingStateRequest recording = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StageStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.StageStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .handEngine.v1.TimeCodeRequest timecode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timecode(this),
        _Internal::timecode(this).GetCachedSize(), target, stream);
  }

  // .handEngine.v1.RecordingStateRequest recording = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::recording(this),
        _Internal::recording(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.StageStateResponse)
  return target;
}

::size_t StageStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.StageStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .handEngine.v1.TimeCodeRequest timecode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timecode_);
    }

    // .handEngine.v1.RecordingStateRequest recording = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recording_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StageStateResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StageStateResponse*>(
      &from));
}

void StageStateResponse::MergeFrom(const StageStateResponse& from) {
  StageStateResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.StageStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timecode()->::handEngine::v1::TimeCodeRequest::MergeFrom(
          from._internal_timecode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_recording()->::handEngine::v1::RecordingStateRequest::MergeFrom(
          from._internal_recording());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StageStateResponse::CopyFrom(const StageStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.StageStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStateResponse::IsInitialized() const {
  return true;
}

void StageStateResponse::InternalSwap(StageStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StageStateResponse, _impl_.recording_)
      + sizeof(StageStateResponse::_impl_.recording_)
      - PROTOBUF_FIELD_OFFSET(StageStateResponse, _impl_.timecode_)>(
          reinterpret_cast<char*>(&_impl_.timecode_),
          reinterpret_cast<char*>(&other->_impl_.timecode_));
}

std::string StageStateResponse::GetTypeName() const {
  return "handEngine.v1.StageStateResponse";
}

// ===================================================================

class RecordingStateRequest::_Internal {
 public:
};

RecordingStateRequest::RecordingStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.RecordingStateRequest)
}
RecordingStateRequest::RecordingStateRequest(const RecordingStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RecordingStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.takename_) {}

    , decltype(_impl_.isrecording_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.takename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.takename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takename().empty()) {
    _this->_impl_.takename_.Set(from._internal_takename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isrecording_ = from._impl_.isrecording_;
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.RecordingStateRequest)
}

inline void RecordingStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.takename_) {}

    , decltype(_impl_.isrecording_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.takename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.takename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecordingStateRequest::~RecordingStateRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.RecordingStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.takename_.Destroy();
}

void RecordingStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.RecordingStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.takename_.ClearToEmpty();
  _impl_.isrecording_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* RecordingStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isRecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.isrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string takeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_takename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RecordingStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.RecordingStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isRecording = 1;
  if (this->_internal_isrecording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_isrecording(), target);
  }

  // string takeName = 2;
  if (!this->_internal_takename().empty()) {
    const std::string& _s = this->_internal_takename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.RecordingStateRequest.takeName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.RecordingStateRequest)
  return target;
}

::size_t RecordingStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.RecordingStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string takeName = 2;
  if (!this->_internal_takename().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_takename());
  }

  // bool isRecording = 1;
  if (this->_internal_isrecording() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingStateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RecordingStateRequest*>(
      &from));
}

void RecordingStateRequest::MergeFrom(const RecordingStateRequest& from) {
  RecordingStateRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.RecordingStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_takename().empty()) {
    _this->_internal_set_takename(from._internal_takename());
  }
  if (from._internal_isrecording() != 0) {
    _this->_internal_set_isrecording(from._internal_isrecording());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RecordingStateRequest::CopyFrom(const RecordingStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.RecordingStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingStateRequest::IsInitialized() const {
  return true;
}

void RecordingStateRequest::InternalSwap(RecordingStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.takename_, lhs_arena,
                                       &other->_impl_.takename_, rhs_arena);

  swap(_impl_.isrecording_, other->_impl_.isrecording_);
}

std::string RecordingStateRequest::GetTypeName() const {
  return "handEngine.v1.RecordingStateRequest";
}

// ===================================================================

class RecordingDirectoryRequest::_Internal {
 public:
};

RecordingDirectoryRequest::RecordingDirectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.RecordingDirectoryRequest)
}
RecordingDirectoryRequest::RecordingDirectoryRequest(const RecordingDirectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RecordingDirectoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recordingdirectory_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.recordingdirectory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recordingdirectory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recordingdirectory().empty()) {
    _this->_impl_.recordingdirectory_.Set(from._internal_recordingdirectory(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.RecordingDirectoryRequest)
}

inline void RecordingDirectoryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.recordingdirectory_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.recordingdirectory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recordingdirectory_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecordingDirectoryRequest::~RecordingDirectoryRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.RecordingDirectoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingDirectoryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recordingdirectory_.Destroy();
}

void RecordingDirectoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.RecordingDirectoryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recordingdirectory_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* RecordingDirectoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recordingDirectory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recordingdirectory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RecordingDirectoryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.RecordingDirectoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recordingDirectory = 1;
  if (!this->_internal_recordingdirectory().empty()) {
    const std::string& _s = this->_internal_recordingdirectory();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.RecordingDirectoryRequest.recordingDirectory");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.RecordingDirectoryRequest)
  return target;
}

::size_t RecordingDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.RecordingDirectoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recordingDirectory = 1;
  if (!this->_internal_recordingdirectory().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recordingdirectory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingDirectoryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RecordingDirectoryRequest*>(
      &from));
}

void RecordingDirectoryRequest::MergeFrom(const RecordingDirectoryRequest& from) {
  RecordingDirectoryRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.RecordingDirectoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recordingdirectory().empty()) {
    _this->_internal_set_recordingdirectory(from._internal_recordingdirectory());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RecordingDirectoryRequest::CopyFrom(const RecordingDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.RecordingDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingDirectoryRequest::IsInitialized() const {
  return true;
}

void RecordingDirectoryRequest::InternalSwap(RecordingDirectoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recordingdirectory_, lhs_arena,
                                       &other->_impl_.recordingdirectory_, rhs_arena);
}

std::string RecordingDirectoryRequest::GetTypeName() const {
  return "handEngine.v1.RecordingDirectoryRequest";
}

// ===================================================================

class TimeCodeRequest::_Internal {
 public:
};

TimeCodeRequest::TimeCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:handEngine.v1.TimeCodeRequest)
}
TimeCodeRequest::TimeCodeRequest(const TimeCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TimeCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddress_) {}

    , decltype(_impl_.interfaceaddress_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.framerate_) {}

    , decltype(_impl_.cast_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.ipaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ipaddress_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipaddress().empty()) {
    _this->_impl_.ipaddress_.Set(from._internal_ipaddress(), _this->GetArenaForAllocation());
  }
  _impl_.interfaceaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interfaceaddress_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interfaceaddress().empty()) {
    _this->_impl_.interfaceaddress_.Set(from._internal_interfaceaddress(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cast_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.cast_));
  // @@protoc_insertion_point(copy_constructor:handEngine.v1.TimeCodeRequest)
}

inline void TimeCodeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddress_) {}

    , decltype(_impl_.interfaceaddress_) {}

    , decltype(_impl_.source_) { 0 }

    , decltype(_impl_.framerate_) { 0 }

    , decltype(_impl_.cast_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ipaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ipaddress_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interfaceaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interfaceaddress_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimeCodeRequest::~TimeCodeRequest() {
  // @@protoc_insertion_point(destructor:handEngine.v1.TimeCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeCodeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ipaddress_.Destroy();
  _impl_.interfaceaddress_.Destroy();
}

void TimeCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handEngine.v1.TimeCodeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ipaddress_.ClearToEmpty();
  _impl_.interfaceaddress_.ClearToEmpty();
  ::memset(&_impl_.source_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cast_) -
      reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.cast_));
  _internal_metadata_.Clear<std::string>();
}

const char* TimeCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .handEngine.v1.TimecodeSource source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::handEngine::v1::TimecodeSource>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ipAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string interfaceAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_interfaceaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.FrameRate framerate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_framerate(static_cast<::handEngine::v1::FrameRate>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .handEngine.v1.Cast cast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_cast(static_cast<::handEngine::v1::Cast>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimeCodeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:handEngine.v1.TimeCodeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .handEngine.v1.TimecodeSource source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_source(), target);
  }

  // string ipAddress = 2;
  if (!this->_internal_ipaddress().empty()) {
    const std::string& _s = this->_internal_ipaddress();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.TimeCodeRequest.ipAddress");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string interfaceAddress = 3;
  if (!this->_internal_interfaceaddress().empty()) {
    const std::string& _s = this->_internal_interfaceaddress();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "handEngine.v1.TimeCodeRequest.interfaceAddress");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .handEngine.v1.FrameRate framerate = 4;
  if (this->_internal_framerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_framerate(), target);
  }

  // .handEngine.v1.Cast cast = 5;
  if (this->_internal_cast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_cast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handEngine.v1.TimeCodeRequest)
  return target;
}

::size_t TimeCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handEngine.v1.TimeCodeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipAddress = 2;
  if (!this->_internal_ipaddress().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ipaddress());
  }

  // string interfaceAddress = 3;
  if (!this->_internal_interfaceaddress().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_interfaceaddress());
  }

  // .handEngine.v1.TimecodeSource source = 1;
  if (this->_internal_source() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // .handEngine.v1.FrameRate framerate = 4;
  if (this->_internal_framerate() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_framerate());
  }

  // .handEngine.v1.Cast cast = 5;
  if (this->_internal_cast() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cast());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeCodeRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TimeCodeRequest*>(
      &from));
}

void TimeCodeRequest::MergeFrom(const TimeCodeRequest& from) {
  TimeCodeRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:handEngine.v1.TimeCodeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipaddress().empty()) {
    _this->_internal_set_ipaddress(from._internal_ipaddress());
  }
  if (!from._internal_interfaceaddress().empty()) {
    _this->_internal_set_interfaceaddress(from._internal_interfaceaddress());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_framerate() != 0) {
    _this->_internal_set_framerate(from._internal_framerate());
  }
  if (from._internal_cast() != 0) {
    _this->_internal_set_cast(from._internal_cast());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TimeCodeRequest::CopyFrom(const TimeCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handEngine.v1.TimeCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeCodeRequest::IsInitialized() const {
  return true;
}

void TimeCodeRequest::InternalSwap(TimeCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ipaddress_, lhs_arena,
                                       &other->_impl_.ipaddress_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interfaceaddress_, lhs_arena,
                                       &other->_impl_.interfaceaddress_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeCodeRequest, _impl_.cast_)
      + sizeof(TimeCodeRequest::_impl_.cast_)
      - PROTOBUF_FIELD_OFFSET(TimeCodeRequest, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

std::string TimeCodeRequest::GetTypeName() const {
  return "handEngine.v1.TimeCodeRequest";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace handEngine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handEngine::v1::StageStateResponse*
Arena::CreateMaybeMessage< ::handEngine::v1::StageStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::StageStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::RecordingStateRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::RecordingStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::RecordingStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::RecordingDirectoryRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::RecordingDirectoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::RecordingDirectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handEngine::v1::TimeCodeRequest*
Arena::CreateMaybeMessage< ::handEngine::v1::TimeCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::handEngine::v1::TimeCodeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
