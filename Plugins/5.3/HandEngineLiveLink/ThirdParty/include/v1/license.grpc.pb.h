
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/license.proto
// Original file comments:
// *
// License RPCs
//
// Remote control Hand Engine's licensing.
#ifndef GRPC_v1_2flicense_2eproto__INCLUDED
#define GRPC_v1_2flicense_2eproto__INCLUDED

#include "v1/license.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace handEngine {
namespace v1 {

class LicenseService final {
 public:
  static constexpr char const* service_full_name() {
    return "handEngine.v1.LicenseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // * Retrieves the license key of a single glove.
    // Takes the glove ID of a connected device.
    // Returns a LicenseKeyResponse containing the license key of that device.
    // This license key is to be sent to the licensing server in order to get a Activation Token 
    virtual ::grpc::Status GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::handEngine::v1::LicenseKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>> AsyncGetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>>(AsyncGetLicenseKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>> PrepareAsyncGetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>>(PrepareAsyncGetLicenseKeyRaw(context, request, cq));
    }
    // * Activates the license of a single glove
    // Takes the glove ID of the target device and the corrosponding activation token from the server.
    // Returns a response containing the result of the activation (i.e. SUCCESS, INVALID_TOKEN) and a message elaborating on further details 
    virtual ::grpc::Status ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::handEngine::v1::ActivateDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>> AsyncActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>>(AsyncActivateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>> PrepareAsyncActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>>(PrepareAsyncActivateDeviceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // * Retrieves the license key of a single glove.
      // Takes the glove ID of a connected device.
      // Returns a LicenseKeyResponse containing the license key of that device.
      // This license key is to be sent to the licensing server in order to get a Activation Token 
      virtual void GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // * Activates the license of a single glove
      // Takes the glove ID of the target device and the corrosponding activation token from the server.
      // Returns a response containing the result of the activation (i.e. SUCCESS, INVALID_TOKEN) and a message elaborating on further details 
      virtual void ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>* AsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::LicenseKeyResponse>* PrepareAsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>* AsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handEngine::v1::ActivateDeviceResponse>* PrepareAsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::handEngine::v1::LicenseKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>> AsyncGetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>>(AsyncGetLicenseKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>> PrepareAsyncGetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>>(PrepareAsyncGetLicenseKeyRaw(context, request, cq));
    }
    ::grpc::Status ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::handEngine::v1::ActivateDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>> AsyncActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>>(AsyncActivateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>> PrepareAsyncActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>>(PrepareAsyncActivateDeviceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLicenseKey(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void ActivateDevice(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>* AsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::LicenseKeyResponse>* PrepareAsyncGetLicenseKeyRaw(::grpc::ClientContext* context, const ::handEngine::v1::LicenseKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>* AsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handEngine::v1::ActivateDeviceResponse>* PrepareAsyncActivateDeviceRaw(::grpc::ClientContext* context, const ::handEngine::v1::ActivateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLicenseKey_;
    const ::grpc::internal::RpcMethod rpcmethod_ActivateDevice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // * Retrieves the license key of a single glove.
    // Takes the glove ID of a connected device.
    // Returns a LicenseKeyResponse containing the license key of that device.
    // This license key is to be sent to the licensing server in order to get a Activation Token 
    virtual ::grpc::Status GetLicenseKey(::grpc::ServerContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response);
    // * Activates the license of a single glove
    // Takes the glove ID of the target device and the corrosponding activation token from the server.
    // Returns a response containing the result of the activation (i.e. SUCCESS, INVALID_TOKEN) and a message elaborating on further details 
    virtual ::grpc::Status ActivateDevice(::grpc::ServerContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLicenseKey(::grpc::ServerContext* context, ::handEngine::v1::LicenseKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::handEngine::v1::LicenseKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateDevice(::grpc::ServerContext* context, ::handEngine::v1::ActivateDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::handEngine::v1::ActivateDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLicenseKey<WithAsyncMethod_ActivateDevice<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::LicenseKeyRequest* request, ::handEngine::v1::LicenseKeyResponse* response) { return this->GetLicenseKey(context, request, response); }));}
    void SetMessageAllocatorFor_GetLicenseKey(
        ::grpc::MessageAllocator< ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLicenseKey(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::handEngine::v1::ActivateDeviceRequest* request, ::handEngine::v1::ActivateDeviceResponse* response) { return this->ActivateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_ActivateDevice(
        ::grpc::MessageAllocator< ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLicenseKey<WithCallbackMethod_ActivateDevice<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLicenseKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLicenseKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLicenseKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActivateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLicenseKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLicenseKey() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::handEngine::v1::LicenseKeyRequest, ::handEngine::v1::LicenseKeyResponse>* streamer) {
                       return this->StreamedGetLicenseKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLicenseKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLicenseKey(::grpc::ServerContext* /*context*/, const ::handEngine::v1::LicenseKeyRequest* /*request*/, ::handEngine::v1::LicenseKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLicenseKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handEngine::v1::LicenseKeyRequest,::handEngine::v1::LicenseKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActivateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActivateDevice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::handEngine::v1::ActivateDeviceRequest, ::handEngine::v1::ActivateDeviceResponse>* streamer) {
                       return this->StreamedActivateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ActivateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActivateDevice(::grpc::ServerContext* /*context*/, const ::handEngine::v1::ActivateDeviceRequest* /*request*/, ::handEngine::v1::ActivateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handEngine::v1::ActivateDeviceRequest,::handEngine::v1::ActivateDeviceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLicenseKey<WithStreamedUnaryMethod_ActivateDevice<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLicenseKey<WithStreamedUnaryMethod_ActivateDevice<Service > > StreamedService;
};

}  // namespace v1
}  // namespace handEngine


#endif  // GRPC_v1_2flicense_2eproto__INCLUDED


