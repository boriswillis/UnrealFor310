// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/animation.proto
#include "EnableGrpcIncludes.h"
#include "v1/animation.pb.h"
#include "v1/animation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "DisableGrpcIncludes.h"
namespace handEngine {
namespace v1 {

static const char* AnimationService_method_names[] = {
  "/handEngine.v1.AnimationService/GetHandAnimationStream",
  "/handEngine.v1.AnimationService/GetAllHandAnimationStream",
};

std::unique_ptr< AnimationService::Stub> AnimationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnimationService::Stub> stub(new AnimationService::Stub(channel, options));
  return stub;
}

AnimationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetHandAnimationStream_(AnimationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAllHandAnimationStream_(AnimationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::handEngine::v1::HandAnimationResponse>* AnimationService::Stub::GetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::HandAnimationResponse>::Create(channel_.get(), rpcmethod_GetHandAnimationStream_, context, request);
}

void AnimationService::Stub::async::GetHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::HandAnimationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::HandAnimationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetHandAnimationStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>* AnimationService::Stub::AsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::HandAnimationResponse>::Create(channel_.get(), cq, rpcmethod_GetHandAnimationStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::HandAnimationResponse>* AnimationService::Stub::PrepareAsyncGetHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::HandAnimationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::HandAnimationResponse>::Create(channel_.get(), cq, rpcmethod_GetHandAnimationStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::handEngine::v1::StageAnimationResponse>* AnimationService::Stub::GetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handEngine::v1::StageAnimationResponse>::Create(channel_.get(), rpcmethod_GetAllHandAnimationStream_, context, request);
}

void AnimationService::Stub::async::GetAllHandAnimationStream(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest* request, ::grpc::ClientReadReactor< ::handEngine::v1::StageAnimationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handEngine::v1::StageAnimationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllHandAnimationStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>* AnimationService::Stub::AsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::StageAnimationResponse>::Create(channel_.get(), cq, rpcmethod_GetAllHandAnimationStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handEngine::v1::StageAnimationResponse>* AnimationService::Stub::PrepareAsyncGetAllHandAnimationStreamRaw(::grpc::ClientContext* context, const ::handEngine::v1::StageAnimationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handEngine::v1::StageAnimationResponse>::Create(channel_.get(), cq, rpcmethod_GetAllHandAnimationStream_, context, request, false, nullptr);
}

AnimationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnimationService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AnimationService::Service, ::handEngine::v1::HandAnimationRequest, ::handEngine::v1::HandAnimationResponse>(
          [](AnimationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::HandAnimationRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::HandAnimationResponse>* writer) {
               return service->GetHandAnimationStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnimationService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AnimationService::Service, ::handEngine::v1::StageAnimationRequest, ::handEngine::v1::StageAnimationResponse>(
          [](AnimationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::handEngine::v1::StageAnimationRequest* req,
             ::grpc::ServerWriter<::handEngine::v1::StageAnimationResponse>* writer) {
               return service->GetAllHandAnimationStream(ctx, req, writer);
             }, this)));
}

AnimationService::Service::~Service() {
}

::grpc::Status AnimationService::Service::GetHandAnimationStream(::grpc::ServerContext* context, const ::handEngine::v1::HandAnimationRequest* request, ::grpc::ServerWriter< ::handEngine::v1::HandAnimationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnimationService::Service::GetAllHandAnimationStream(::grpc::ServerContext* context, const ::handEngine::v1::StageAnimationRequest* request, ::grpc::ServerWriter< ::handEngine::v1::StageAnimationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handEngine
}  // namespace v1

